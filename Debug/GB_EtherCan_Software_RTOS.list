
GB_EtherCan_Software_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084dc  080084dc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080084dc  080084dc  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084dc  080084dc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080084e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002710  200000a4  08008588  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027b4  08008588  000227b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d98a  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004905  00000000  00000000  0003da9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  000423a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013fd  00000000  00000000  00043d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba41  00000000  00000000  00045165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d54f  00000000  00000000  00060ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c510  00000000  00000000  0007e0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dfc  00000000  00000000  0011a608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00121404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a4 	.word	0x200000a4
 800012c:	00000000 	.word	0x00000000
 8000130:	080083e8 	.word	0x080083e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a8 	.word	0x200000a8
 800014c:	080083e8 	.word	0x080083e8

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b2e      	ldr	r3, [pc, #184]	; (8000210 <MX_CAN_Init+0xc0>)
 8000156:	4a2f      	ldr	r2, [pc, #188]	; (8000214 <MX_CAN_Init+0xc4>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800015a:	4b2d      	ldr	r3, [pc, #180]	; (8000210 <MX_CAN_Init+0xc0>)
 800015c:	2208      	movs	r2, #8
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b2b      	ldr	r3, [pc, #172]	; (8000210 <MX_CAN_Init+0xc0>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b2a      	ldr	r3, [pc, #168]	; (8000210 <MX_CAN_Init+0xc0>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800016c:	4b28      	ldr	r3, [pc, #160]	; (8000210 <MX_CAN_Init+0xc0>)
 800016e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b26      	ldr	r3, [pc, #152]	; (8000210 <MX_CAN_Init+0xc0>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b24      	ldr	r3, [pc, #144]	; (8000210 <MX_CAN_Init+0xc0>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b23      	ldr	r3, [pc, #140]	; (8000210 <MX_CAN_Init+0xc0>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b21      	ldr	r3, [pc, #132]	; (8000210 <MX_CAN_Init+0xc0>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800018e:	4b20      	ldr	r3, [pc, #128]	; (8000210 <MX_CAN_Init+0xc0>)
 8000190:	2201      	movs	r2, #1
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b1e      	ldr	r3, [pc, #120]	; (8000210 <MX_CAN_Init+0xc0>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <MX_CAN_Init+0xc0>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	481b      	ldr	r0, [pc, #108]	; (8000210 <MX_CAN_Init+0xc0>)
 80001a2:	f001 ff77 	bl	8002094 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fbde 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // Can Filter Config
  pTxHeader.DLC = 8; //give message with fix size
 80001b0:	4b19      	ldr	r3, [pc, #100]	; (8000218 <MX_CAN_Init+0xc8>)
 80001b2:	2208      	movs	r2, #8
 80001b4:	611a      	str	r2, [r3, #16]
  pTxHeader.IDE = CAN_ID_STD; //set identifier to standard
 80001b6:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_CAN_Init+0xc8>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	609a      	str	r2, [r3, #8]
  pTxHeader.RTR = CAN_RTR_DATA; //set data type to remote transmission request?
 80001bc:	4b16      	ldr	r3, [pc, #88]	; (8000218 <MX_CAN_Init+0xc8>)
 80001be:	2200      	movs	r2, #0
 80001c0:	60da      	str	r2, [r3, #12]
  pTxHeader.StdId = 0x301; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 80001c2:	4b15      	ldr	r3, [pc, #84]	; (8000218 <MX_CAN_Init+0xc8>)
 80001c4:	f240 3201 	movw	r2, #769	; 0x301
 80001c8:	601a      	str	r2, [r3, #0]

  //filter one (stack light blink)

  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //set fifo assignment
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <MX_CAN_Init+0xcc>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	611a      	str	r2, [r3, #16]
//   sFilterConfig.FilterIdHigh = 0x245 << 5; //the ID that the filter looks for (switch this for the other microcontroller)
  sFilterConfig.FilterIdHigh = 0xC8 << 5;
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <MX_CAN_Init+0xcc>)
 80001d2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80001d6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <MX_CAN_Init+0xcc>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0xC8;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <MX_CAN_Init+0xcc>)
 80001e0:	22c8      	movs	r2, #200	; 0xc8
 80001e2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <MX_CAN_Init+0xcc>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <MX_CAN_Init+0xcc>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <MX_CAN_Init+0xcc>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 80001f6:	4909      	ldr	r1, [pc, #36]	; (800021c <MX_CAN_Init+0xcc>)
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <MX_CAN_Init+0xc0>)
 80001fa:	f002 f846 	bl	800228a <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //start CAN
 80001fe:	4804      	ldr	r0, [pc, #16]	; (8000210 <MX_CAN_Init+0xc0>)
 8000200:	f002 f90c 	bl	800241c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000204:	2102      	movs	r1, #2
 8000206:	4802      	ldr	r0, [pc, #8]	; (8000210 <MX_CAN_Init+0xc0>)
 8000208:	f002 fb3c 	bl	8002884 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000130 	.word	0x20000130
 8000214:	40006400 	.word	0x40006400
 8000218:	200000c0 	.word	0x200000c0
 800021c:	200000f4 	.word	0x200000f4

08000220 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	f107 0310 	add.w	r3, r7, #16
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a20      	ldr	r2, [pc, #128]	; (80002bc <HAL_CAN_MspInit+0x9c>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d139      	bne.n	80002b4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 8000242:	69db      	ldr	r3, [r3, #28]
 8000244:	4a1e      	ldr	r2, [pc, #120]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 8000246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800024a:	61d3      	str	r3, [r2, #28]
 800024c:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 800024e:	69db      	ldr	r3, [r3, #28]
 8000250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <HAL_CAN_MspInit+0xa0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480f      	ldr	r0, [pc, #60]	; (80002c4 <HAL_CAN_MspInit+0xa4>)
 8000286:	f003 f839 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800028a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000290:	2302      	movs	r3, #2
 8000292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	4619      	mov	r1, r3
 800029e:	4809      	ldr	r0, [pc, #36]	; (80002c4 <HAL_CAN_MspInit+0xa4>)
 80002a0:	f003 f82c 	bl	80032fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2105      	movs	r1, #5
 80002a8:	2014      	movs	r0, #20
 80002aa:	f002 fde8 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002ae:	2014      	movs	r0, #20
 80002b0:	f002 fe01 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002b4:	bf00      	nop
 80002b6:	3720      	adds	r7, #32
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40006400 	.word	0x40006400
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_DMA_Init+0x48>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <MX_DMA_Init+0x48>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <MX_DMA_Init+0x48>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2105      	movs	r1, #5
 80002ea:	200e      	movs	r0, #14
 80002ec:	f002 fdc7 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002f0:	200e      	movs	r0, #14
 80002f2:	f002 fde0 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2105      	movs	r1, #5
 80002fa:	200f      	movs	r0, #15
 80002fc:	f002 fdbf 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000300:	200f      	movs	r0, #15
 8000302:	f002 fdd8 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetHandler */
  ethernetHandlerHandle = osThreadNew(StartEthernetHandlerTask, NULL, &ethernetHandler_attributes);
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <MX_FREERTOS_Init+0x18>)
 800031a:	2100      	movs	r1, #0
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_FREERTOS_Init+0x1c>)
 800031e:	f005 fb55 	bl	80059cc <osThreadNew>
 8000322:	4603      	mov	r3, r0
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <MX_FREERTOS_Init+0x20>)
 8000326:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	0800848c 	.word	0x0800848c
 8000330:	08000339 	.word	0x08000339
 8000334:	20000958 	.word	0x20000958

08000338 <StartEthernetHandlerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernetHandlerTask */
void StartEthernetHandlerTask(void *argument)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEthernetHandlerTask */
	Ethernet_Init();
 8000340:	f000 f910 	bl	8000564 <Ethernet_Init>

  /* Infinite loop */
  for(;;)
  {
//	UDP_Loop(SOCKET_NUMBER, gDATABUF, UDP_PORT);
    TCP_Loop(SOCKET_NUMBER, gDATABUF, TCP_PORT);
 8000344:	f64d 52e0 	movw	r2, #56800	; 0xdde0
 8000348:	4903      	ldr	r1, [pc, #12]	; (8000358 <StartEthernetHandlerTask+0x20>)
 800034a:	2000      	movs	r0, #0
 800034c:	f000 f946 	bl	80005dc <TCP_Loop>
    osDelay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f005 fbe5 	bl	8005b20 <osDelay>
    TCP_Loop(SOCKET_NUMBER, gDATABUF, TCP_PORT);
 8000356:	e7f5      	b.n	8000344 <StartEthernetHandlerTask+0xc>
 8000358:	20000158 	.word	0x20000158

0800035c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b49      	ldr	r3, [pc, #292]	; (8000498 <MX_GPIO_Init+0x13c>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a48      	ldr	r2, [pc, #288]	; (8000498 <MX_GPIO_Init+0x13c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b46      	ldr	r3, [pc, #280]	; (8000498 <MX_GPIO_Init+0x13c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b43      	ldr	r3, [pc, #268]	; (8000498 <MX_GPIO_Init+0x13c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a42      	ldr	r2, [pc, #264]	; (8000498 <MX_GPIO_Init+0x13c>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b40      	ldr	r3, [pc, #256]	; (8000498 <MX_GPIO_Init+0x13c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a3c      	ldr	r2, [pc, #240]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b3a      	ldr	r3, [pc, #232]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b37      	ldr	r3, [pc, #220]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a36      	ldr	r2, [pc, #216]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b34      	ldr	r3, [pc, #208]	; (8000498 <MX_GPIO_Init+0x13c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SCS_Pin|ETH_RST_Pin|LED_RX_Pin|LED_TX_Pin
 80003d0:	2200      	movs	r2, #0
 80003d2:	f24f 0103 	movw	r1, #61443	; 0xf003
 80003d6:	4831      	ldr	r0, [pc, #196]	; (800049c <MX_GPIO_Init+0x140>)
 80003d8:	f003 f914 	bl	8003604 <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	482f      	ldr	r0, [pc, #188]	; (80004a0 <MX_GPIO_Init+0x144>)
 80003e4:	f003 f90e 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80003e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ee:	2303      	movs	r3, #3
 80003f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	482a      	ldr	r0, [pc, #168]	; (80004a4 <MX_GPIO_Init+0x148>)
 80003fa:	f002 ff7f 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003fe:	f248 031f 	movw	r3, #32799	; 0x801f
 8000402:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000404:	2303      	movs	r3, #3
 8000406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4824      	ldr	r0, [pc, #144]	; (80004a0 <MX_GPIO_Init+0x144>)
 8000410:	f002 ff74 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_SCS_Pin|ETH_RST_Pin|LED_RX_Pin|LED_TX_Pin
 8000414:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000418:	613b      	str	r3, [r7, #16]
                          |LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <MX_GPIO_Init+0x140>)
 800042e:	f002 ff65 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 8000432:	2304      	movs	r3, #4
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_GPIO_Init+0x14c>)
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4815      	ldr	r0, [pc, #84]	; (800049c <MX_GPIO_Init+0x140>)
 8000446:	f002 ff59 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4
 800044a:	f640 73f8 	movw	r3, #4088	; 0xff8
 800044e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4810      	ldr	r0, [pc, #64]	; (800049c <MX_GPIO_Init+0x140>)
 800045c:	f002 ff4e 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 8000460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4809      	ldr	r0, [pc, #36]	; (80004a0 <MX_GPIO_Init+0x144>)
 800047a:	f002 ff3f 	bl	80032fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2105      	movs	r1, #5
 8000482:	2008      	movs	r0, #8
 8000484:	f002 fcfb 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000488:	2008      	movs	r0, #8
 800048a:	f002 fd14 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40011000 	.word	0x40011000
 80004a8:	10210000 	.word	0x10210000

080004ac <W5500_Select>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W5500_Select(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SCS_GPIO_Port, SPI1_SCS_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <W5500_Select+0x14>)
 80004b6:	f003 f8a5 	bl	8003604 <HAL_GPIO_WritePin>
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <W5500_Unselect>:

void W5500_Unselect(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SCS_GPIO_Port, SPI1_SCS_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2101      	movs	r1, #1
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <W5500_Unselect+0x14>)
 80004ce:	f003 f899 	bl	8003604 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010c00 	.word	0x40010c00

080004dc <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80004e8:	887a      	ldrh	r2, [r7, #2]
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <W5500_ReadBuff+0x24>)
 80004f2:	f003 fec8 	bl	8004286 <HAL_SPI_Receive>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000b18 	.word	0x20000b18

08000504 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000510:	887a      	ldrh	r2, [r7, #2]
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <W5500_WriteBuff+0x24>)
 800051a:	f003 fd71 	bl	8004000 <HAL_SPI_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000b18 	.word	0x20000b18

0800052c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffd0 	bl	80004dc <W5500_ReadBuff>
	return byte;
 800053c:	79fb      	ldrb	r3, [r7, #7]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffd5 	bl	8000504 <W5500_WriteBuff>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <Ethernet_Init>:

void Ethernet_Init() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4812      	ldr	r0, [pc, #72]	; (80005b8 <Ethernet_Init+0x54>)
 8000570:	f003 f848 	bl	8003604 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <Ethernet_Init+0x58>)
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <Ethernet_Init+0x5c>)
 8000578:	f001 fb60 	bl	8001c3c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800057c:	4911      	ldr	r1, [pc, #68]	; (80005c4 <Ethernet_Init+0x60>)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <Ethernet_Init+0x64>)
 8000580:	f001 fb80 	bl	8001c84 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000584:	4911      	ldr	r1, [pc, #68]	; (80005cc <Ethernet_Init+0x68>)
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <Ethernet_Init+0x6c>)
 8000588:	f001 fba8 	bl	8001cdc <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = {16, 0, 0, 0, 0, 0, 0, 0};
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <Ethernet_Init+0x70>)
 800058e:	463b      	mov	r3, r7
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8000598:	463a      	mov	r2, r7
 800059a:	463b      	mov	r3, r7
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fc14 	bl	8001dcc <wizchip_init>
	wizchip_setnetinfo(&gWIZNETINFO);
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <Ethernet_Init+0x74>)
 80005a6:	f001 fc9d 	bl	8001ee4 <wizchip_setnetinfo>
	wizchip_getnetinfo(&gWIZNETINFO);
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <Ethernet_Init+0x74>)
 80005ac:	f001 fcda 	bl	8001f64 <wizchip_getnetinfo>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	080004c5 	.word	0x080004c5
 80005c0:	080004ad 	.word	0x080004ad
 80005c4:	08000547 	.word	0x08000547
 80005c8:	0800052d 	.word	0x0800052d
 80005cc:	08000505 	.word	0x08000505
 80005d0:	080004dd 	.word	0x080004dd
 80005d4:	08008410 	.word	0x08008410
 80005d8:	20000000 	.word	0x20000000

080005dc <TCP_Loop>:
	}
	return 1;
}

int32_t TCP_Loop(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	80bb      	strh	r3, [r7, #4]
	memset(&txJSON, '\0', txJSON_size);
 80005ec:	22c8      	movs	r2, #200	; 0xc8
 80005ee:	2100      	movs	r1, #0
 80005f0:	488e      	ldr	r0, [pc, #568]	; (800082c <TCP_Loop+0x250>)
 80005f2:	f007 fe13 	bl	800821c <memset>
	memset(&rxJSON, '\0', rxJSON_size);
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	2100      	movs	r1, #0
 80005fa:	488d      	ldr	r0, [pc, #564]	; (8000830 <TCP_Loop+0x254>)
 80005fc:	f007 fe0e 	bl	800821c <memset>
	int32_t ret;
	uint16_t size = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	82fb      	strh	r3, [r7, #22]

	switch(getSn_SR(sn))
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3301      	adds	r3, #1
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f811 	bl	8001638 <WIZCHIP_READ>
 8000616:	4603      	mov	r3, r0
 8000618:	2b1c      	cmp	r3, #28
 800061a:	f200 80f8 	bhi.w	800080e <TCP_Loop+0x232>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <TCP_Loop+0x48>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	080007f3 	.word	0x080007f3
 8000628:	0800080f 	.word	0x0800080f
 800062c:	0800080f 	.word	0x0800080f
 8000630:	0800080f 	.word	0x0800080f
 8000634:	0800080f 	.word	0x0800080f
 8000638:	0800080f 	.word	0x0800080f
 800063c:	0800080f 	.word	0x0800080f
 8000640:	0800080f 	.word	0x0800080f
 8000644:	0800080f 	.word	0x0800080f
 8000648:	0800080f 	.word	0x0800080f
 800064c:	0800080f 	.word	0x0800080f
 8000650:	0800080f 	.word	0x0800080f
 8000654:	0800080f 	.word	0x0800080f
 8000658:	0800080f 	.word	0x0800080f
 800065c:	0800080f 	.word	0x0800080f
 8000660:	0800080f 	.word	0x0800080f
 8000664:	0800080f 	.word	0x0800080f
 8000668:	0800080f 	.word	0x0800080f
 800066c:	0800080f 	.word	0x0800080f
 8000670:	080007dd 	.word	0x080007dd
 8000674:	0800080f 	.word	0x0800080f
 8000678:	0800080f 	.word	0x0800080f
 800067c:	0800080f 	.word	0x0800080f
 8000680:	08000699 	.word	0x08000699
 8000684:	0800080f 	.word	0x0800080f
 8000688:	0800080f 	.word	0x0800080f
 800068c:	0800080f 	.word	0x0800080f
 8000690:	0800080f 	.word	0x0800080f
 8000694:	080007c7 	.word	0x080007c7
	{
		case SOCK_ESTABLISHED :
			if(getSn_IR(sn) & Sn_IR_CON)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3301      	adds	r3, #1
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ffc7 	bl	8001638 <WIZCHIP_READ>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d009      	beq.n	80006c8 <TCP_Loop+0xec>
			{
				setSn_IR(sn, Sn_IR_CON);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	3301      	adds	r3, #1
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f804 	bl	80016d0 <WIZCHIP_WRITE>
			}
			if (CanMessageReceived)
 80006c8:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <TCP_Loop+0x258>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d02d      	beq.n	800072c <TCP_Loop+0x150>
			{
				t1 = HAL_GetTick();
 80006d0:	f001 fcd6 	bl	8002080 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <TCP_Loop+0x25c>)
 80006d8:	6013      	str	r3, [r2, #0]

				txJSON[0] = 0xAA;
 80006da:	4b54      	ldr	r3, [pc, #336]	; (800082c <TCP_Loop+0x250>)
 80006dc:	22aa      	movs	r2, #170	; 0xaa
 80006de:	701a      	strb	r2, [r3, #0]
//				txJSON[1] = pRxHeader.StdId;
//				txJSON[1] = RsTxData[0];
				txJSON[1] = pRxHeader.DLC;
 80006e0:	4b56      	ldr	r3, [pc, #344]	; (800083c <TCP_Loop+0x260>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b51      	ldr	r3, [pc, #324]	; (800082c <TCP_Loop+0x250>)
 80006e8:	705a      	strb	r2, [r3, #1]

				for(int i = 0; i < pRxHeader.DLC; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	e00a      	b.n	8000706 <TCP_Loop+0x12a>
				{
					txJSON[2 + i] = RsTxData[i];
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3302      	adds	r3, #2
 80006f4:	4952      	ldr	r1, [pc, #328]	; (8000840 <TCP_Loop+0x264>)
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	440a      	add	r2, r1
 80006fa:	7811      	ldrb	r1, [r2, #0]
 80006fc:	4a4b      	ldr	r2, [pc, #300]	; (800082c <TCP_Loop+0x250>)
 80006fe:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < pRxHeader.DLC; i++)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <TCP_Loop+0x260>)
 8000708:	691a      	ldr	r2, [r3, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8ef      	bhi.n	80006f0 <TCP_Loop+0x114>
				}
//				sprintf((char*)txJSON, "{507,232,4,%02lu,%lu,%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X}",
//				pRxHeader.StdId, pRxHeader.DLC, RsTxData[0], RsTxData[1], RsTxData[2], RsTxData[3], RsTxData[4], RsTxData[5], RsTxData[6], RsTxData[7]);
				send(sn, txJSON, 2 + pRxHeader.DLC);
 8000710:	4b4a      	ldr	r3, [pc, #296]	; (800083c <TCP_Loop+0x260>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	b29b      	uxth	r3, r3
 8000716:	3302      	adds	r3, #2
 8000718:	b29a      	uxth	r2, r3
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4943      	ldr	r1, [pc, #268]	; (800082c <TCP_Loop+0x250>)
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fb7c 	bl	8000e1c <send>
				CanMessageReceived = 0;
 8000724:	4b43      	ldr	r3, [pc, #268]	; (8000834 <TCP_Loop+0x258>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
				break;
 800072a:	e079      	b.n	8000820 <TCP_Loop+0x244>
			}
			if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f927 	bl	8001982 <getSn_RX_RSR>
 8000734:	4603      	mov	r3, r0
 8000736:	82fb      	strh	r3, [r7, #22]
 8000738:	8afb      	ldrh	r3, [r7, #22]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d069      	beq.n	8000812 <TCP_Loop+0x236>
			{
				if (size > DATA_BUF_SIZE)
 800073e:	8afb      	ldrh	r3, [r7, #22]
 8000740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000744:	d902      	bls.n	800074c <TCP_Loop+0x170>
				size = DATA_BUF_SIZE;
 8000746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800074a:	82fb      	strh	r3, [r7, #22]
				ret = recv(sn, buf, size);
 800074c:	8afa      	ldrh	r2, [r7, #22]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	6839      	ldr	r1, [r7, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fc5c 	bl	8001010 <recv>
 8000758:	60b8      	str	r0, [r7, #8]
				if (ret <= 0) return ret;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc01      	bgt.n	8000764 <TCP_Loop+0x188>
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	e05e      	b.n	8000822 <TCP_Loop+0x246>
				size = (uint16_t) ret;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	82fb      	strh	r3, [r7, #22]
				memcpy(&rxJSON, &buf[0], size);
 8000768:	8afb      	ldrh	r3, [r7, #22]
 800076a:	461a      	mov	r2, r3
 800076c:	6839      	ldr	r1, [r7, #0]
 800076e:	4830      	ldr	r0, [pc, #192]	; (8000830 <TCP_Loop+0x254>)
 8000770:	f007 fdd8 	bl	8008324 <memcpy>
				if(rxJSON[0] == 0xFF)
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <TCP_Loop+0x254>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2bff      	cmp	r3, #255	; 0xff
 800077a:	d11d      	bne.n	80007b8 <TCP_Loop+0x1dc>
				{
					pTxHeader.StdId = rxJSON[1];
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <TCP_Loop+0x254>)
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	461a      	mov	r2, r3
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <TCP_Loop+0x268>)
 8000784:	601a      	str	r2, [r3, #0]
					pTxHeader.DLC	= rxJSON[2];
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <TCP_Loop+0x254>)
 8000788:	789b      	ldrb	r3, [r3, #2]
 800078a:	461a      	mov	r2, r3
 800078c:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <TCP_Loop+0x268>)
 800078e:	611a      	str	r2, [r3, #16]
					for(int i = 0; i < pTxHeader.DLC; i++)
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e00b      	b.n	80007ae <TCP_Loop+0x1d2>
					{
						CanSendArray[i] = rxJSON[3 + i];
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3303      	adds	r3, #3
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <TCP_Loop+0x254>)
 800079c:	5cd1      	ldrb	r1, [r2, r3]
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <TCP_Loop+0x26c>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	460a      	mov	r2, r1
 80007a6:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < pTxHeader.DLC; i++)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <TCP_Loop+0x268>)
 80007b0:	691a      	ldr	r2, [r3, #16]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8ee      	bhi.n	8000796 <TCP_Loop+0x1ba>
					}
				}
				HAL_CAN_AddTxMessage(&hcan, &pTxHeader, CanSendArray, &TxMailbox);
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <TCP_Loop+0x270>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <TCP_Loop+0x26c>)
 80007bc:	4921      	ldr	r1, [pc, #132]	; (8000844 <TCP_Loop+0x268>)
 80007be:	4824      	ldr	r0, [pc, #144]	; (8000850 <TCP_Loop+0x274>)
 80007c0:	f001 fe70 	bl	80024a4 <HAL_CAN_AddTxMessage>
			}
			break;
 80007c4:	e025      	b.n	8000812 <TCP_Loop+0x236>
		case SOCK_CLOSE_WAIT :
			if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fab1 	bl	8000d30 <disconnect>
 80007ce:	4603      	mov	r3, r0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d01e      	beq.n	8000816 <TCP_Loop+0x23a>
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	e022      	b.n	8000822 <TCP_Loop+0x246>
			break;
		case SOCK_INIT :
			if( (ret = listen(sn)) != SOCK_OK) return ret;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fa4c 	bl	8000c7c <listen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d015      	beq.n	800081a <TCP_Loop+0x23e>
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	e017      	b.n	8000822 <TCP_Loop+0x246>
			break;
		case SOCK_CLOSED:
			if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80007f2:	88ba      	ldrh	r2, [r7, #4]
 80007f4:	79f8      	ldrb	r0, [r7, #7]
 80007f6:	2300      	movs	r3, #0
 80007f8:	2101      	movs	r1, #1
 80007fa:	f000 f8bd 	bl	8000978 <socket>
 80007fe:	4603      	mov	r3, r0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	429a      	cmp	r2, r3
 8000808:	d009      	beq.n	800081e <TCP_Loop+0x242>
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	e009      	b.n	8000822 <TCP_Loop+0x246>
			break;
		default:
			break;
 800080e:	bf00      	nop
 8000810:	e006      	b.n	8000820 <TCP_Loop+0x244>
			break;
 8000812:	bf00      	nop
 8000814:	e004      	b.n	8000820 <TCP_Loop+0x244>
			break;
 8000816:	bf00      	nop
 8000818:	e002      	b.n	8000820 <TCP_Loop+0x244>
			break;
 800081a:	bf00      	nop
 800081c:	e000      	b.n	8000820 <TCP_Loop+0x244>
			break;
 800081e:	bf00      	nop
   }
   return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000a24 	.word	0x20000a24
 8000830:	2000095c 	.word	0x2000095c
 8000834:	20000aec 	.word	0x20000aec
 8000838:	20000af8 	.word	0x20000af8
 800083c:	200000d8 	.word	0x200000d8
 8000840:	20000af0 	.word	0x20000af0
 8000844:	200000c0 	.word	0x200000c0
 8000848:	20000120 	.word	0x20000120
 800084c:	2000011c 	.word	0x2000011c
 8000850:	20000130 	.word	0x20000130

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f001 fbea 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f811 	bl	8000882 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff fd7c 	bl	800035c <MX_GPIO_Init>
  MX_DMA_Init();
 8000864:	f7ff fd30 	bl	80002c8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000868:	f000 fc88 	bl	800117c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800086c:	f000 fe10 	bl	8001490 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000870:	f7ff fc6e 	bl	8000150 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000874:	f005 f844 	bl	8005900 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000878:	f7ff fd4c 	bl	8000314 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800087c:	f005 f872 	bl	8005964 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x2c>

08000882 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b090      	sub	sp, #64	; 0x40
 8000886:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f007 fcc3 	bl	800821c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fed4 	bl	8003678 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008d6:	f000 f849 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2102      	movs	r1, #2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 f941 	bl	8003b7c <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000900:	f000 f834 	bl	800096c <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3740      	adds	r7, #64	; 0x40
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pRxHeader, CanReceiveArray);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000918:	2100      	movs	r1, #0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f001 fe91 	bl	8002642 <HAL_CAN_GetRxMessage>
	memcpy(RsTxData, CanReceiveArray, 8);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000924:	6810      	ldr	r0, [r2, #0]
 8000926:	6851      	ldr	r1, [r2, #4]
 8000928:	c303      	stmia	r3!, {r0, r1}
	CanMessageReceived = 1;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000128 	.word	0x20000128
 800093c:	200000d8 	.word	0x200000d8
 8000940:	20000af0 	.word	0x20000af0
 8000944:	20000aec 	.word	0x20000aec

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f001 fb7f 	bl	800205c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000800 	.word	0x40000800

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	4611      	mov	r1, r2
 8000984:	461a      	mov	r2, r3
 8000986:	4623      	mov	r3, r4
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	4603      	mov	r3, r0
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	460b      	mov	r3, r1
 8000990:	80bb      	strh	r3, [r7, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b08      	cmp	r3, #8
 800099a:	d902      	bls.n	80009a2 <socket+0x2a>
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	e0f0      	b.n	8000b84 <socket+0x20c>
	switch(protocol)
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d005      	beq.n	80009b4 <socket+0x3c>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dd11      	ble.n	80009d0 <socket+0x58>
 80009ac:	3b02      	subs	r3, #2
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d80e      	bhi.n	80009d0 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80009b2:	e010      	b.n	80009d6 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2204      	movs	r2, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80009c0:	f000 fed4 	bl	800176c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <socket+0x5e>
 80009ca:	f06f 0302 	mvn.w	r3, #2
 80009ce:	e0d9      	b.n	8000b84 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80009d0:	f06f 0304 	mvn.w	r3, #4
 80009d4:	e0d6      	b.n	8000b84 <socket+0x20c>
         break;
 80009d6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <socket+0x70>
 80009e2:	f06f 0305 	mvn.w	r3, #5
 80009e6:	e0cd      	b.n	8000b84 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d028      	beq.n	8000a40 <socket+0xc8>
	{
   	switch(protocol)
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d002      	beq.n	80009fa <socket+0x82>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d008      	beq.n	8000a0a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80009f8:	e022      	b.n	8000a40 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d11a      	bne.n	8000a3a <socket+0xc2>
 8000a04:	f06f 0305 	mvn.w	r3, #5
 8000a08:	e0bc      	b.n	8000b84 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db02      	blt.n	8000a22 <socket+0xaa>
 8000a1c:	f06f 0305 	mvn.w	r3, #5
 8000a20:	e0b0      	b.n	8000b84 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d008      	beq.n	8000a3e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db04      	blt.n	8000a3e <socket+0xc6>
 8000a34:	f06f 0305 	mvn.w	r3, #5
 8000a38:	e0a4      	b.n	8000b84 <socket+0x20c>
   	      break;
 8000a3a:	bf00      	nop
 8000a3c:	e000      	b.n	8000a40 <socket+0xc8>
   	      break;
 8000a3e:	bf00      	nop
   	}
   }
	close(sn);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8ac 	bl	8000ba0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a56:	f023 030f 	bic.w	r3, r3, #15
 8000a5a:	b25a      	sxtb	r2, r3
 8000a5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	f000 fe32 	bl	80016d0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d110      	bne.n	8000a94 <socket+0x11c>
	{
	   port = sock_any_port++;
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <socket+0x214>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	b291      	uxth	r1, r2
 8000a7a:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <socket+0x214>)
 8000a7c:	8011      	strh	r1, [r2, #0]
 8000a7e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000a80:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <socket+0x214>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d103      	bne.n	8000a94 <socket+0x11c>
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <socket+0x214>)
 8000a8e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000a92:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	3301      	adds	r3, #1
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4610      	mov	r0, r2
 8000aae:	f000 fe0f 	bl	80016d0 <WIZCHIP_WRITE>
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000abe:	461a      	mov	r2, r3
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	f000 fe02 	bl	80016d0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fdf8 	bl	80016d0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ae0:	bf00      	nop
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fda2 	bl	8001638 <WIZCHIP_READ>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f3      	bne.n	8000ae2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2201      	movs	r2, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <socket+0x218>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <socket+0x218>)
 8000b16:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	f003 0201 	and.w	r2, r3, #1
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <socket+0x218>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <socket+0x218>)
 8000b34:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <socket+0x21c>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <socket+0x21c>)
 8000b52:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <socket+0x220>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <socket+0x224>)
 8000b62:	2100      	movs	r1, #0
 8000b64:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000b66:	bf00      	nop
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fd5f 	bl	8001638 <WIZCHIP_READ>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f3      	beq.n	8000b68 <socket+0x1f0>
   return (int8_t)sn;
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000afc 	.word	0x20000afc
 8000b94:	20000afe 	.word	0x20000afe
 8000b98:	20000b00 	.word	0x20000b00
 8000b9c:	20000b10 	.word	0x20000b10

08000ba0 <close>:

int8_t close(uint8_t sn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d902      	bls.n	8000bb6 <close+0x16>
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	e055      	b.n	8000c62 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	3301      	adds	r3, #1
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fd83 	bl	80016d0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000bca:	bf00      	nop
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fd2d 	bl	8001638 <WIZCHIP_READ>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f3      	bne.n	8000bcc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	3301      	adds	r3, #1
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bf0:	211f      	movs	r1, #31
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fd6c 	bl	80016d0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <close+0xcc>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <close+0xcc>)
 8000c14:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <close+0xd0>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <close+0xd0>)
 8000c32:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <close+0xd4>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <close+0xd8>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000c46:	bf00      	nop
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fcef 	bl	8001638 <WIZCHIP_READ>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1f3      	bne.n	8000c48 <close+0xa8>
	return SOCK_OK;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000afc 	.word	0x20000afc
 8000c70:	20000afe 	.word	0x20000afe
 8000c74:	20000b00 	.word	0x20000b00
 8000c78:	20000b10 	.word	0x20000b10

08000c7c <listen>:

int8_t listen(uint8_t sn)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d902      	bls.n	8000c92 <listen+0x16>
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	e049      	b.n	8000d26 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	3301      	adds	r3, #1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fccc 	bl	8001638 <WIZCHIP_READ>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d002      	beq.n	8000cb0 <listen+0x34>
 8000caa:	f06f 0304 	mvn.w	r3, #4
 8000cae:	e03a      	b.n	8000d26 <listen+0xaa>
	CHECK_SOCKINIT();
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcbb 	bl	8001638 <WIZCHIP_READ>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b13      	cmp	r3, #19
 8000cc6:	d002      	beq.n	8000cce <listen+0x52>
 8000cc8:	f06f 0302 	mvn.w	r3, #2
 8000ccc:	e02b      	b.n	8000d26 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fcf7 	bl	80016d0 <WIZCHIP_WRITE>
	while(getSn_CR(sn))
 8000ce2:	bf00      	nop
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3301      	adds	r3, #1
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fca1 	bl	8001638 <WIZCHIP_READ>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <listen+0x68>
		;
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000cfc:	e006      	b.n	8000d0c <listen+0x90>
   {
         close(sn);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff4d 	bl	8000ba0 <close>
         return SOCKERR_SOCKCLOSED;
 8000d06:	f06f 0303 	mvn.w	r3, #3
 8000d0a:	e00c      	b.n	8000d26 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	3301      	adds	r3, #1
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fc8d 	bl	8001638 <WIZCHIP_READ>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b14      	cmp	r3, #20
 8000d22:	d1ec      	bne.n	8000cfe <listen+0x82>
   }
   return SOCK_OK;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d902      	bls.n	8000d46 <disconnect+0x16>
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	e062      	b.n	8000e0c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fc72 	bl	8001638 <WIZCHIP_READ>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d002      	beq.n	8000d64 <disconnect+0x34>
 8000d5e:	f06f 0304 	mvn.w	r3, #4
 8000d62:	e053      	b.n	8000e0c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	3301      	adds	r3, #1
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d70:	2108      	movs	r1, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fcac 	bl	80016d0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000d78:	bf00      	nop
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3301      	adds	r3, #1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fc56 	bl	8001638 <WIZCHIP_READ>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f3      	bne.n	8000d7a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2201      	movs	r2, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <disconnect+0xe4>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4013      	ands	r3, r2
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <disconnect+0xe4>)
 8000dae:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <disconnect+0xe8>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	fa42 f303 	asr.w	r3, r2, r3
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d016      	beq.n	8000df2 <disconnect+0xc2>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e021      	b.n	8000e0c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	3301      	adds	r3, #1
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fc2f 	bl	8001638 <WIZCHIP_READ>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <disconnect+0xc2>
	   {
	      close(sn);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff feda 	bl	8000ba0 <close>
	      return SOCKERR_TIMEOUT;
 8000dec:	f06f 030c 	mvn.w	r3, #12
 8000df0:	e00c      	b.n	8000e0c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	3301      	adds	r3, #1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fc1a 	bl	8001638 <WIZCHIP_READ>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1de      	bne.n	8000dc8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000afe 	.word	0x20000afe
 8000e18:	20000afc 	.word	0x20000afc

08000e1c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d902      	bls.n	8000e40 <send+0x24>
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e0de      	b.n	8000ffe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	3301      	adds	r3, #1
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fbf5 	bl	8001638 <WIZCHIP_READ>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d002      	beq.n	8000e5e <send+0x42>
 8000e58:	f06f 0304 	mvn.w	r3, #4
 8000e5c:	e0cf      	b.n	8000ffe <send+0x1e2>
   CHECK_SOCKDATA();
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <send+0x4e>
 8000e64:	f06f 030d 	mvn.w	r3, #13
 8000e68:	e0c9      	b.n	8000ffe <send+0x1e2>
   tmp = getSn_SR(sn);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	3301      	adds	r3, #1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fbde 	bl	8001638 <WIZCHIP_READ>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b17      	cmp	r3, #23
 8000e84:	d005      	beq.n	8000e92 <send+0x76>
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b1c      	cmp	r3, #28
 8000e8a:	d002      	beq.n	8000e92 <send+0x76>
 8000e8c:	f06f 0306 	mvn.w	r3, #6
 8000e90:	e0b5      	b.n	8000ffe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <send+0x1ec>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	fa42 f303 	asr.w	r3, r2, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d039      	beq.n	8000f1a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	3301      	adds	r3, #1
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fbc0 	bl	8001638 <WIZCHIP_READ>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	3301      	adds	r3, #1
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fbf9 	bl	80016d0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <send+0x1ec>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b43      	ldr	r3, [pc, #268]	; (8001008 <send+0x1ec>)
 8000efa:	801a      	strh	r2, [r3, #0]
 8000efc:	e00d      	b.n	8000f1a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <send+0xfa>
      {
         close(sn);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe48 	bl	8000ba0 <close>
         return SOCKERR_TIMEOUT;
 8000f10:	f06f 030c 	mvn.w	r3, #12
 8000f14:	e073      	b.n	8000ffe <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e071      	b.n	8000ffe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	3301      	adds	r3, #1
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb86 	bl	8001638 <WIZCHIP_READ>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000f34:	88ba      	ldrh	r2, [r7, #4]
 8000f36:	89bb      	ldrh	r3, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d901      	bls.n	8000f40 <send+0x124>
 8000f3c:	89bb      	ldrh	r3, [r7, #12]
 8000f3e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fcd2 	bl	80018ec <getSn_TX_FSR>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	3301      	adds	r3, #1
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fb6d 	bl	8001638 <WIZCHIP_READ>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b17      	cmp	r3, #23
 8000f66:	d009      	beq.n	8000f7c <send+0x160>
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b1c      	cmp	r3, #28
 8000f6c:	d006      	beq.n	8000f7c <send+0x160>
      {
         close(sn);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe15 	bl	8000ba0 <close>
         return SOCKERR_SOCKSTATUS;
 8000f76:	f06f 0306 	mvn.w	r3, #6
 8000f7a:	e040      	b.n	8000ffe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <send+0x1f0>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	fa42 f303 	asr.w	r3, r2, r3
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <send+0x180>
 8000f90:	88ba      	ldrh	r2, [r7, #4]
 8000f92:	89bb      	ldrh	r3, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d901      	bls.n	8000f9c <send+0x180>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e030      	b.n	8000ffe <send+0x1e2>
      if(len <= freesize) break;
 8000f9c:	88ba      	ldrh	r2, [r7, #4]
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d900      	bls.n	8000fa6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000fa4:	e7cc      	b.n	8000f40 <send+0x124>
      if(len <= freesize) break;
 8000fa6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000fa8:	88ba      	ldrh	r2, [r7, #4]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fd32 	bl	8001a18 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fb84 	bl	80016d0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000fc8:	bf00      	nop
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	3301      	adds	r3, #1
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fb2e 	bl	8001638 <WIZCHIP_READ>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f3      	bne.n	8000fca <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <send+0x1ec>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <send+0x1ec>)
 8000ffa:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000afe 	.word	0x20000afe
 800100c:	20000afc 	.word	0x20000afc

08001010 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b08      	cmp	r3, #8
 800102c:	d902      	bls.n	8001034 <recv+0x24>
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e09c      	b.n	800116e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	3301      	adds	r3, #1
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fafb 	bl	8001638 <WIZCHIP_READ>
 8001042:	4603      	mov	r3, r0
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	2b01      	cmp	r3, #1
 800104a:	d002      	beq.n	8001052 <recv+0x42>
 800104c:	f06f 0304 	mvn.w	r3, #4
 8001050:	e08d      	b.n	800116e <recv+0x15e>
   CHECK_SOCKDATA();
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <recv+0x4e>
 8001058:	f06f 030d 	mvn.w	r3, #13
 800105c:	e087      	b.n	800116e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	3301      	adds	r3, #1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fae4 	bl	8001638 <WIZCHIP_READ>
 8001070:	4603      	mov	r3, r0
 8001072:	b29b      	uxth	r3, r3
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001078:	89ba      	ldrh	r2, [r7, #12]
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d201      	bcs.n	8001084 <recv+0x74>
 8001080:	89bb      	ldrh	r3, [r7, #12]
 8001082:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fc7b 	bl	8001982 <getSn_RX_RSR>
 800108c:	4603      	mov	r3, r0
 800108e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3301      	adds	r3, #1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800109c:	4618      	mov	r0, r3
 800109e:	f000 facb 	bl	8001638 <WIZCHIP_READ>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b17      	cmp	r3, #23
 80010aa:	d026      	beq.n	80010fa <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b1c      	cmp	r3, #28
 80010b0:	d11c      	bne.n	80010ec <recv+0xdc>
            {
               if(recvsize != 0) break;
 80010b2:	89bb      	ldrh	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d133      	bne.n	8001120 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fc16 	bl	80018ec <getSn_TX_FSR>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461c      	mov	r4, r3
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3301      	adds	r3, #1
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fab1 	bl	8001638 <WIZCHIP_READ>
 80010d6:	4603      	mov	r3, r0
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	429c      	cmp	r4, r3
 80010dc:	d10d      	bne.n	80010fa <recv+0xea>
               {
                  close(sn);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd5d 	bl	8000ba0 <close>
                  return SOCKERR_SOCKSTATUS;
 80010e6:	f06f 0306 	mvn.w	r3, #6
 80010ea:	e040      	b.n	800116e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd56 	bl	8000ba0 <close>
               return SOCKERR_SOCKSTATUS;
 80010f4:	f06f 0306 	mvn.w	r3, #6
 80010f8:	e039      	b.n	800116e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <recv+0x168>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	fa42 f303 	asr.w	r3, r2, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <recv+0x108>
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <recv+0x108>
 8001114:	2300      	movs	r3, #0
 8001116:	e02a      	b.n	800116e <recv+0x15e>
         if(recvsize != 0) break;
 8001118:	89bb      	ldrh	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800111e:	e7b1      	b.n	8001084 <recv+0x74>
               if(recvsize != 0) break;
 8001120:	bf00      	nop
 8001122:	e000      	b.n	8001126 <recv+0x116>
         if(recvsize != 0) break;
 8001124:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001126:	89ba      	ldrh	r2, [r7, #12]
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d201      	bcs.n	8001132 <recv+0x122>
 800112e:	89bb      	ldrh	r3, [r7, #12]
 8001130:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001132:	88ba      	ldrh	r2, [r7, #4]
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fcc9 	bl	8001ad0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	3301      	adds	r3, #1
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fabf 	bl	80016d0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001152:	bf00      	nop
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	3301      	adds	r3, #1
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fa69 	bl	8001638 <WIZCHIP_READ>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800116c:	88bb      	ldrh	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	bf00      	nop
 8001178:	20000afc 	.word	0x20000afc

0800117c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <MX_SPI1_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800118c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_SPI1_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b0:	2208      	movs	r2, #8
 80011b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_SPI1_Init+0x64>)
 80011ce:	f002 fe93 	bl	8003ef8 <HAL_SPI_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d8:	f7ff fbc8 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000b18 	.word	0x20000b18
 80011e4:	40013000 	.word	0x40013000

080011e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_SPI_MspInit+0x88>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d12f      	bne.n	8001268 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a19      	ldr	r2, [pc, #100]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 800120e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_SPI_MspInit+0x8c>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <HAL_SPI_MspInit+0x90>)
 800124c:	f002 f856 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001250:	2340      	movs	r3, #64	; 0x40
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_SPI_MspInit+0x90>)
 8001264:	f002 f84a 	bl	80032fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013000 	.word	0x40013000
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_MspInit+0x68>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_MspInit+0x68>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x68>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x68>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_MspInit+0x68>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x68>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	210f      	movs	r1, #15
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	f001 fde0 	bl	8002e7e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x6c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x6c>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_InitTick+0xe8>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <HAL_InitTick+0xe8>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_InitTick+0xe8>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800131a:	f107 0210 	add.w	r2, r7, #16
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fd99 	bl	8003e5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001334:	f002 fd6a 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8001338:	6378      	str	r0, [r7, #52]	; 0x34
 800133a:	e004      	b.n	8001346 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800133c:	f002 fd66 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8001340:	4603      	mov	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <HAL_InitTick+0xec>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0c9b      	lsrs	r3, r3, #18
 8001350:	3b01      	subs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_InitTick+0xf0>)
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_InitTick+0xf4>)
 8001358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_InitTick+0xf0>)
 800135c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001360:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_InitTick+0xf0>)
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_InitTick+0xf0>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_InitTick+0xf0>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_InitTick+0xf0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <HAL_InitTick+0xf0>)
 800137c:	f003 fb44 	bl	8004a08 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <HAL_InitTick+0xf0>)
 8001390:	f003 fb92 	bl	8004ab8 <HAL_TIM_Base_Start_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800139a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d111      	bne.n	80013c6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013a2:	201e      	movs	r0, #30
 80013a4:	f001 fd87 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d808      	bhi.n	80013c0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013ae:	2200      	movs	r2, #0
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	201e      	movs	r0, #30
 80013b4:	f001 fd63 	bl	8002e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_InitTick+0xf8>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e002      	b.n	80013c6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	20000b70 	.word	0x20000b70
 80013e0:	40000800 	.word	0x40000800
 80013e4:	20000048 	.word	0x20000048

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ETH_INT_Pin);
 8001416:	2004      	movs	r0, #4
 8001418:	f002 f90c 	bl	8003634 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Channel4_IRQHandler+0x10>)
 8001426:	f001 fe63 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000c44 	.word	0x20000c44

08001434 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Channel5_IRQHandler+0x10>)
 800143a:	f001 fe59 	bl	80030f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000c00 	.word	0x20000c00

08001448 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800144e:	f001 fa3e 	bl	80028ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000130 	.word	0x20000130

0800145c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM4_IRQHandler+0x10>)
 8001462:	f003 fb7b 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000b70 	.word	0x20000b70

08001470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART1_IRQHandler+0x10>)
 8001476:	f003 fd61 	bl	8004f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000bb8 	.word	0x20000bb8

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_USART1_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART1_UART_Init+0x4c>)
 80014c8:	f003 fce8 	bl	8004e9c <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f7ff fa4b 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000bb8 	.word	0x20000bb8
 80014e0:	40013800 	.word	0x40013800

080014e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_UART_MspInit+0x138>)
 8001500:	4293      	cmp	r3, r2
 8001502:	f040 8086 	bne.w	8001612 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_UART_MspInit+0x13c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a45      	ldr	r2, [pc, #276]	; (8001620 <HAL_UART_MspInit+0x13c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_UART_MspInit+0x13c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <HAL_UART_MspInit+0x13c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_UART_MspInit+0x13c>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_UART_MspInit+0x13c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4836      	ldr	r0, [pc, #216]	; (8001624 <HAL_UART_MspInit+0x140>)
 800154c:	f001 fed6 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4619      	mov	r1, r3
 8001564:	482f      	ldr	r0, [pc, #188]	; (8001624 <HAL_UART_MspInit+0x140>)
 8001566:	f001 fec9 	bl	80032fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_UART_MspInit+0x144>)
 800156c:	4a2f      	ldr	r2, [pc, #188]	; (800162c <HAL_UART_MspInit+0x148>)
 800156e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_UART_MspInit+0x144>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_UART_MspInit+0x144>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HAL_UART_MspInit+0x144>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_UART_MspInit+0x144>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_UART_MspInit+0x144>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_UART_MspInit+0x144>)
 8001590:	2220      	movs	r2, #32
 8001592:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_UART_MspInit+0x144>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800159a:	4823      	ldr	r0, [pc, #140]	; (8001628 <HAL_UART_MspInit+0x144>)
 800159c:	f001 fc9a 	bl	8002ed4 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80015a6:	f7ff f9e1 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_UART_MspInit+0x144>)
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x144>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_UART_MspInit+0x150>)
 80015ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015be:	2210      	movs	r2, #16
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015e8:	f001 fc74 	bl	8002ed4 <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80015f2:	f7ff f9bb 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_UART_MspInit+0x14c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2025      	movs	r0, #37	; 0x25
 8001608:	f001 fc39 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800160c:	2025      	movs	r0, #37	; 0x25
 800160e:	f001 fc52 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40013800 	.word	0x40013800
 8001620:	40021000 	.word	0x40021000
 8001624:	40010800 	.word	0x40010800
 8001628:	20000c00 	.word	0x20000c00
 800162c:	40020058 	.word	0x40020058
 8001630:	20000c44 	.word	0x20000c44
 8001634:	40020044 	.word	0x40020044

08001638 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <WIZCHIP_READ+0x94>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <WIZCHIP_READ+0x94>)
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <WIZCHIP_READ+0x94>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <WIZCHIP_READ+0x24>
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <WIZCHIP_READ+0x94>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	2b00      	cmp	r3, #0
 800165a:	d114      	bne.n	8001686 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <WIZCHIP_READ+0x94>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	4610      	mov	r0, r2
 8001668:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <WIZCHIP_READ+0x94>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	0a12      	lsrs	r2, r2, #8
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	4610      	mov	r0, r2
 8001676:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <WIZCHIP_READ+0x94>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	4610      	mov	r0, r2
 8001682:	4798      	blx	r3
 8001684:	e011      	b.n	80016aa <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	b2db      	uxtb	r3, r3
 800168c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b2db      	uxtb	r3, r3
 8001694:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <WIZCHIP_READ+0x94>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f107 020c 	add.w	r2, r7, #12
 80016a4:	2103      	movs	r1, #3
 80016a6:	4610      	mov	r0, r2
 80016a8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <WIZCHIP_READ+0x94>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4798      	blx	r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <WIZCHIP_READ+0x94>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <WIZCHIP_READ+0x94>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4798      	blx	r3
   return ret;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000020 	.word	0x20000020

080016d0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <WIZCHIP_WRITE+0x98>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <WIZCHIP_WRITE+0x98>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <WIZCHIP_WRITE+0x98>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d119      	bne.n	800172c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <WIZCHIP_WRITE+0x98>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	0c12      	lsrs	r2, r2, #16
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	4610      	mov	r0, r2
 8001704:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <WIZCHIP_WRITE+0x98>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	0a12      	lsrs	r2, r2, #8
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	4610      	mov	r0, r2
 8001712:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <WIZCHIP_WRITE+0x98>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	4610      	mov	r0, r2
 800171e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <WIZCHIP_WRITE+0x98>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	4610      	mov	r0, r2
 8001728:	4798      	blx	r3
 800172a:	e013      	b.n	8001754 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	b2db      	uxtb	r3, r3
 8001732:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b2db      	uxtb	r3, r3
 800173a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <WIZCHIP_WRITE+0x98>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f107 020c 	add.w	r2, r7, #12
 800174e:	2104      	movs	r1, #4
 8001750:	4610      	mov	r0, r2
 8001752:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <WIZCHIP_WRITE+0x98>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <WIZCHIP_WRITE+0x98>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4798      	blx	r3
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000020 	.word	0x20000020

0800176c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <WIZCHIP_READ_BUF+0x2a>
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d126      	bne.n	80017e4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	0c12      	lsrs	r2, r2, #16
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	4610      	mov	r0, r2
 80017a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	0a12      	lsrs	r2, r2, #8
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	4610      	mov	r0, r2
 80017b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	4610      	mov	r0, r2
 80017bc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	82fb      	strh	r3, [r7, #22]
 80017c2:	e00a      	b.n	80017da <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	8afa      	ldrh	r2, [r7, #22]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	188c      	adds	r4, r1, r2
 80017ce:	4798      	blx	r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80017d4:	8afb      	ldrh	r3, [r7, #22]
 80017d6:	3301      	adds	r3, #1
 80017d8:	82fb      	strh	r3, [r7, #22]
 80017da:	8afa      	ldrh	r2, [r7, #22]
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3f0      	bcc.n	80017c4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017e2:	e017      	b.n	8001814 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f107 0210 	add.w	r2, r7, #16
 8001802:	2103      	movs	r1, #3
 8001804:	4610      	mov	r0, r2
 8001806:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	88fa      	ldrh	r2, [r7, #6]
 800180e:	4611      	mov	r1, r2
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800181a:	4b03      	ldr	r3, [pc, #12]	; (8001828 <WIZCHIP_READ_BUF+0xbc>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4798      	blx	r3
}
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	20000020 	.word	0x20000020

0800182c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	2b00      	cmp	r3, #0
 8001854:	d126      	bne.n	80018a4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	0c12      	lsrs	r2, r2, #16
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	4610      	mov	r0, r2
 8001862:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	0a12      	lsrs	r2, r2, #8
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	4610      	mov	r0, r2
 8001870:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	4610      	mov	r0, r2
 800187c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	82fb      	strh	r3, [r7, #22]
 8001882:	e00a      	b.n	800189a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	8afa      	ldrh	r2, [r7, #22]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	440a      	add	r2, r1
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	4610      	mov	r0, r2
 8001892:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	3301      	adds	r3, #1
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	8afa      	ldrh	r2, [r7, #22]
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3f0      	bcc.n	8001884 <WIZCHIP_WRITE_BUF+0x58>
 80018a2:	e017      	b.n	80018d4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f107 0210 	add.w	r2, r7, #16
 80018c2:	2103      	movs	r1, #3
 80018c4:	4610      	mov	r0, r2
 80018c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	4611      	mov	r1, r2
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80018da:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4798      	blx	r3
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000020 	.word	0x20000020

080018ec <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	81fb      	strh	r3, [r7, #14]
 80018fa:	2300      	movs	r3, #0
 80018fc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	3301      	adds	r3, #1
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe94 	bl	8001638 <WIZCHIP_READ>
 8001910:	4603      	mov	r3, r0
 8001912:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b29c      	uxth	r4, r3
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3301      	adds	r3, #1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe86 	bl	8001638 <WIZCHIP_READ>
 800192c:	4603      	mov	r3, r0
 800192e:	b29b      	uxth	r3, r3
 8001930:	4423      	add	r3, r4
 8001932:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01a      	beq.n	8001970 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	3301      	adds	r3, #1
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe76 	bl	8001638 <WIZCHIP_READ>
 800194c:	4603      	mov	r3, r0
 800194e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b29c      	uxth	r4, r3
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3301      	adds	r3, #1
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe68 	bl	8001638 <WIZCHIP_READ>
 8001968:	4603      	mov	r3, r0
 800196a:	b29b      	uxth	r3, r3
 800196c:	4423      	add	r3, r4
 800196e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001970:	89fa      	ldrh	r2, [r7, #14]
 8001972:	89bb      	ldrh	r3, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d1c2      	bne.n	80018fe <getSn_TX_FSR+0x12>
   return val;
 8001978:	89fb      	ldrh	r3, [r7, #14]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}

08001982 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800198c:	2300      	movs	r3, #0
 800198e:	81fb      	strh	r3, [r7, #14]
 8001990:	2300      	movs	r3, #0
 8001992:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3301      	adds	r3, #1
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe49 	bl	8001638 <WIZCHIP_READ>
 80019a6:	4603      	mov	r3, r0
 80019a8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80019aa:	89bb      	ldrh	r3, [r7, #12]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b29c      	uxth	r4, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe3b 	bl	8001638 <WIZCHIP_READ>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4423      	add	r3, r4
 80019c8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80019ca:	89bb      	ldrh	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01a      	beq.n	8001a06 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	3301      	adds	r3, #1
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe2b 	bl	8001638 <WIZCHIP_READ>
 80019e2:	4603      	mov	r3, r0
 80019e4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b29c      	uxth	r4, r3
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3301      	adds	r3, #1
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe1d 	bl	8001638 <WIZCHIP_READ>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4423      	add	r3, r4
 8001a04:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001a06:	89fa      	ldrh	r2, [r7, #14]
 8001a08:	89bb      	ldrh	r3, [r7, #12]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d1c2      	bne.n	8001994 <getSn_RX_RSR+0x12>
   return val;
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d048      	beq.n	8001ac8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fdf8 	bl	8001638 <WIZCHIP_READ>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b29c      	uxth	r4, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	3301      	adds	r3, #1
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fdeb 	bl	8001638 <WIZCHIP_READ>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4423      	add	r3, r4
 8001a68:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	3202      	adds	r2, #2
 8001a74:	00d2      	lsls	r2, r2, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	68b8      	ldr	r0, [r7, #8]
 8001a82:	f7ff fed3 	bl	800182c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001a86:	89fa      	ldrh	r2, [r7, #14]
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7ff fe12 	bl	80016d0 <WIZCHIP_WRITE>
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001ab8:	461a      	mov	r2, r3
 8001aba:	89fb      	ldrh	r3, [r7, #14]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff fe05 	bl	80016d0 <WIZCHIP_WRITE>
 8001ac6:	e000      	b.n	8001aca <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001ac8:	bf00      	nop
}
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d048      	beq.n	8001b80 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	3301      	adds	r3, #1
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fd9c 	bl	8001638 <WIZCHIP_READ>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b29c      	uxth	r4, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fd8f 	bl	8001638 <WIZCHIP_READ>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4423      	add	r3, r4
 8001b20:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	79fa      	ldrb	r2, [r7, #7]
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	3203      	adds	r2, #3
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	461a      	mov	r2, r3
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f7ff fe17 	bl	800176c <WIZCHIP_READ_BUF>
   ptr += len;
 8001b3e:	89fa      	ldrh	r2, [r7, #14]
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b52:	461a      	mov	r2, r3
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7ff fdb6 	bl	80016d0 <WIZCHIP_WRITE>
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	3301      	adds	r3, #1
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001b70:	461a      	mov	r2, r3
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f7ff fda9 	bl	80016d0 <WIZCHIP_WRITE>
 8001b7e:	e000      	b.n	8001b82 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001b80:	bf00      	nop
}
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
	...

08001c3c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <reg_wizchip_cs_cbfunc+0x16>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <reg_wizchip_cs_cbfunc+0x3c>)
 8001c54:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <reg_wizchip_cs_cbfunc+0x40>)
 8001c56:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <reg_wizchip_cs_cbfunc+0x3c>)
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <reg_wizchip_cs_cbfunc+0x44>)
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	e006      	b.n	8001c6e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <reg_wizchip_cs_cbfunc+0x3c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <reg_wizchip_cs_cbfunc+0x3c>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6153      	str	r3, [r2, #20]
   }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000020 	.word	0x20000020
 8001c7c:	08001ba1 	.word	0x08001ba1
 8001c80:	08001bad 	.word	0x08001bad

08001c84 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001c8e:	bf00      	nop
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f9      	beq.n	8001c90 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <reg_wizchip_spi_cbfunc+0x24>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <reg_wizchip_spi_cbfunc+0x50>)
 8001cac:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <reg_wizchip_spi_cbfunc+0x54>)
 8001cb2:	61da      	str	r2, [r3, #28]
 8001cb4:	e006      	b.n	8001cc4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	61d3      	str	r3, [r2, #28]
   }
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000020 	.word	0x20000020
 8001cd4:	08001bed 	.word	0x08001bed
 8001cd8:	08001bfb 	.word	0x08001bfb

08001cdc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001ce6:	bf00      	nop
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f9      	beq.n	8001ce8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <reg_wizchip_spiburst_cbfunc+0x24>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d106      	bne.n	8001d0e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <reg_wizchip_spiburst_cbfunc+0x50>)
 8001d04:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d0c:	e006      	b.n	8001d1c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001d0e:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	08001c0f 	.word	0x08001c0f
 8001d30:	08001c25 	.word	0x08001c25

08001d34 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2206      	movs	r2, #6
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001d44:	f7ff fd12 	bl	800176c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d54:	f7ff fd0a 	bl	800176c <WIZCHIP_READ_BUF>
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d64:	f7ff fd02 	bl	800176c <WIZCHIP_READ_BUF>
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d74:	f7ff fcfa 	bl	800176c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fca8 	bl	80016d0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff fc59 	bl	8001638 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2206      	movs	r2, #6
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001d90:	f7ff fd4c 	bl	800182c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001da0:	f7ff fd44 	bl	800182c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001db0:	f7ff fd3c 	bl	800182c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2204      	movs	r2, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001dc0:	f7ff fd34 	bl	800182c <WIZCHIP_WRITE_BUF>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001dda:	f7ff ffab 	bl	8001d34 <wizchip_sw_reset>
   if(txsize)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03b      	beq.n	8001e5c <wizchip_init+0x90>
   {
      tmp = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e015      	b.n	8001e1a <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8001e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	dd02      	ble.n	8001e0e <wizchip_init+0x42>
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	e066      	b.n	8001edc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	dde5      	ble.n	8001dee <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e015      	b.n	8001e54 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	3301      	adds	r3, #1
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001e36:	4618      	mov	r0, r3
 8001e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7ff fc44 	bl	80016d0 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	2b07      	cmp	r3, #7
 8001e5a:	dde5      	ble.n	8001e28 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03b      	beq.n	8001eda <wizchip_init+0x10e>
   {
      tmp = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e015      	b.n	8001e98 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8001e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8001e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	dd02      	ble.n	8001e8c <wizchip_init+0xc0>
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e027      	b.n	8001edc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	2b07      	cmp	r3, #7
 8001e9e:	dde5      	ble.n	8001e6c <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e015      	b.n	8001ed2 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	3301      	adds	r3, #1
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7ff fc05 	bl	80016d0 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	2b07      	cmp	r3, #7
 8001ed8:	dde5      	ble.n	8001ea6 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2206      	movs	r2, #6
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ef6:	f7ff fc99 	bl	800182c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	330e      	adds	r3, #14
 8001efe:	2204      	movs	r2, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f06:	f7ff fc91 	bl	800182c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	330a      	adds	r3, #10
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f16:	f7ff fc89 	bl	800182c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3306      	adds	r3, #6
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f26:	f7ff fc81 	bl	800182c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7c9a      	ldrb	r2, [r3, #18]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <wizchip_setnetinfo+0x78>)
 8001f30:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7cda      	ldrb	r2, [r3, #19]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <wizchip_setnetinfo+0x78>)
 8001f38:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7d1a      	ldrb	r2, [r3, #20]
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <wizchip_setnetinfo+0x78>)
 8001f40:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7d5a      	ldrb	r2, [r3, #21]
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <wizchip_setnetinfo+0x78>)
 8001f48:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7d9a      	ldrb	r2, [r3, #22]
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <wizchip_setnetinfo+0x7c>)
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000c88 	.word	0x20000c88
 8001f60:	20000c8c 	.word	0x20000c8c

08001f64 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2206      	movs	r2, #6
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f76:	f7ff fbf9 	bl	800176c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	330e      	adds	r3, #14
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f86:	f7ff fbf1 	bl	800176c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	330a      	adds	r3, #10
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f96:	f7ff fbe9 	bl	800176c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3306      	adds	r3, #6
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fa6:	f7ff fbe1 	bl	800176c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <wizchip_getnetinfo+0x78>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <wizchip_getnetinfo+0x78>)
 8001fb4:	785a      	ldrb	r2, [r3, #1]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <wizchip_getnetinfo+0x78>)
 8001fbc:	789a      	ldrb	r2, [r3, #2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <wizchip_getnetinfo+0x78>)
 8001fc4:	78da      	ldrb	r2, [r3, #3]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <wizchip_getnetinfo+0x7c>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	759a      	strb	r2, [r3, #22]
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000c88 	.word	0x20000c88
 8001fe0:	20000c8c 	.word	0x20000c8c

08001fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	; (8002028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800200a:	f7ff fa3b 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f006 f963 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002012:	f7fe fc1f 	bl	8000854 <main>
  bx lr
 8002016:	4770      	bx	lr
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002020:	080084e4 	.word	0x080084e4
  ldr r2, =_sbss
 8002024:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002028:	200027b4 	.word	0x200027b4

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_Init+0x28>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x28>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 ff11 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff f950 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff f916 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x1c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x20>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_IncTick+0x20>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	2000004c 	.word	0x2000004c
 800207c:	20000c90 	.word	0x20000c90

08002080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <HAL_GetTick+0x10>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	20000c90 	.word	0x20000c90

08002094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0ed      	b.n	8002282 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe f8b4 	bl	8000220 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7ff ffda 	bl	8002080 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ce:	e012      	b.n	80020f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d0:	f7ff ffd6 	bl	8002080 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d90b      	bls.n	80020f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0c5      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0e5      	beq.n	80020d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0202 	bic.w	r2, r2, #2
 8002112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7ff ffb4 	bl	8002080 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7ff ffb0 	bl	8002080 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e09f      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e5b      	ldrb	r3, [r3, #25]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e9b      	ldrb	r3, [r3, #26]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0220 	bic.w	r2, r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7edb      	ldrb	r3, [r3, #27]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7f1b      	ldrb	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7f5b      	ldrb	r3, [r3, #29]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0204 	orr.w	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_ConfigFilter+0x26>
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	f040 80aa 	bne.w	8002404 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d123      	bne.n	8002332 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	401a      	ands	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800230c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3248      	adds	r2, #72	; 0x48
 8002312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002326:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	3348      	adds	r3, #72	; 0x48
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d122      	bne.n	8002380 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800235a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3248      	adds	r2, #72	; 0x48
 8002360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800239a:	e007      	b.n	80023ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023c6:	e007      	b.n	80023d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e006      	b.n	8002412 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d12e      	bne.n	800248e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff fe1a 	bl	8002080 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800244e:	e012      	b.n	8002476 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002450:	f7ff fe16 	bl	8002080 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d90b      	bls.n	8002476 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2205      	movs	r2, #5
 800246e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e012      	b.n	800249c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e5      	bne.n	8002450 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e006      	b.n	800249c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
  }
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <HAL_CAN_AddTxMessage+0x2c>
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f040 80ad 	bne.w	800262a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8095 	beq.w	800261a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	0e1b      	lsrs	r3, r3, #24
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	6809      	ldr	r1, [r1, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3318      	adds	r3, #24
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00f      	b.n	8002548 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002532:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800253c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3318      	adds	r3, #24
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	440b      	add	r3, r1
 8002546:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	3304      	adds	r3, #4
 800255a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	7d1b      	ldrb	r3, [r3, #20]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d111      	bne.n	8002588 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3318      	adds	r3, #24
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	440b      	add	r3, r1
 8002584:	3304      	adds	r3, #4
 8002586:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3307      	adds	r3, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	061a      	lsls	r2, r3, #24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3306      	adds	r3, #6
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3305      	adds	r3, #5
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4313      	orrs	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3204      	adds	r2, #4
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	4610      	mov	r0, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	ea43 0200 	orr.w	r2, r3, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3303      	adds	r3, #3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	061a      	lsls	r2, r3, #24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3302      	adds	r3, #2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3301      	adds	r3, #1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4313      	orrs	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	4610      	mov	r0, r2
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	ea43 0200 	orr.w	r2, r3, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3318      	adds	r3, #24
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6811      	ldr	r1, [r2, #0]
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3318      	adds	r3, #24
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	440b      	add	r3, r1
 8002614:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e00e      	b.n	8002638 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e006      	b.n	8002638 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3724      	adds	r7, #36	; 0x24
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002642:	b480      	push	{r7}
 8002644:	b087      	sub	sp, #28
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d003      	beq.n	8002666 <HAL_CAN_GetRxMessage+0x24>
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 8103 	bne.w	800286c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0f7      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0e8      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	331b      	adds	r3, #27
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0204 	and.w	r2, r3, #4
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	331b      	adds	r3, #27
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	331b      	adds	r3, #27
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0202 	and.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	331b      	adds	r3, #27
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2208      	movs	r2, #8
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	e00b      	b.n	8002746 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	331b      	adds	r3, #27
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	331b      	adds	r3, #27
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b2da      	uxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	331b      	adds	r3, #27
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	4413      	add	r3, r2
 8002796:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0a1a      	lsrs	r2, r3, #8
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0c1a      	lsrs	r2, r3, #16
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3302      	adds	r3, #2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e1a      	lsrs	r2, r3, #24
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3303      	adds	r3, #3
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3304      	adds	r3, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0a1a      	lsrs	r2, r3, #8
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3305      	adds	r3, #5
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4413      	add	r3, r2
 8002816:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0c1a      	lsrs	r2, r3, #16
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3306      	adds	r3, #6
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e1a      	lsrs	r2, r3, #24
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	3307      	adds	r3, #7
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	e007      	b.n	8002868 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e006      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <HAL_CAN_ActivateNotification+0x1e>
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d109      	bne.n	80028b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e006      	b.n	80028c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08a      	sub	sp, #40	; 0x28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d07c      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d023      	beq.n	8002966 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f983 	bl	8002c3c <HAL_CAN_TxMailbox0CompleteCallback>
 8002936:	e016      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e00c      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e002      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f986 	bl	8002c72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d024      	beq.n	80029ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002978:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f962 	bl	8002c4e <HAL_CAN_TxMailbox1CompleteCallback>
 800298a:	e016      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e00c      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e002      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f965 	bl	8002c84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d024      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f941 	bl	8002c60 <HAL_CAN_TxMailbox2CompleteCallback>
 80029de:	e016      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
 80029f2:	e00c      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e002      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f944 	bl	8002c96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f92a 	bl	8002ca8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7fd ff4d 	bl	800090c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2210      	movs	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f90a 	bl	8002ccc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8f2 	bl	8002cba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8f3 	bl	8002cde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8eb 	bl	8002cf0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07b      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d072      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03e      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d02b      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x32a>
 8002ba0:	2b60      	cmp	r3, #96	; 0x60
 8002ba2:	d82e      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002ba4:	2b50      	cmp	r3, #80	; 0x50
 8002ba6:	d022      	beq.n	8002bee <HAL_CAN_IRQHandler+0x320>
 8002ba8:	2b50      	cmp	r3, #80	; 0x50
 8002baa:	d82a      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d019      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x316>
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d826      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bb4:	2b30      	cmp	r3, #48	; 0x30
 8002bb6:	d010      	beq.n	8002bda <HAL_CAN_IRQHandler+0x30c>
 8002bb8:	2b30      	cmp	r3, #48	; 0x30
 8002bba:	d822      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d002      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x2f8>
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d005      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bc4:	e01d      	b.n	8002c02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bce:	e019      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd8:	e014      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f043 0320 	orr.w	r3, r3, #32
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be2:	e00f      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bec:	e00a      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bf6:	e005      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c00:	e000      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f867 	bl	8002d02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4906      	ldr	r1, [pc, #24]	; (8002dac <__NVIC_EnableIRQ+0x34>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	; (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff4f 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff64 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ffb2 	bl	8002e04 <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff81 	bl	8002db0 <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff57 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e043      	b.n	8002f72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_DMA_Init+0xa8>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a22      	ldr	r2, [pc, #136]	; (8002f80 <HAL_DMA_Init+0xac>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	009a      	lsls	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_DMA_Init+0xb0>)
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	bffdfff8 	.word	0xbffdfff8
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	40020000 	.word	0x40020000

08002f88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e020      	b.n	8002ff4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 020e 	bic.w	r2, r2, #14
 8002fc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d005      	beq.n	8003024 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2204      	movs	r2, #4
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e051      	b.n	80030c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 020e 	bic.w	r2, r2, #14
 8003032:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <HAL_DMA_Abort_IT+0xd4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d029      	beq.n	80030a2 <HAL_DMA_Abort_IT+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_DMA_Abort_IT+0xd8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_Abort_IT+0x9e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_DMA_Abort_IT+0xdc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01a      	beq.n	8003098 <HAL_DMA_Abort_IT+0x98>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_DMA_Abort_IT+0xe0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d012      	beq.n	8003092 <HAL_DMA_Abort_IT+0x92>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_DMA_Abort_IT+0xe4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00a      	beq.n	800308c <HAL_DMA_Abort_IT+0x8c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_DMA_Abort_IT+0xe8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <HAL_DMA_Abort_IT+0x86>
 8003080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003084:	e00e      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 8003086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308a:	e00b      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	e008      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 8003092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003096:	e005      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 8003098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309c:	e002      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 800309e:	2310      	movs	r3, #16
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_Abort_IT+0xa4>
 80030a2:	2301      	movs	r3, #1
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <HAL_DMA_Abort_IT+0xec>)
 80030a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
    } 
  }
  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020008 	.word	0x40020008
 80030d8:	4002001c 	.word	0x4002001c
 80030dc:	40020030 	.word	0x40020030
 80030e0:	40020044 	.word	0x40020044
 80030e4:	40020058 	.word	0x40020058
 80030e8:	4002006c 	.word	0x4002006c
 80030ec:	40020000 	.word	0x40020000

080030f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2204      	movs	r2, #4
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d04f      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xc8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04a      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a66      	ldr	r2, [pc, #408]	; (80032e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d029      	beq.n	800319e <HAL_DMA_IRQHandler+0xae>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <HAL_DMA_IRQHandler+0xaa>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a63      	ldr	r2, [pc, #396]	; (80032e8 <HAL_DMA_IRQHandler+0x1f8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01a      	beq.n	8003194 <HAL_DMA_IRQHandler+0xa4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a62      	ldr	r2, [pc, #392]	; (80032ec <HAL_DMA_IRQHandler+0x1fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d012      	beq.n	800318e <HAL_DMA_IRQHandler+0x9e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a60      	ldr	r2, [pc, #384]	; (80032f0 <HAL_DMA_IRQHandler+0x200>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00a      	beq.n	8003188 <HAL_DMA_IRQHandler+0x98>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_DMA_IRQHandler+0x204>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_DMA_IRQHandler+0x92>
 800317c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003180:	e00e      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 8003182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003186:	e00b      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 8003188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800318c:	e008      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 800318e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003192:	e005      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	e002      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 800319a:	2340      	movs	r3, #64	; 0x40
 800319c:	e000      	b.n	80031a0 <HAL_DMA_IRQHandler+0xb0>
 800319e:	2304      	movs	r3, #4
 80031a0:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <HAL_DMA_IRQHandler+0x208>)
 80031a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8094 	beq.w	80032d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	e08e      	b.n	80032d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2202      	movs	r2, #2
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d056      	beq.n	8003276 <HAL_DMA_IRQHandler+0x186>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d051      	beq.n	8003276 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020a 	bic.w	r2, r2, #10
 80031ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <HAL_DMA_IRQHandler+0x1f0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d029      	beq.n	8003256 <HAL_DMA_IRQHandler+0x166>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a37      	ldr	r2, [pc, #220]	; (80032e4 <HAL_DMA_IRQHandler+0x1f4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <HAL_DMA_IRQHandler+0x162>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <HAL_DMA_IRQHandler+0x1f8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01a      	beq.n	800324c <HAL_DMA_IRQHandler+0x15c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <HAL_DMA_IRQHandler+0x1fc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d012      	beq.n	8003246 <HAL_DMA_IRQHandler+0x156>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a32      	ldr	r2, [pc, #200]	; (80032f0 <HAL_DMA_IRQHandler+0x200>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00a      	beq.n	8003240 <HAL_DMA_IRQHandler+0x150>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <HAL_DMA_IRQHandler+0x204>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d102      	bne.n	800323a <HAL_DMA_IRQHandler+0x14a>
 8003234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003238:	e00e      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 800323a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323e:	e00b      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 8003240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003244:	e008      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 8003246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800324a:	e005      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 800324c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003250:	e002      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 8003252:	2320      	movs	r3, #32
 8003254:	e000      	b.n	8003258 <HAL_DMA_IRQHandler+0x168>
 8003256:	2302      	movs	r3, #2
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_DMA_IRQHandler+0x208>)
 800325a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d034      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003274:	e02f      	b.n	80032d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2208      	movs	r2, #8
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d028      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x1e8>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d023      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020e 	bic.w	r2, r2, #14
 800329e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
    }
  }
  return;
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
}
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40020008 	.word	0x40020008
 80032e4:	4002001c 	.word	0x4002001c
 80032e8:	40020030 	.word	0x40020030
 80032ec:	40020044 	.word	0x40020044
 80032f0:	40020058 	.word	0x40020058
 80032f4:	4002006c 	.word	0x4002006c
 80032f8:	40020000 	.word	0x40020000

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b08b      	sub	sp, #44	; 0x2c
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330e:	e169      	b.n	80035e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003310:	2201      	movs	r2, #1
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	429a      	cmp	r2, r3
 800332a:	f040 8158 	bne.w	80035de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a9a      	ldr	r2, [pc, #616]	; (800359c <HAL_GPIO_Init+0x2a0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d05e      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
 8003338:	4a98      	ldr	r2, [pc, #608]	; (800359c <HAL_GPIO_Init+0x2a0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d875      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 800333e:	4a98      	ldr	r2, [pc, #608]	; (80035a0 <HAL_GPIO_Init+0x2a4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d058      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
 8003344:	4a96      	ldr	r2, [pc, #600]	; (80035a0 <HAL_GPIO_Init+0x2a4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d86f      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 800334a:	4a96      	ldr	r2, [pc, #600]	; (80035a4 <HAL_GPIO_Init+0x2a8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d052      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
 8003350:	4a94      	ldr	r2, [pc, #592]	; (80035a4 <HAL_GPIO_Init+0x2a8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d869      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 8003356:	4a94      	ldr	r2, [pc, #592]	; (80035a8 <HAL_GPIO_Init+0x2ac>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d04c      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
 800335c:	4a92      	ldr	r2, [pc, #584]	; (80035a8 <HAL_GPIO_Init+0x2ac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d863      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 8003362:	4a92      	ldr	r2, [pc, #584]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d046      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
 8003368:	4a90      	ldr	r2, [pc, #576]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d85d      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 800336e:	2b12      	cmp	r3, #18
 8003370:	d82a      	bhi.n	80033c8 <HAL_GPIO_Init+0xcc>
 8003372:	2b12      	cmp	r3, #18
 8003374:	d859      	bhi.n	800342a <HAL_GPIO_Init+0x12e>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <HAL_GPIO_Init+0x80>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	080033f7 	.word	0x080033f7
 8003380:	080033d1 	.word	0x080033d1
 8003384:	080033e3 	.word	0x080033e3
 8003388:	08003425 	.word	0x08003425
 800338c:	0800342b 	.word	0x0800342b
 8003390:	0800342b 	.word	0x0800342b
 8003394:	0800342b 	.word	0x0800342b
 8003398:	0800342b 	.word	0x0800342b
 800339c:	0800342b 	.word	0x0800342b
 80033a0:	0800342b 	.word	0x0800342b
 80033a4:	0800342b 	.word	0x0800342b
 80033a8:	0800342b 	.word	0x0800342b
 80033ac:	0800342b 	.word	0x0800342b
 80033b0:	0800342b 	.word	0x0800342b
 80033b4:	0800342b 	.word	0x0800342b
 80033b8:	0800342b 	.word	0x0800342b
 80033bc:	0800342b 	.word	0x0800342b
 80033c0:	080033d9 	.word	0x080033d9
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	4a79      	ldr	r2, [pc, #484]	; (80035b0 <HAL_GPIO_Init+0x2b4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ce:	e02c      	b.n	800342a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	623b      	str	r3, [r7, #32]
          break;
 80033d6:	e029      	b.n	800342c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	3304      	adds	r3, #4
 80033de:	623b      	str	r3, [r7, #32]
          break;
 80033e0:	e024      	b.n	800342c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	3308      	adds	r3, #8
 80033e8:	623b      	str	r3, [r7, #32]
          break;
 80033ea:	e01f      	b.n	800342c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	330c      	adds	r3, #12
 80033f2:	623b      	str	r3, [r7, #32]
          break;
 80033f4:	e01a      	b.n	800342c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033fe:	2304      	movs	r3, #4
 8003400:	623b      	str	r3, [r7, #32]
          break;
 8003402:	e013      	b.n	800342c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800340c:	2308      	movs	r3, #8
 800340e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	611a      	str	r2, [r3, #16]
          break;
 8003416:	e009      	b.n	800342c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003418:	2308      	movs	r3, #8
 800341a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	615a      	str	r2, [r3, #20]
          break;
 8003422:	e003      	b.n	800342c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
          break;
 8003428:	e000      	b.n	800342c <HAL_GPIO_Init+0x130>
          break;
 800342a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2bff      	cmp	r3, #255	; 0xff
 8003430:	d801      	bhi.n	8003436 <HAL_GPIO_Init+0x13a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	e001      	b.n	800343a <HAL_GPIO_Init+0x13e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	d802      	bhi.n	8003448 <HAL_GPIO_Init+0x14c>
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	e002      	b.n	800344e <HAL_GPIO_Init+0x152>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3b08      	subs	r3, #8
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	210f      	movs	r1, #15
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	431a      	orrs	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80b1 	beq.w	80035de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800347c:	4b4d      	ldr	r3, [pc, #308]	; (80035b4 <HAL_GPIO_Init+0x2b8>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a4c      	ldr	r2, [pc, #304]	; (80035b4 <HAL_GPIO_Init+0x2b8>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_GPIO_Init+0x2b8>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_GPIO_Init+0x2bc>)
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a40      	ldr	r2, [pc, #256]	; (80035bc <HAL_GPIO_Init+0x2c0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d013      	beq.n	80034e8 <HAL_GPIO_Init+0x1ec>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3f      	ldr	r2, [pc, #252]	; (80035c0 <HAL_GPIO_Init+0x2c4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00d      	beq.n	80034e4 <HAL_GPIO_Init+0x1e8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3e      	ldr	r2, [pc, #248]	; (80035c4 <HAL_GPIO_Init+0x2c8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <HAL_GPIO_Init+0x1e4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <HAL_GPIO_Init+0x2cc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_GPIO_Init+0x1e0>
 80034d8:	2303      	movs	r3, #3
 80034da:	e006      	b.n	80034ea <HAL_GPIO_Init+0x1ee>
 80034dc:	2304      	movs	r3, #4
 80034de:	e004      	b.n	80034ea <HAL_GPIO_Init+0x1ee>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e002      	b.n	80034ea <HAL_GPIO_Init+0x1ee>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_GPIO_Init+0x1ee>
 80034e8:	2300      	movs	r3, #0
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	4093      	lsls	r3, r2
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034fa:	492f      	ldr	r1, [pc, #188]	; (80035b8 <HAL_GPIO_Init+0x2bc>)
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	492c      	ldr	r1, [pc, #176]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	43db      	mvns	r3, r3
 800352a:	4928      	ldr	r1, [pc, #160]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800352c:	4013      	ands	r3, r2
 800352e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4922      	ldr	r1, [pc, #136]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	43db      	mvns	r3, r3
 8003552:	491e      	ldr	r1, [pc, #120]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003554:	4013      	ands	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4918      	ldr	r1, [pc, #96]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	43db      	mvns	r3, r3
 800357a:	4914      	ldr	r1, [pc, #80]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800357c:	4013      	ands	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d021      	beq.n	80035d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_GPIO_Init+0x2d0>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e021      	b.n	80035de <HAL_GPIO_Init+0x2e2>
 800359a:	bf00      	nop
 800359c:	10320000 	.word	0x10320000
 80035a0:	10310000 	.word	0x10310000
 80035a4:	10220000 	.word	0x10220000
 80035a8:	10210000 	.word	0x10210000
 80035ac:	10120000 	.word	0x10120000
 80035b0:	10110000 	.word	0x10110000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010800 	.word	0x40010800
 80035c0:	40010c00 	.word	0x40010c00
 80035c4:	40011000 	.word	0x40011000
 80035c8:	40011400 	.word	0x40011400
 80035cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_GPIO_Init+0x304>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4909      	ldr	r1, [pc, #36]	; (8003600 <HAL_GPIO_Init+0x304>)
 80035da:	4013      	ands	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	3301      	adds	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f47f ae8e 	bne.w	8003310 <HAL_GPIO_Init+0x14>
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	372c      	adds	r7, #44	; 0x2c
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364a:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f806 	bl	8003664 <HAL_GPIO_EXTI_Callback>
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e272      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003698:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d00c      	beq.n	80036be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a4:	4b8f      	ldr	r3, [pc, #572]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d112      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d10b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x12c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e24c      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x76>
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7f      	ldr	r2, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e02e      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x98>
 80036f6:	4b7b      	ldr	r3, [pc, #492]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7a      	ldr	r2, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b78      	ldr	r3, [pc, #480]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a77      	ldr	r2, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0xbc>
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a71      	ldr	r2, [pc, #452]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6e      	ldr	r2, [pc, #440]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003734:	4b6b      	ldr	r3, [pc, #428]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe fc94 	bl	8002080 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe fc90 	bl	8002080 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e200      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xe4>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fc80 	bl	8002080 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fc7c 	bl	8002080 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e1ec      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x10c>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d063      	beq.n	800387a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11c      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1c0      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4939      	ldr	r1, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	e03a      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fc35 	bl	8002080 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe fc31 	bl	8002080 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1a1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4927      	ldr	r1, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe fc14 	bl	8002080 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fe fc10 	bl	8002080 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e180      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03a      	beq.n	80038fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7fe fbf4 	bl	8002080 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe fbf0 	bl	8002080 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e160      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f000 fafe 	bl	8003ebc <RCC_Delay>
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe fbda 	bl	8002080 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe fbd6 	bl	8002080 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d908      	bls.n	80038f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e146      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	42420000 	.word	0x42420000
 80038ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e9      	bne.n	80038d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a6 	beq.w	8003a56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	61d3      	str	r3, [r2, #28]
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b7f      	ldr	r3, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fe fb97 	bl	8002080 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fe fb93 	bl	8002080 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e103      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x312>
 800397c:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	e02d      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x334>
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	e01c      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x356>
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a60      	ldr	r2, [pc, #384]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a5d      	ldr	r2, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ce:	4b5b      	ldr	r3, [pc, #364]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fe fb47 	bl	8002080 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe fb43 	bl	8002080 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0b1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCC_OscConfig+0x37e>
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe fb31 	bl	8002080 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fe fb2d 	bl	8002080 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e09b      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ee      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d061      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d146      	bne.n	8003b02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fe fb01 	bl	8002080 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fe fafd 	bl	8002080 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e06d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d108      	bne.n	8003abc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a19      	ldr	r1, [r3, #32]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	430b      	orrs	r3, r1
 8003ace:	491b      	ldr	r1, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe fad1 	bl	8002080 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe facd 	bl	8002080 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x46a>
 8003b00:	e035      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe faba 	bl	8002080 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe fab6 	bl	8002080 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e026      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x498>
 8003b2e:	e01e      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e019      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x500>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d0      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4965      	ldr	r1, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d040      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e073      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06b      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4936      	ldr	r1, [pc, #216]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fa08 	bl	8002080 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fe fa04 	bl	8002080 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e053      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d210      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0207 	bic.w	r2, r3, #7
 8003cb2:	4922      	ldr	r1, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1cc>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fade 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
 8003d44:	080084b0 	.word	0x080084b0
 8003d48:	2000001c 	.word	0x2000001c
 8003d4c:	20000048 	.word	0x20000048

08003d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x30>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x36>
 8003d7e:	e027      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d82:	613b      	str	r3, [r7, #16]
      break;
 8003d84:	e027      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0c9b      	lsrs	r3, r3, #18
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0c5b      	lsrs	r3, r3, #17
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db2:	fb03 f202 	mul.w	r2, r3, r2
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e004      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	613b      	str	r3, [r7, #16]
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd2:	613b      	str	r3, [r7, #16]
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	693b      	ldr	r3, [r7, #16]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	080084c8 	.word	0x080084c8
 8003df0:	080084d8 	.word	0x080084d8
 8003df4:	003d0900 	.word	0x003d0900

08003df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	2000001c 	.word	0x2000001c

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff2 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	080084c0 	.word	0x080084c0

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e38:	f7ff ffde 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0adb      	lsrs	r3, r3, #11
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	080084c0 	.word	0x080084c0

08003e5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	220f      	movs	r2, #15
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_RCC_GetClockConfig+0x58>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <HAL_RCC_GetClockConfig+0x58>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_GetClockConfig+0x58>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_GetClockConfig+0x58>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0207 	and.w	r2, r3, #7
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40022000 	.word	0x40022000

08003ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <RCC_Delay+0x34>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <RCC_Delay+0x38>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0a5b      	lsrs	r3, r3, #9
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ed8:	bf00      	nop
  }
  while (Delay --);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	60fa      	str	r2, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f9      	bne.n	8003ed8 <RCC_Delay+0x1c>
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	2000001c 	.word	0x2000001c
 8003ef4:	10624dd3 	.word	0x10624dd3

08003ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e076      	b.n	8003ff8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1a:	d009      	beq.n	8003f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61da      	str	r2, [r3, #28]
 8003f22:	e005      	b.n	8003f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd f94c 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	ea42 0103 	orr.w	r1, r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	0c1a      	lsrs	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f002 0204 	and.w	r2, r2, #4
 8003fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Transmit+0x22>
 800401e:	2302      	movs	r3, #2
 8004020:	e12d      	b.n	800427e <HAL_SPI_Transmit+0x27e>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800402a:	f7fe f829 	bl	8002080 <HAL_GetTick>
 800402e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004040:	2302      	movs	r3, #2
 8004042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004044:	e116      	b.n	8004274 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_Transmit+0x52>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004056:	e10d      	b.n	8004274 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2203      	movs	r2, #3
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409e:	d10f      	bne.n	80040c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d007      	beq.n	80040de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	d14f      	bne.n	8004188 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_SPI_Transmit+0xf6>
 80040f0:	8afb      	ldrh	r3, [r7, #22]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d142      	bne.n	800417c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800411a:	e02f      	b.n	800417c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d112      	bne.n	8004150 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	881a      	ldrh	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	1c9a      	adds	r2, r3, #2
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	86da      	strh	r2, [r3, #54]	; 0x36
 800414e:	e015      	b.n	800417c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004150:	f7fd ff96 	bl	8002080 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d803      	bhi.n	8004168 <HAL_SPI_Transmit+0x168>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d102      	bne.n	800416e <HAL_SPI_Transmit+0x16e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800417a:	e07b      	b.n	8004274 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ca      	bne.n	800411c <HAL_SPI_Transmit+0x11c>
 8004186:	e050      	b.n	800422a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_SPI_Transmit+0x196>
 8004190:	8afb      	ldrh	r3, [r7, #22]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d144      	bne.n	8004220 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041bc:	e030      	b.n	8004220 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d113      	bne.n	80041f4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80041f2:	e015      	b.n	8004220 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f4:	f7fd ff44 	bl	8002080 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d803      	bhi.n	800420c <HAL_SPI_Transmit+0x20c>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d102      	bne.n	8004212 <HAL_SPI_Transmit+0x212>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800421e:	e029      	b.n	8004274 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1c9      	bne.n	80041be <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fbcc 	bl	80049cc <SPI_EndRxTxTransaction>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004248:	2300      	movs	r3, #0
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e003      	b.n	8004274 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800427c:	7ffb      	ldrb	r3, [r7, #31]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b088      	sub	sp, #32
 800428a:	af02      	add	r7, sp, #8
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042aa:	e0fb      	b.n	80044a4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b4:	d112      	bne.n	80042dc <HAL_SPI_Receive+0x56>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10e      	bne.n	80042dc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2204      	movs	r2, #4
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8ef 	bl	80044b6 <HAL_SPI_TransmitReceive>
 80042d8:	4603      	mov	r3, r0
 80042da:	e0e8      	b.n	80044ae <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Receive+0x64>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e0e1      	b.n	80044ae <HAL_SPI_Receive+0x228>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f2:	f7fd fec5 	bl	8002080 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_Receive+0x7e>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004308:	e0cc      	b.n	80044a4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2204      	movs	r2, #4
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	d10f      	bne.n	8004372 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004360:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d007      	beq.n	8004390 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d16a      	bne.n	800446e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004398:	e032      	b.n	8004400 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d115      	bne.n	80043d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f103 020c 	add.w	r2, r3, #12
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	7812      	ldrb	r2, [r2, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d2:	e015      	b.n	8004400 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d4:	f7fd fe54 	bl	8002080 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d803      	bhi.n	80043ec <HAL_SPI_Receive+0x166>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d102      	bne.n	80043f2 <HAL_SPI_Receive+0x16c>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043fe:	e051      	b.n	80044a4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1c7      	bne.n	800439a <HAL_SPI_Receive+0x114>
 800440a:	e035      	b.n	8004478 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d113      	bne.n	8004442 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	b292      	uxth	r2, r2
 8004426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004440:	e015      	b.n	800446e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004442:	f7fd fe1d 	bl	8002080 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d803      	bhi.n	800445a <HAL_SPI_Receive+0x1d4>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d102      	bne.n	8004460 <HAL_SPI_Receive+0x1da>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800446c:	e01a      	b.n	80044a4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1c9      	bne.n	800440c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	6839      	ldr	r1, [r7, #0]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa53 	bl	8004928 <SPI_EndRxTransaction>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
 800449a:	e003      	b.n	80044a4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b08c      	sub	sp, #48	; 0x30
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044c4:	2301      	movs	r3, #1
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x26>
 80044d8:	2302      	movs	r3, #2
 80044da:	e198      	b.n	800480e <HAL_SPI_TransmitReceive+0x358>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e4:	f7fd fdcc 	bl	8002080 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004502:	2b01      	cmp	r3, #1
 8004504:	d00f      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x70>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450c:	d107      	bne.n	800451e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_SPI_TransmitReceive+0x68>
 8004516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004524:	e16d      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x82>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x82>
 8004532:	887b      	ldrh	r3, [r7, #2]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800453e:	e160      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b04      	cmp	r3, #4
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2205      	movs	r2, #5
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	887a      	ldrh	r2, [r7, #2]
 8004576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d007      	beq.n	80045a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	d17c      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_TransmitReceive+0x10a>
 80045ba:	8b7b      	ldrh	r3, [r7, #26]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d16a      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045e4:	e057      	b.n	8004696 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d11b      	bne.n	800462c <HAL_SPI_TransmitReceive+0x176>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_SPI_TransmitReceive+0x176>
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d113      	bne.n	800462c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	881a      	ldrh	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	1c9a      	adds	r2, r3, #2
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d119      	bne.n	800466e <HAL_SPI_TransmitReceive+0x1b8>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d014      	beq.n	800466e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	b292      	uxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800466a:	2301      	movs	r3, #1
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800466e:	f7fd fd07 	bl	8002080 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467a:	429a      	cmp	r2, r3
 800467c:	d80b      	bhi.n	8004696 <HAL_SPI_TransmitReceive+0x1e0>
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d007      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004694:	e0b5      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1a2      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x130>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d19d      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x130>
 80046aa:	e080      	b.n	80047ae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_SPI_TransmitReceive+0x204>
 80046b4:	8b7b      	ldrh	r3, [r7, #26]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d16f      	bne.n	800479a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e0:	e05b      	b.n	800479a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d11c      	bne.n	800472a <HAL_SPI_TransmitReceive+0x274>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <HAL_SPI_TransmitReceive+0x274>
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d114      	bne.n	800472a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	7812      	ldrb	r2, [r2, #0]
 800470c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d119      	bne.n	800476c <HAL_SPI_TransmitReceive+0x2b6>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004768:	2301      	movs	r3, #1
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800476c:	f7fd fc88 	bl	8002080 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004778:	429a      	cmp	r2, r3
 800477a:	d803      	bhi.n	8004784 <HAL_SPI_TransmitReceive+0x2ce>
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d102      	bne.n	800478a <HAL_SPI_TransmitReceive+0x2d4>
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004798:	e033      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d19e      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x22c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d199      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f90a 	bl	80049cc <SPI_EndRxTxTransaction>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047ca:	e01a      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f8:	e003      	b.n	8004802 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800480a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800480e:	4618      	mov	r0, r3
 8004810:	3730      	adds	r7, #48	; 0x30
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004828:	f7fd fc2a 	bl	8002080 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004838:	f7fd fc22 	bl	8002080 <HAL_GetTick>
 800483c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800483e:	4b39      	ldr	r3, [pc, #228]	; (8004924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	015b      	lsls	r3, r3, #5
 8004844:	0d1b      	lsrs	r3, r3, #20
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	e054      	b.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d050      	beq.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004858:	f7fd fc12 	bl	8002080 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	429a      	cmp	r2, r3
 8004866:	d902      	bls.n	800486e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d13d      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800487c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d111      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004890:	d004      	beq.n	800489c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489a:	d107      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d10f      	bne.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e017      	b.n	800491a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d19b      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	2000001c 	.word	0x2000001c

08004928 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493c:	d111      	bne.n	8004962 <SPI_EndRxTransaction+0x3a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004946:	d004      	beq.n	8004952 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d107      	bne.n	8004962 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496a:	d117      	bne.n	800499c <SPI_EndRxTransaction+0x74>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004974:	d112      	bne.n	800499c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	2101      	movs	r1, #1
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff49 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01a      	beq.n	80049c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e013      	b.n	80049c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff36 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e000      	b.n	80049c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff18 	bl	8004818 <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e000      	b.n	8004a00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e041      	b.n	8004a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f839 	bl	8004aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f000 f9b4 	bl	8004db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d001      	beq.n	8004ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e03a      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <HAL_TIM_Base_Start_IT+0x98>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00e      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x58>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d009      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x58>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x58>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d010      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	e007      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8ed 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8e0 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8ef 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0204 	mvn.w	r2, #4
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8c3 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8b6 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8c5 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f899 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f88c 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f89b 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f86f 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f862 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f871 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fb fe34 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8bf 	bl	8004e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f835 	bl	8004da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88a 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <TIM_Base_SetConfig+0xb8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd2:	d007      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <TIM_Base_SetConfig+0xbc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <TIM_Base_SetConfig+0xc0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <TIM_Base_SetConfig+0xb8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <TIM_Base_SetConfig+0xbc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <TIM_Base_SetConfig+0xc0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <TIM_Base_SetConfig+0xb8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d103      	bne.n	8004e5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	615a      	str	r2, [r3, #20]
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e042      	b.n	8004f34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc fb0e 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	; 0x24
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fc7f 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0ba      	sub	sp, #232	; 0xe8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
 8004f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb63 	bl	8005666 <UART_Receive_IT>
      return;
 8004fa0:	e25b      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80de 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80d1 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
 8004ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f043 0204 	orr.w	r2, r3, #4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 81f2 	beq.w	8005450 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 faee 	bl	8005666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_UART_IRQHandler+0x17a>
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04f      	beq.n	8005156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9f8 	bl	80054ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d041      	beq.n	800514e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d9      	bne.n	80050ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	4a7e      	ldr	r2, [pc, #504]	; (800531c <HAL_UART_IRQHandler+0x3e0>)
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd ff68 	bl	8003000 <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00e      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f99c 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00a      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f998 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e006      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f994 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005162:	e175      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	bf00      	nop
    return;
 8005166:	e173      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 814f 	bne.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8148 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8141 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80b6 	beq.w	8005320 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8145 	beq.w	8005454 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f080 813e 	bcs.w	8005454 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	f000 8088 	beq.w	80052fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005218:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800521c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005224:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1d9      	bne.n	80051ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800525c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005260:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800526e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e1      	bne.n	8005238 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3314      	adds	r3, #20
 800527a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005298:	66fa      	str	r2, [r7, #108]	; 0x6c
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800529e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052de:	65ba      	str	r2, [r7, #88]	; 0x58
 80052e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fd fe46 	bl	8002f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530a:	b29b      	uxth	r3, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8bf 	bl	8005496 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005318:	e09c      	b.n	8005454 <HAL_UART_IRQHandler+0x518>
 800531a:	bf00      	nop
 800531c:	08005571 	.word	0x08005571
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808e 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800533c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8089 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800536a:	647a      	str	r2, [r7, #68]	; 0x44
 800536c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	623b      	str	r3, [r7, #32]
   return(result);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a2:	633a      	str	r2, [r7, #48]	; 0x30
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f844 	bl	8005496 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540e:	e023      	b.n	8005458 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8b5 	bl	8005598 <UART_Transmit_IT>
    return;
 800542e:	e014      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8f4 	bl	8005636 <UART_EndTransmit_IT>
    return;
 800544e:	e004      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    return;
 8005450:	bf00      	nop
 8005452:	e002      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005458:	bf00      	nop
  }
}
 800545a:	37e8      	adds	r7, #232	; 0xe8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr

08005484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b095      	sub	sp, #84	; 0x54
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d4:	643a      	str	r2, [r7, #64]	; 0x40
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	2b01      	cmp	r3, #1
 8005522:	d119      	bne.n	8005558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60bb      	str	r3, [r7, #8]
   return(result);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005544:	61ba      	str	r2, [r7, #24]
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005566:	bf00      	nop
 8005568:	3754      	adds	r7, #84	; 0x54
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff7a 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b21      	cmp	r3, #33	; 0x21
 80055aa:	d13e      	bne.n	800562a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d114      	bne.n	80055e0 <UART_Transmit_IT+0x48>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d110      	bne.n	80055e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]
 80055de:	e008      	b.n	80055f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6211      	str	r1, [r2, #32]
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4619      	mov	r1, r3
 8005600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e000      	b.n	800562c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff02 	bl	8005460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08c      	sub	sp, #48	; 0x30
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b22      	cmp	r3, #34	; 0x22
 8005678:	f040 80ae 	bne.w	80057d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d117      	bne.n	80056b6 <UART_Receive_IT+0x50>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d113      	bne.n	80056b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
 80056b4:	e026      	b.n	8005704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d007      	beq.n	80056da <UART_Receive_IT+0x74>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <UART_Receive_IT+0x82>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005714:	2b00      	cmp	r3, #0
 8005716:	d15d      	bne.n	80057d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0220 	bic.w	r2, r2, #32
 8005726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	2b01      	cmp	r3, #1
 800575c:	d135      	bne.n	80057ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	613b      	str	r3, [r7, #16]
   return(result);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	623a      	str	r2, [r7, #32]
 8005786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	61bb      	str	r3, [r7, #24]
   return(result);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e5      	bne.n	8005764 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d10a      	bne.n	80057bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fe67 	bl	8005496 <HAL_UARTEx_RxEventCallback>
 80057c8:	e002      	b.n	80057d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fe51 	bl	8005472 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e002      	b.n	80057da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3730      	adds	r7, #48	; 0x30
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800581e:	f023 030c 	bic.w	r3, r3, #12
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	430b      	orrs	r3, r1
 800582a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <UART_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe faf2 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	e002      	b.n	800585a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fada 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8005858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009a      	lsls	r2, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <UART_SetConfig+0x118>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	0119      	lsls	r1, r3, #4
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009a      	lsls	r2, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <UART_SetConfig+0x118>)
 8005892:	fba3 0302 	umull	r0, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2064      	movs	r0, #100	; 0x64
 800589a:	fb00 f303 	mul.w	r3, r0, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a15      	ldr	r2, [pc, #84]	; (80058fc <UART_SetConfig+0x118>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b0:	4419      	add	r1, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009a      	lsls	r2, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <UART_SetConfig+0x118>)
 80058ca:	fba3 0302 	umull	r0, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2064      	movs	r0, #100	; 0x64
 80058d2:	fb00 f303 	mul.w	r3, r0, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	3332      	adds	r3, #50	; 0x32
 80058dc:	4a07      	ldr	r2, [pc, #28]	; (80058fc <UART_SetConfig+0x118>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	440a      	add	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40013800 	.word	0x40013800
 80058fc:	51eb851f 	.word	0x51eb851f

08005900 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005906:	f3ef 8305 	mrs	r3, IPSR
 800590a:	60bb      	str	r3, [r7, #8]
  return(result);
 800590c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005912:	f3ef 8310 	mrs	r3, PRIMASK
 8005916:	607b      	str	r3, [r7, #4]
  return(result);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <osKernelInitialize+0x32>
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <osKernelInitialize+0x60>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d109      	bne.n	800593a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005926:	f3ef 8311 	mrs	r3, BASEPRI
 800592a:	603b      	str	r3, [r7, #0]
  return(result);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005932:	f06f 0305 	mvn.w	r3, #5
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e00c      	b.n	8005954 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <osKernelInitialize+0x60>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <osKernelInitialize+0x60>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e002      	b.n	8005954 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005954:	68fb      	ldr	r3, [r7, #12]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr
 8005960:	20000c94 	.word	0x20000c94

08005964 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596a:	f3ef 8305 	mrs	r3, IPSR
 800596e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005970:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	607b      	str	r3, [r7, #4]
  return(result);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <osKernelStart+0x32>
 8005982:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <osKernelStart+0x64>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d109      	bne.n	800599e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800598a:	f3ef 8311 	mrs	r3, BASEPRI
 800598e:	603b      	str	r3, [r7, #0]
  return(result);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005996:	f06f 0305 	mvn.w	r3, #5
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e00e      	b.n	80059bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <osKernelStart+0x64>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <osKernelStart+0x64>)
 80059a8:	2202      	movs	r2, #2
 80059aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80059ac:	f001 f84e 	bl	8006a4c <vTaskStartScheduler>
      stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000c94 	.word	0x20000c94

080059cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b092      	sub	sp, #72	; 0x48
 80059d0:	af04      	add	r7, sp, #16
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059dc:	f3ef 8305 	mrs	r3, IPSR
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8094 	bne.w	8005b12 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
 80059ee:	623b      	str	r3, [r7, #32]
  return(result);
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 808d 	bne.w	8005b12 <osThreadNew+0x146>
 80059f8:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <osThreadNew+0x150>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d106      	bne.n	8005a0e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a00:	f3ef 8311 	mrs	r3, BASEPRI
 8005a04:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 8082 	bne.w	8005b12 <osThreadNew+0x146>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d07e      	beq.n	8005b12 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005a18:	2318      	movs	r3, #24
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005a20:	f107 031b 	add.w	r3, r7, #27
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d045      	beq.n	8005abe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <osThreadNew+0x74>
        name = attr->name;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <osThreadNew+0x9a>
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2b38      	cmp	r3, #56	; 0x38
 8005a58:	d805      	bhi.n	8005a66 <osThreadNew+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <osThreadNew+0x9e>
        return (NULL);
 8005a66:	2300      	movs	r3, #0
 8005a68:	e054      	b.n	8005b14 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <osThreadNew+0xd4>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2ba7      	cmp	r3, #167	; 0xa7
 8005a88:	d90a      	bls.n	8005aa0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d006      	beq.n	8005aa0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <osThreadNew+0xd4>
        mem = 1;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	e010      	b.n	8005ac2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10c      	bne.n	8005ac2 <osThreadNew+0xf6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <osThreadNew+0xf6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <osThreadNew+0xf6>
          mem = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abc:	e001      	b.n	8005ac2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d110      	bne.n	8005aea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ad0:	9202      	str	r2, [sp, #8]
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fde0 	bl	80066a4 <xTaskCreateStatic>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e013      	b.n	8005b12 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fe2a 	bl	800675c <xTaskCreate>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <osThreadNew+0x146>
          hTask = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3738      	adds	r7, #56	; 0x38
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000c94 	.word	0x20000c94

08005b20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b28:	f3ef 8305 	mrs	r3, IPSR
 8005b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10f      	bne.n	8005b54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b34:	f3ef 8310 	mrs	r3, PRIMASK
 8005b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <osDelay+0x34>
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <osDelay+0x58>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d109      	bne.n	8005b5c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b48:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <osDelay+0x3c>
    stat = osErrorISR;
 8005b54:	f06f 0305 	mvn.w	r3, #5
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e007      	b.n	8005b6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 ff3c 	bl	80069e4 <vTaskDelay>
    }
  }

  return (stat);
 8005b6c:	697b      	ldr	r3, [r7, #20]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000c94 	.word	0x20000c94

08005b7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <vApplicationGetIdleTaskMemory+0x28>)
 8005b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr
 8005ba4:	20000c98 	.word	0x20000c98
 8005ba8:	20000d40 	.word	0x20000d40

08005bac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a06      	ldr	r2, [pc, #24]	; (8005bdc <vApplicationGetTimerTaskMemory+0x30>)
 8005bc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bca:	601a      	str	r2, [r3, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000f40 	.word	0x20000f40
 8005bdc:	20000fe8 	.word	0x20000fe8

08005be0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 0208 	add.w	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 0208 	add.w	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d103      	bne.n	8005c9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e00c      	b.n	8005cb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e002      	b.n	8005caa <vListInsert+0x2e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d2f6      	bcs.n	8005ca4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6892      	ldr	r2, [r2, #8]
 8005d02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6852      	ldr	r2, [r2, #4]
 8005d0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d103      	bne.n	8005d20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1e5a      	subs	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d68:	f001 ff80 	bl	8007c6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d74:	68f9      	ldr	r1, [r7, #12]
 8005d76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	441a      	add	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	22ff      	movs	r2, #255	; 0xff
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00f      	beq.n	8005de6 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3310      	adds	r3, #16
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f8aa 	bl	8006f24 <xTaskRemoveFromEventList>
 8005dd0:	e009      	b.n	8005de6 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3310      	adds	r3, #16
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff02 	bl	8005be0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3324      	adds	r3, #36	; 0x24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fefd 	bl	8005be0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005de6:	f001 ff71 	bl	8007ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dea:	2301      	movs	r3, #1
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <xQueueGenericCreateStatic+0x52>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <xQueueGenericCreateStatic+0x56>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <xQueueGenericCreateStatic+0x58>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	623b      	str	r3, [r7, #32]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <xQueueGenericCreateStatic+0x7e>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericCreateStatic+0x82>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericCreateStatic+0x84>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	61fb      	str	r3, [r7, #28]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e92:	2350      	movs	r3, #80	; 0x50
 8005e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b50      	cmp	r3, #80	; 0x50
 8005e9a:	d00a      	beq.n	8005eb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61bb      	str	r3, [r7, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ec4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f805 	bl	8005ee2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3730      	adds	r7, #48	; 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e002      	b.n	8005f04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f10:	2101      	movs	r1, #1
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f7ff ff13 	bl	8005d3e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08e      	sub	sp, #56	; 0x38
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGenericSend+0x32>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d103      	bne.n	8005f68 <xQueueGenericSend+0x40>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <xQueueGenericSend+0x44>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <xQueueGenericSend+0x46>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <xQueueGenericSend+0x60>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d103      	bne.n	8005f96 <xQueueGenericSend+0x6e>
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <xQueueGenericSend+0x72>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <xQueueGenericSend+0x74>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	623b      	str	r3, [r7, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb6:	f001 f975 	bl	80072a4 <xTaskGetSchedulerState>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <xQueueGenericSend+0x9e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueGenericSend+0xa2>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueGenericSend+0xa4>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61fb      	str	r3, [r7, #28]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe6:	f001 fe41 	bl	8007c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <xQueueGenericSend+0xd4>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d112      	bne.n	8006022 <xQueueGenericSend+0xfa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006002:	f000 f9e3 	bl	80063cc <prvCopyDataToQueue>
 8006006:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	4618      	mov	r0, r3
 8006016:	f000 ff85 	bl	8006f24 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800601a:	f001 fe57 	bl	8007ccc <vPortExitCritical>
				return pdPASS;
 800601e:	2301      	movs	r3, #1
 8006020:	e062      	b.n	80060e8 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006028:	f001 fe50 	bl	8007ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800602c:	2300      	movs	r3, #0
 800602e:	e05b      	b.n	80060e8 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	4618      	mov	r0, r3
 800603c:	f000 ffd6 	bl	8006fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006044:	f001 fe42 	bl	8007ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006048:	f000 fd70 	bl	8006b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800604c:	f001 fe0e 	bl	8007c6c <vPortEnterCritical>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006056:	b25b      	sxtb	r3, r3
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d103      	bne.n	8006066 <xQueueGenericSend+0x13e>
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d103      	bne.n	800607c <xQueueGenericSend+0x154>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607c:	f001 fe26 	bl	8007ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006080:	1d3a      	adds	r2, r7, #4
 8006082:	f107 0314 	add.w	r3, r7, #20
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ffc5 	bl	8007018 <xTaskCheckForTimeOut>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d123      	bne.n	80060dc <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006096:	f000 fa91 	bl	80065bc <prvIsQueueFull>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	3310      	adds	r3, #16
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 feeb 	bl	8006e84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b0:	f000 fa1c 	bl	80064ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060b4:	f000 fd48 	bl	8006b48 <xTaskResumeAll>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d193      	bne.n	8005fe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <xQueueGenericSend+0x1c8>)
 80060c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	e78a      	b.n	8005fe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d2:	f000 fa0b 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060d6:	f000 fd37 	bl	8006b48 <xTaskResumeAll>
 80060da:	e784      	b.n	8005fe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060de:	f000 fa05 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e2:	f000 fd31 	bl	8006b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060e6:	2300      	movs	r3, #0
		}
	}
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3738      	adds	r7, #56	; 0x38
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08e      	sub	sp, #56	; 0x38
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <xQueueGenericSendFromISR+0x3c>
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <xQueueGenericSendFromISR+0x40>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <xQueueGenericSendFromISR+0x42>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	623b      	str	r3, [r7, #32]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d103      	bne.n	800615e <xQueueGenericSendFromISR+0x6a>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <xQueueGenericSendFromISR+0x6e>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xQueueGenericSendFromISR+0x70>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	61fb      	str	r3, [r7, #28]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800617e:	f001 fe37 	bl	8007df0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006182:	f3ef 8211 	mrs	r2, BASEPRI
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	61ba      	str	r2, [r7, #24]
 8006198:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800619a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <xQueueGenericSendFromISR+0xbc>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d12c      	bne.n	800620a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061c0:	f000 f904 	bl	80063cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d112      	bne.n	80061f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fea2 	bl	8006f24 <xTaskRemoveFromEventList>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00e      	beq.n	8006204 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e007      	b.n	8006204 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061f8:	3301      	adds	r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	b25a      	sxtb	r2, r3
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006204:	2301      	movs	r3, #1
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006208:	e001      	b.n	800620e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800620a:	2300      	movs	r3, #0
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800621c:	4618      	mov	r0, r3
 800621e:	3738      	adds	r7, #56	; 0x38
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <xQueueReceive+0x30>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	623b      	str	r3, [r7, #32]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueReceive+0x3e>
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueReceive+0x42>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueReceive+0x44>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueReceive+0x5e>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006282:	f001 f80f 	bl	80072a4 <xTaskGetSchedulerState>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <xQueueReceive+0x6e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <xQueueReceive+0x72>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueReceive+0x74>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueReceive+0x8e>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	61bb      	str	r3, [r7, #24]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80062b2:	f001 fcdb 	bl	8007c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d014      	beq.n	80062ec <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f000 f8eb 	bl	80064a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fe20 	bl	8006f24 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e4:	f001 fcf2 	bl	8007ccc <vPortExitCritical>
				return pdPASS;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e069      	b.n	80063c0 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f2:	f001 fceb 	bl	8007ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e062      	b.n	80063c0 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006300:	f107 0310 	add.w	r3, r7, #16
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fe71 	bl	8006fec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630a:	2301      	movs	r3, #1
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800630e:	f001 fcdd 	bl	8007ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006312:	f000 fc0b 	bl	8006b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006316:	f001 fca9 	bl	8007c6c <vPortEnterCritical>
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006320:	b25b      	sxtb	r3, r3
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d103      	bne.n	8006330 <xQueueReceive+0x10c>
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <xQueueReceive+0x122>
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006346:	f001 fcc1 	bl	8007ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634a:	1d3a      	adds	r2, r7, #4
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fe60 	bl	8007018 <xTaskCheckForTimeOut>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d123      	bne.n	80063a6 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800635e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006360:	f000 f916 	bl	8006590 <prvIsQueueEmpty>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	3324      	adds	r3, #36	; 0x24
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fd86 	bl	8006e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637a:	f000 f8b7 	bl	80064ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800637e:	f000 fbe3 	bl	8006b48 <xTaskResumeAll>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d194      	bne.n	80062b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xQueueReceive+0x1a4>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e78b      	b.n	80062b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639c:	f000 f8a6 	bl	80064ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a0:	f000 fbd2 	bl	8006b48 <xTaskResumeAll>
 80063a4:	e785      	b.n	80062b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	f000 f8a0 	bl	80064ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ac:	f000 fbcc 	bl	8006b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	f000 f8ed 	bl	8006590 <prvIsQueueEmpty>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f43f af7a 	beq.w	80062b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3730      	adds	r7, #48	; 0x30
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d14d      	bne.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 ff72 	bl	80072e0 <xTaskPriorityDisinherit>
 80063fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	e043      	b.n	800648e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d119      	bne.n	8006440 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6898      	ldr	r0, [r3, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	461a      	mov	r2, r3
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	f001 ff84 	bl	8008324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d32b      	bcc.n	800648e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	609a      	str	r2, [r3, #8]
 800643e:	e026      	b.n	800648e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68d8      	ldr	r0, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	461a      	mov	r2, r3
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	f001 ff6a 	bl	8008324 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	425b      	negs	r3, r3
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d207      	bcs.n	800647c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	425b      	negs	r3, r3
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d105      	bne.n	800648e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3b01      	subs	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006496:	697b      	ldr	r3, [r7, #20]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	441a      	add	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d303      	bcc.n	80064d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68d9      	ldr	r1, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	461a      	mov	r2, r3
 80064de:	6838      	ldr	r0, [r7, #0]
 80064e0:	f001 ff20 	bl	8008324 <memcpy>
	}
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064f4:	f001 fbba 	bl	8007c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006500:	e011      	b.n	8006526 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d012      	beq.n	8006530 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3324      	adds	r3, #36	; 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fd08 	bl	8006f24 <xTaskRemoveFromEventList>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800651a:	f000 fddf 	bl	80070dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3b01      	subs	r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dce9      	bgt.n	8006502 <prvUnlockQueue+0x16>
 800652e:	e000      	b.n	8006532 <prvUnlockQueue+0x46>
					break;
 8006530:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800653a:	f001 fbc7 	bl	8007ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800653e:	f001 fb95 	bl	8007c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006548:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654a:	e011      	b.n	8006570 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d012      	beq.n	800657a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3310      	adds	r3, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fce3 	bl	8006f24 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006564:	f000 fdba 	bl	80070dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce9      	bgt.n	800654c <prvUnlockQueue+0x60>
 8006578:	e000      	b.n	800657c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800657a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	; 0xff
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006584:	f001 fba2 	bl	8007ccc <vPortExitCritical>
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006598:	f001 fb68 	bl	8007c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e001      	b.n	80065ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ae:	f001 fb8d 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c4:	f001 fb52 	bl	8007c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d102      	bne.n	80065da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e001      	b.n	80065de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f001 fb75 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e014      	b.n	8006626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065fc:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <vQueueAddToRegistry+0x4c>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006608:	490b      	ldr	r1, [pc, #44]	; (8006638 <vQueueAddToRegistry+0x4c>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <vQueueAddToRegistry+0x4c>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800661e:	e006      	b.n	800662e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b07      	cmp	r3, #7
 800662a:	d9e7      	bls.n	80065fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr
 8006638:	200013e8 	.word	0x200013e8

0800663c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800664c:	f001 fb0e 	bl	8007c6c <vPortEnterCritical>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006656:	b25b      	sxtb	r3, r3
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d103      	bne.n	8006666 <vQueueWaitForMessageRestricted+0x2a>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666c:	b25b      	sxtb	r3, r3
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d103      	bne.n	800667c <vQueueWaitForMessageRestricted+0x40>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800667c:	f001 fb26 	bl	8007ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fc1b 	bl	8006ecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	f7ff ff28 	bl	80064ec <prvUnlockQueue>
	}
 800669c:	bf00      	nop
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08e      	sub	sp, #56	; 0x38
 80066a8:	af04      	add	r7, sp, #16
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	623b      	str	r3, [r7, #32]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xTaskCreateStatic+0x46>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61fb      	str	r3, [r7, #28]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ea:	23a8      	movs	r3, #168	; 0xa8
 80066ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2ba8      	cmp	r3, #168	; 0xa8
 80066f2:	d00a      	beq.n	800670a <xTaskCreateStatic+0x66>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61bb      	str	r3, [r7, #24]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <xTaskCreateStatic+0xaa>
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01b      	beq.n	800674e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800671e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	2202      	movs	r2, #2
 8006724:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006728:	2300      	movs	r3, #0
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	f107 0314 	add.w	r3, r7, #20
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f851 	bl	80067e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006748:	f000 f8ec 	bl	8006924 <prvAddNewTaskToReadyList>
 800674c:	e001      	b.n	8006752 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006752:	697b      	ldr	r3, [r7, #20]
	}
 8006754:	4618      	mov	r0, r3
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af04      	add	r7, sp, #16
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4613      	mov	r3, r2
 800676a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	88fb      	ldrh	r3, [r7, #6]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fb7b 	bl	8007e6c <pvPortMalloc>
 8006776:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800677e:	20a8      	movs	r0, #168	; 0xa8
 8006780:	f001 fb74 	bl	8007e6c <pvPortMalloc>
 8006784:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
 8006792:	e005      	b.n	80067a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006794:	6978      	ldr	r0, [r7, #20]
 8006796:	f001 fc2d 	bl	8007ff4 <vPortFree>
 800679a:	e001      	b.n	80067a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	2300      	movs	r3, #0
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f80f 	bl	80067e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ca:	69f8      	ldr	r0, [r7, #28]
 80067cc:	f000 f8aa 	bl	8006924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067d0:	2301      	movs	r3, #1
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	e002      	b.n	80067dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067dc:	69bb      	ldr	r3, [r7, #24]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	461a      	mov	r2, r3
 8006800:	21a5      	movs	r1, #165	; 0xa5
 8006802:	f001 fd0b 	bl	800821c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006810:	3b01      	subs	r3, #1
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f023 0307 	bic.w	r3, r3, #7
 800681e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <prvInitialiseNewTask+0x58>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	617b      	str	r3, [r7, #20]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	e012      	b.n	800686c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	7819      	ldrb	r1, [r3, #0]
 800684e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	3334      	adds	r3, #52	; 0x34
 8006856:	460a      	mov	r2, r1
 8006858:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d9e9      	bls.n	8006846 <prvInitialiseNewTask+0x5e>
 8006872:	e000      	b.n	8006876 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006874:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	2b37      	cmp	r3, #55	; 0x37
 8006882:	d901      	bls.n	8006888 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006884:	2337      	movs	r3, #55	; 0x37
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006892:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2200      	movs	r2, #0
 8006898:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	3304      	adds	r3, #4
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff f9bd 	bl	8005c1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	3318      	adds	r3, #24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff f9b8 	bl	8005c1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	3354      	adds	r3, #84	; 0x54
 80068d8:	224c      	movs	r2, #76	; 0x4c
 80068da:	2100      	movs	r1, #0
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fc9d 	bl	800821c <memset>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <prvInitialiseNewTask+0x130>)
 80068e6:	659a      	str	r2, [r3, #88]	; 0x58
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	4a0c      	ldr	r2, [pc, #48]	; (800691c <prvInitialiseNewTask+0x134>)
 80068ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	4a0b      	ldr	r2, [pc, #44]	; (8006920 <prvInitialiseNewTask+0x138>)
 80068f2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	69b8      	ldr	r0, [r7, #24]
 80068fa:	f001 f8c5 	bl	8007a88 <pxPortInitialiseStack>
 80068fe:	4602      	mov	r2, r0
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006910:	bf00      	nop
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20002674 	.word	0x20002674
 800691c:	200026dc 	.word	0x200026dc
 8006920:	20002744 	.word	0x20002744

08006924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800692c:	f001 f99e 	bl	8007c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006930:	4b26      	ldr	r3, [pc, #152]	; (80069cc <prvAddNewTaskToReadyList+0xa8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	4a25      	ldr	r2, [pc, #148]	; (80069cc <prvAddNewTaskToReadyList+0xa8>)
 8006938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693a:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <prvAddNewTaskToReadyList+0xac>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006942:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <prvAddNewTaskToReadyList+0xac>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006948:	4b20      	ldr	r3, [pc, #128]	; (80069cc <prvAddNewTaskToReadyList+0xa8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d110      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006950:	f000 fbe2 	bl	8007118 <prvInitialiseTaskLists>
 8006954:	e00d      	b.n	8006972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006956:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <prvAddNewTaskToReadyList+0xb0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800695e:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <prvAddNewTaskToReadyList+0xac>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d802      	bhi.n	8006972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800696c:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <prvAddNewTaskToReadyList+0xac>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006972:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <prvAddNewTaskToReadyList+0xb4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <prvAddNewTaskToReadyList+0xb4>)
 800697a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <prvAddNewTaskToReadyList+0xb4>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b14      	ldr	r3, [pc, #80]	; (80069dc <prvAddNewTaskToReadyList+0xb8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d903      	bls.n	8006998 <prvAddNewTaskToReadyList+0x74>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4a11      	ldr	r2, [pc, #68]	; (80069dc <prvAddNewTaskToReadyList+0xb8>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4a0e      	ldr	r2, [pc, #56]	; (80069e0 <prvAddNewTaskToReadyList+0xbc>)
 80069a6:	441a      	add	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f7ff f941 	bl	8005c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069b4:	f001 f98a 	bl	8007ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <prvAddNewTaskToReadyList+0xb0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <prvAddNewTaskToReadyList+0xac>)
 80069c2:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c4:	bf00      	nop
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	200018fc 	.word	0x200018fc
 80069d0:	20001428 	.word	0x20001428
 80069d4:	20001908 	.word	0x20001908
 80069d8:	20001918 	.word	0x20001918
 80069dc:	20001904 	.word	0x20001904
 80069e0:	2000142c 	.word	0x2000142c

080069e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <vTaskDelay+0x60>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <vTaskDelay+0x30>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a14:	f000 f88a 	bl	8006b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fcce 	bl	80073bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a20:	f000 f892 	bl	8006b48 <xTaskResumeAll>
 8006a24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <vTaskDelay+0x64>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20001924 	.word	0x20001924
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	1d39      	adds	r1, r7, #4
 8006a5e:	f107 0308 	add.w	r3, r7, #8
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff f88a 	bl	8005b7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	9202      	str	r2, [sp, #8]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	460a      	mov	r2, r1
 8006a7a:	4924      	ldr	r1, [pc, #144]	; (8006b0c <vTaskStartScheduler+0xc0>)
 8006a7c:	4824      	ldr	r0, [pc, #144]	; (8006b10 <vTaskStartScheduler+0xc4>)
 8006a7e:	f7ff fe11 	bl	80066a4 <xTaskCreateStatic>
 8006a82:	4603      	mov	r3, r0
 8006a84:	4a23      	ldr	r2, [pc, #140]	; (8006b14 <vTaskStartScheduler+0xc8>)
 8006a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a88:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <vTaskStartScheduler+0xc8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e001      	b.n	8006a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d102      	bne.n	8006aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006aa0:	f000 fce0 	bl	8007464 <xTimerCreateTimerTask>
 8006aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d11b      	bne.n	8006ae4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	613b      	str	r3, [r7, #16]
}
 8006abe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ac0:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <vTaskStartScheduler+0xcc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3354      	adds	r3, #84	; 0x54
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <vTaskStartScheduler+0xd0>)
 8006ac8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <vTaskStartScheduler+0xd4>)
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <vTaskStartScheduler+0xd8>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ad8:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <vTaskStartScheduler+0xdc>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ade:	f001 f853 	bl	8007b88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ae2:	e00e      	b.n	8006b02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d10a      	bne.n	8006b02 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <vTaskStartScheduler+0xb4>
}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08008474 	.word	0x08008474
 8006b10:	080070f5 	.word	0x080070f5
 8006b14:	20001920 	.word	0x20001920
 8006b18:	20001428 	.word	0x20001428
 8006b1c:	200000a0 	.word	0x200000a0
 8006b20:	2000191c 	.word	0x2000191c
 8006b24:	20001908 	.word	0x20001908
 8006b28:	20001900 	.word	0x20001900

08006b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b30:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <vTaskSuspendAll+0x18>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	4a03      	ldr	r2, [pc, #12]	; (8006b44 <vTaskSuspendAll+0x18>)
 8006b38:	6013      	str	r3, [r2, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20001924 	.word	0x20001924

08006b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b56:	4b3c      	ldr	r3, [pc, #240]	; (8006c48 <xTaskResumeAll+0x100>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	603b      	str	r3, [r7, #0]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b74:	f001 f87a 	bl	8007c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <xTaskResumeAll+0x100>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <xTaskResumeAll+0x100>)
 8006b80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b82:	4b31      	ldr	r3, [pc, #196]	; (8006c48 <xTaskResumeAll+0x100>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d156      	bne.n	8006c38 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b8a:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <xTaskResumeAll+0x104>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d052      	beq.n	8006c38 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b92:	e02f      	b.n	8006bf4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b94:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <xTaskResumeAll+0x108>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff f8a3 	bl	8005cec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff f89e 	bl	8005cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <xTaskResumeAll+0x10c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d903      	bls.n	8006bc4 <xTaskResumeAll+0x7c>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4a24      	ldr	r2, [pc, #144]	; (8006c54 <xTaskResumeAll+0x10c>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <xTaskResumeAll+0x110>)
 8006bd2:	441a      	add	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f7ff f82b 	bl	8005c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <xTaskResumeAll+0x114>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bee:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <xTaskResumeAll+0x118>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bf4:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <xTaskResumeAll+0x108>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1cb      	bne.n	8006b94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c02:	f000 fb2b 	bl	800725c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c06:	4b17      	ldr	r3, [pc, #92]	; (8006c64 <xTaskResumeAll+0x11c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d010      	beq.n	8006c34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c12:	f000 f837 	bl	8006c84 <xTaskIncrementTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTaskResumeAll+0x118>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f1      	bne.n	8006c12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <xTaskResumeAll+0x11c>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <xTaskResumeAll+0x118>)
 8006c36:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c38:	f001 f848 	bl	8007ccc <vPortExitCritical>

	return xAlreadyYielded;
 8006c3c:	687b      	ldr	r3, [r7, #4]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20001924 	.word	0x20001924
 8006c4c:	200018fc 	.word	0x200018fc
 8006c50:	200018bc 	.word	0x200018bc
 8006c54:	20001904 	.word	0x20001904
 8006c58:	2000142c 	.word	0x2000142c
 8006c5c:	20001428 	.word	0x20001428
 8006c60:	20001910 	.word	0x20001910
 8006c64:	2000190c 	.word	0x2000190c

08006c68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <xTaskGetTickCount+0x18>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c74:	687b      	ldr	r3, [r7, #4]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr
 8006c80:	20001900 	.word	0x20001900

08006c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <xTaskIncrementTick+0x114>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d175      	bne.n	8006d82 <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c96:	4b41      	ldr	r3, [pc, #260]	; (8006d9c <xTaskIncrementTick+0x118>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <xTaskIncrementTick+0x118>)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d120      	bne.n	8006cec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006caa:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <xTaskIncrementTick+0x11c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <xTaskIncrementTick+0x46>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	603b      	str	r3, [r7, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xTaskIncrementTick+0x44>
 8006cca:	4b35      	ldr	r3, [pc, #212]	; (8006da0 <xTaskIncrementTick+0x11c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <xTaskIncrementTick+0x120>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a32      	ldr	r2, [pc, #200]	; (8006da0 <xTaskIncrementTick+0x11c>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4a32      	ldr	r2, [pc, #200]	; (8006da4 <xTaskIncrementTick+0x120>)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <xTaskIncrementTick+0x124>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a30      	ldr	r2, [pc, #192]	; (8006da8 <xTaskIncrementTick+0x124>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	f000 fab8 	bl	800725c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cec:	4b2f      	ldr	r3, [pc, #188]	; (8006dac <xTaskIncrementTick+0x128>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d34a      	bcc.n	8006d8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf6:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <xTaskIncrementTick+0x11c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <xTaskIncrementTick+0x80>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <xTaskIncrementTick+0x82>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	4b28      	ldr	r3, [pc, #160]	; (8006dac <xTaskIncrementTick+0x128>)
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	601a      	str	r2, [r3, #0]
					break;
 8006d12:	e03b      	b.n	8006d8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d14:	4b22      	ldr	r3, [pc, #136]	; (8006da0 <xTaskIncrementTick+0x11c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d203      	bcs.n	8006d34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	; (8006dac <xTaskIncrementTick+0x128>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
						break;
 8006d32:	e02b      	b.n	8006d8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe ffd7 	bl	8005cec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe ffce 	bl	8005cec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4b16      	ldr	r3, [pc, #88]	; (8006db0 <xTaskIncrementTick+0x12c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <xTaskIncrementTick+0xe0>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <xTaskIncrementTick+0x12c>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <xTaskIncrementTick+0x130>)
 8006d72:	441a      	add	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe ff5b 	bl	8005c36 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d80:	e7b9      	b.n	8006cf6 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <xTaskIncrementTick+0x134>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	4a0b      	ldr	r2, [pc, #44]	; (8006db8 <xTaskIncrementTick+0x134>)
 8006d8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d8c:	697b      	ldr	r3, [r7, #20]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20001924 	.word	0x20001924
 8006d9c:	20001900 	.word	0x20001900
 8006da0:	200018b4 	.word	0x200018b4
 8006da4:	200018b8 	.word	0x200018b8
 8006da8:	20001914 	.word	0x20001914
 8006dac:	2000191c 	.word	0x2000191c
 8006db0:	20001904 	.word	0x20001904
 8006db4:	2000142c 	.word	0x2000142c
 8006db8:	2000190c 	.word	0x2000190c

08006dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dc2:	4b2a      	ldr	r3, [pc, #168]	; (8006e6c <vTaskSwitchContext+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dca:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <vTaskSwitchContext+0xb4>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dd0:	e046      	b.n	8006e60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006dd2:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <vTaskSwitchContext+0xb4>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dd8:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <vTaskSwitchContext+0xb8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e010      	b.n	8006e02 <vTaskSwitchContext+0x46>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <vTaskSwitchContext+0x40>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	607b      	str	r3, [r7, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vTaskSwitchContext+0x3e>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	491d      	ldr	r1, [pc, #116]	; (8006e78 <vTaskSwitchContext+0xbc>)
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0e4      	beq.n	8006de0 <vTaskSwitchContext+0x24>
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <vTaskSwitchContext+0xbc>)
 8006e22:	4413      	add	r3, r2
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3308      	adds	r3, #8
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d104      	bne.n	8006e46 <vTaskSwitchContext+0x8a>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	; (8006e7c <vTaskSwitchContext+0xc0>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <vTaskSwitchContext+0xb8>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <vTaskSwitchContext+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3354      	adds	r3, #84	; 0x54
 8006e5c:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <vTaskSwitchContext+0xc4>)
 8006e5e:	6013      	str	r3, [r2, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20001924 	.word	0x20001924
 8006e70:	20001910 	.word	0x20001910
 8006e74:	20001904 	.word	0x20001904
 8006e78:	2000142c 	.word	0x2000142c
 8006e7c:	20001428 	.word	0x20001428
 8006e80:	200000a0 	.word	0x200000a0

08006e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60fb      	str	r3, [r7, #12]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <vTaskPlaceOnEventList+0x44>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fe fee2 	bl	8005c7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6838      	ldr	r0, [r7, #0]
 8006ebc:	f000 fa7e 	bl	80073bc <prvAddCurrentTaskToDelayedList>
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20001428 	.word	0x20001428

08006ecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	617b      	str	r3, [r7, #20]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3318      	adds	r3, #24
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7fe fe9a 	bl	8005c36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	f000 fa53 	bl	80073bc <prvAddCurrentTaskToDelayedList>
	}
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20001428 	.word	0x20001428

08006f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60fb      	str	r3, [r7, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3318      	adds	r3, #24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fec9 	bl	8005cec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5a:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <xTaskRemoveFromEventList+0xb0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d11d      	bne.n	8006f9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fec0 	bl	8005cec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b19      	ldr	r3, [pc, #100]	; (8006fd8 <xTaskRemoveFromEventList+0xb4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d903      	bls.n	8006f80 <xTaskRemoveFromEventList+0x5c>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <xTaskRemoveFromEventList+0xb4>)
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4a13      	ldr	r2, [pc, #76]	; (8006fdc <xTaskRemoveFromEventList+0xb8>)
 8006f8e:	441a      	add	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fe4d 	bl	8005c36 <vListInsertEnd>
 8006f9c:	e005      	b.n	8006faa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3318      	adds	r3, #24
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	480e      	ldr	r0, [pc, #56]	; (8006fe0 <xTaskRemoveFromEventList+0xbc>)
 8006fa6:	f7fe fe46 	bl	8005c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <xTaskRemoveFromEventList+0xc0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d905      	bls.n	8006fc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <xTaskRemoveFromEventList+0xc4>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e001      	b.n	8006fc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006fc8:	697b      	ldr	r3, [r7, #20]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20001924 	.word	0x20001924
 8006fd8:	20001904 	.word	0x20001904
 8006fdc:	2000142c 	.word	0x2000142c
 8006fe0:	200018bc 	.word	0x200018bc
 8006fe4:	20001428 	.word	0x20001428
 8006fe8:	20001910 	.word	0x20001910

08006fec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <vTaskInternalSetTimeOutState+0x24>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <vTaskInternalSetTimeOutState+0x28>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	605a      	str	r2, [r3, #4]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20001914 	.word	0x20001914
 8007014:	20001900 	.word	0x20001900

08007018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	613b      	str	r3, [r7, #16]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800705a:	f000 fe07 	bl	8007c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <xTaskCheckForTimeOut+0xbc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d102      	bne.n	800707e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e023      	b.n	80070c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <xTaskCheckForTimeOut+0xc0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d007      	beq.n	800709a <xTaskCheckForTimeOut+0x82>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e015      	b.n	80070c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d20b      	bcs.n	80070bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ff9b 	bl	8006fec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	e004      	b.n	80070c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f000 fe01 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 80070ca:	69fb      	ldr	r3, [r7, #28]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20001900 	.word	0x20001900
 80070d8:	20001914 	.word	0x20001914

080070dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <vTaskMissedYield+0x14>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
}
 80070e6:	bf00      	nop
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20001910 	.word	0x20001910

080070f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070fc:	f000 f84c 	bl	8007198 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <prvIdleTask+0x20>)
 8007102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007110:	e7f4      	b.n	80070fc <prvIdleTask+0x8>
 8007112:	bf00      	nop
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800711e:	2300      	movs	r3, #0
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	e00c      	b.n	800713e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a12      	ldr	r2, [pc, #72]	; (8007178 <prvInitialiseTaskLists+0x60>)
 8007130:	4413      	add	r3, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fd54 	bl	8005be0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3301      	adds	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b37      	cmp	r3, #55	; 0x37
 8007142:	d9ef      	bls.n	8007124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007144:	480d      	ldr	r0, [pc, #52]	; (800717c <prvInitialiseTaskLists+0x64>)
 8007146:	f7fe fd4b 	bl	8005be0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800714a:	480d      	ldr	r0, [pc, #52]	; (8007180 <prvInitialiseTaskLists+0x68>)
 800714c:	f7fe fd48 	bl	8005be0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007150:	480c      	ldr	r0, [pc, #48]	; (8007184 <prvInitialiseTaskLists+0x6c>)
 8007152:	f7fe fd45 	bl	8005be0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007156:	480c      	ldr	r0, [pc, #48]	; (8007188 <prvInitialiseTaskLists+0x70>)
 8007158:	f7fe fd42 	bl	8005be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800715c:	480b      	ldr	r0, [pc, #44]	; (800718c <prvInitialiseTaskLists+0x74>)
 800715e:	f7fe fd3f 	bl	8005be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007162:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <prvInitialiseTaskLists+0x78>)
 8007164:	4a05      	ldr	r2, [pc, #20]	; (800717c <prvInitialiseTaskLists+0x64>)
 8007166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <prvInitialiseTaskLists+0x7c>)
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <prvInitialiseTaskLists+0x68>)
 800716c:	601a      	str	r2, [r3, #0]
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	2000142c 	.word	0x2000142c
 800717c:	2000188c 	.word	0x2000188c
 8007180:	200018a0 	.word	0x200018a0
 8007184:	200018bc 	.word	0x200018bc
 8007188:	200018d0 	.word	0x200018d0
 800718c:	200018e8 	.word	0x200018e8
 8007190:	200018b4 	.word	0x200018b4
 8007194:	200018b8 	.word	0x200018b8

08007198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719e:	e019      	b.n	80071d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071a0:	f000 fd64 	bl	8007c6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <prvCheckTasksWaitingTermination+0x50>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fd9b 	bl	8005cec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <prvCheckTasksWaitingTermination+0x54>)
 80071be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ca:	f000 fd7f 	bl	8007ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f810 	bl	80071f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <prvCheckTasksWaitingTermination+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e1      	bne.n	80071a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200018d0 	.word	0x200018d0
 80071ec:	200018fc 	.word	0x200018fc
 80071f0:	200018e4 	.word	0x200018e4

080071f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3354      	adds	r3, #84	; 0x54
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f813 	bl	800822c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800720c:	2b00      	cmp	r3, #0
 800720e:	d108      	bne.n	8007222 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	4618      	mov	r0, r3
 8007216:	f000 feed 	bl	8007ff4 <vPortFree>
				vPortFree( pxTCB );
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 feea 	bl	8007ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007220:	e018      	b.n	8007254 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007228:	2b01      	cmp	r3, #1
 800722a:	d103      	bne.n	8007234 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fee1 	bl	8007ff4 <vPortFree>
	}
 8007232:	e00f      	b.n	8007254 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800723a:	2b02      	cmp	r3, #2
 800723c:	d00a      	beq.n	8007254 <prvDeleteTCB+0x60>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60fb      	str	r3, [r7, #12]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <prvDeleteTCB+0x5e>
	}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007262:	4b0e      	ldr	r3, [pc, #56]	; (800729c <prvResetNextTaskUnblockTime+0x40>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <prvResetNextTaskUnblockTime+0x14>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <prvResetNextTaskUnblockTime+0x16>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007276:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvResetNextTaskUnblockTime+0x44>)
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800727e:	e008      	b.n	8007292 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007280:	4b06      	ldr	r3, [pc, #24]	; (800729c <prvResetNextTaskUnblockTime+0x40>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <prvResetNextTaskUnblockTime+0x44>)
 8007290:	6013      	str	r3, [r2, #0]
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	200018b4 	.word	0x200018b4
 80072a0:	2000191c 	.word	0x2000191c

080072a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <xTaskGetSchedulerState+0x34>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072b2:	2301      	movs	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e008      	b.n	80072ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <xTaskGetSchedulerState+0x38>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c0:	2302      	movs	r3, #2
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	e001      	b.n	80072ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ca:	687b      	ldr	r3, [r7, #4]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20001908 	.word	0x20001908
 80072dc:	20001924 	.word	0x20001924

080072e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d056      	beq.n	80073a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <xTaskPriorityDisinherit+0xd0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d00a      	beq.n	8007316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	429a      	cmp	r2, r3
 8007348:	d02c      	beq.n	80073a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	2b00      	cmp	r3, #0
 8007350:	d128      	bne.n	80073a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3304      	adds	r3, #4
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fcc8 	bl	8005cec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <xTaskPriorityDisinherit+0xd4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d903      	bls.n	8007384 <xTaskPriorityDisinherit+0xa4>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <xTaskPriorityDisinherit+0xd4>)
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <xTaskPriorityDisinherit+0xd8>)
 8007392:	441a      	add	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe fc4b 	bl	8005c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073a4:	697b      	ldr	r3, [r7, #20]
	}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20001428 	.word	0x20001428
 80073b4:	20001904 	.word	0x20001904
 80073b8:	2000142c 	.word	0x2000142c

080073bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <prvAddCurrentTaskToDelayedList+0x90>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073cc:	4b20      	ldr	r3, [pc, #128]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fc8a 	bl	8005cec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d10a      	bne.n	80073f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4819      	ldr	r0, [pc, #100]	; (8007454 <prvAddCurrentTaskToDelayedList+0x98>)
 80073f0:	f7fe fc21 	bl	8005c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073f4:	e026      	b.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d209      	bcs.n	8007422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fc2e 	bl	8005c7c <vListInsert>
}
 8007420:	e010      	b.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fe fc24 	bl	8005c7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d202      	bcs.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800743e:	4a08      	ldr	r2, [pc, #32]	; (8007460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6013      	str	r3, [r2, #0]
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20001900 	.word	0x20001900
 8007450:	20001428 	.word	0x20001428
 8007454:	200018e8 	.word	0x200018e8
 8007458:	200018b8 	.word	0x200018b8
 800745c:	200018b4 	.word	0x200018b4
 8007460:	2000191c 	.word	0x2000191c

08007464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800746e:	f000 facb 	bl	8007a08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xTimerCreateTimerTask+0x80>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d021      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007482:	1d3a      	adds	r2, r7, #4
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fb8d 	bl	8005bac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	2302      	movs	r3, #2
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	460a      	mov	r2, r1
 80074a4:	4910      	ldr	r1, [pc, #64]	; (80074e8 <xTimerCreateTimerTask+0x84>)
 80074a6:	4811      	ldr	r0, [pc, #68]	; (80074ec <xTimerCreateTimerTask+0x88>)
 80074a8:	f7ff f8fc 	bl	80066a4 <xTaskCreateStatic>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <xTimerCreateTimerTask+0x8c>)
 80074b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <xTimerCreateTimerTask+0x8c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ba:	2301      	movs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	613b      	str	r3, [r7, #16]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20001958 	.word	0x20001958
 80074e8:	0800847c 	.word	0x0800847c
 80074ec:	08007611 	.word	0x08007611
 80074f0:	2000195c 	.word	0x2000195c

080074f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007502:	2300      	movs	r3, #0
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xTimerGenericCommand+0x2e>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	623b      	str	r3, [r7, #32]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007522:	4b1a      	ldr	r3, [pc, #104]	; (800758c <xTimerGenericCommand+0x98>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d02a      	beq.n	8007580 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b05      	cmp	r3, #5
 800753a:	dc18      	bgt.n	800756e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800753c:	f7ff feb2 	bl	80072a4 <xTaskGetSchedulerState>
 8007540:	4603      	mov	r3, r0
 8007542:	2b02      	cmp	r3, #2
 8007544:	d109      	bne.n	800755a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <xTimerGenericCommand+0x98>)
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f107 0110 	add.w	r1, r7, #16
 800754e:	2300      	movs	r3, #0
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	f7fe fce9 	bl	8005f28 <xQueueGenericSend>
 8007556:	6278      	str	r0, [r7, #36]	; 0x24
 8007558:	e012      	b.n	8007580 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <xTimerGenericCommand+0x98>)
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f107 0110 	add.w	r1, r7, #16
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	f7fe fcdf 	bl	8005f28 <xQueueGenericSend>
 800756a:	6278      	str	r0, [r7, #36]	; 0x24
 800756c:	e008      	b.n	8007580 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <xTimerGenericCommand+0x98>)
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f107 0110 	add.w	r1, r7, #16
 8007576:	2300      	movs	r3, #0
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	f7fe fdbb 	bl	80060f4 <xQueueGenericSendFromISR>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007582:	4618      	mov	r0, r3
 8007584:	3728      	adds	r7, #40	; 0x28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20001958 	.word	0x20001958

08007590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800759a:	4b1c      	ldr	r3, [pc, #112]	; (800760c <prvProcessExpiredTimer+0x7c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fb9f 	bl	8005cec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d122      	bne.n	80075fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	18d1      	adds	r1, r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	6978      	ldr	r0, [r7, #20]
 80075c4:	f000 f8c8 	bl	8007758 <prvInsertTimerInActiveList>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	2100      	movs	r1, #0
 80075d8:	6978      	ldr	r0, [r7, #20]
 80075da:	f7ff ff8b 	bl	80074f4 <xTimerGenericCommand>
 80075de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	e7fe      	b.n	80075fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	6978      	ldr	r0, [r7, #20]
 8007602:	4798      	blx	r3
}
 8007604:	bf00      	nop
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20001950 	.word	0x20001950

08007610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f857 	bl	80076d0 <prvGetNextExpireTime>
 8007622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4619      	mov	r1, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f803 	bl	8007634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800762e:	f000 f8d5 	bl	80077dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007632:	e7f1      	b.n	8007618 <prvTimerTask+0x8>

08007634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800763e:	f7ff fa75 	bl	8006b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f000 f866 	bl	8007718 <prvSampleTimeNow>
 800764c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d130      	bne.n	80076b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <prvProcessTimerOrBlockTask+0x3c>
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	429a      	cmp	r2, r3
 8007660:	d806      	bhi.n	8007670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007662:	f7ff fa71 	bl	8006b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ff91 	bl	8007590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800766e:	e024      	b.n	80076ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <prvProcessTimerOrBlockTask+0x90>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <prvProcessTimerOrBlockTask+0x94>)
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4619      	mov	r1, r3
 8007696:	f7fe ffd1 	bl	800663c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800769a:	f7ff fa55 	bl	8006b48 <xTaskResumeAll>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <prvProcessTimerOrBlockTask+0x98>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
}
 80076b4:	e001      	b.n	80076ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076b6:	f7ff fa47 	bl	8006b48 <xTaskResumeAll>
}
 80076ba:	bf00      	nop
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20001954 	.word	0x20001954
 80076c8:	20001958 	.word	0x20001958
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <prvGetNextExpireTime+0x44>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf0c      	ite	eq
 80076e2:	2301      	moveq	r3, #1
 80076e4:	2300      	movne	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d105      	bne.n	8007702 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <prvGetNextExpireTime+0x44>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e001      	b.n	8007706 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20001950 	.word	0x20001950

08007718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007720:	f7ff faa2 	bl	8006c68 <xTaskGetTickCount>
 8007724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <prvSampleTimeNow+0x3c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	429a      	cmp	r2, r3
 800772e:	d205      	bcs.n	800773c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007730:	f000 f908 	bl	8007944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e002      	b.n	8007742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007742:	4a04      	ldr	r2, [pc, #16]	; (8007754 <prvSampleTimeNow+0x3c>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20001960 	.word	0x20001960

08007758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d812      	bhi.n	80077a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	429a      	cmp	r2, r3
 800778a:	d302      	bcc.n	8007792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e01b      	b.n	80077ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007792:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <prvInsertTimerInActiveList+0x7c>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fe fa6d 	bl	8005c7c <vListInsert>
 80077a2:	e012      	b.n	80077ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d206      	bcs.n	80077ba <prvInsertTimerInActiveList+0x62>
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d302      	bcc.n	80077ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e007      	b.n	80077ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <prvInsertTimerInActiveList+0x80>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4619      	mov	r1, r3
 80077c4:	4610      	mov	r0, r2
 80077c6:	f7fe fa59 	bl	8005c7c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ca:	697b      	ldr	r3, [r7, #20]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20001954 	.word	0x20001954
 80077d8:	20001950 	.word	0x20001950

080077dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077e2:	e09d      	b.n	8007920 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da18      	bge.n	800781c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077ea:	1d3b      	adds	r3, r7, #4
 80077ec:	3304      	adds	r3, #4
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	61fb      	str	r3, [r7, #28]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007812:	6850      	ldr	r0, [r2, #4]
 8007814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007816:	6892      	ldr	r2, [r2, #8]
 8007818:	4611      	mov	r1, r2
 800781a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	db7e      	blt.n	8007920 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fa5a 	bl	8005cec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007838:	463b      	mov	r3, r7
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ff6c 	bl	8007718 <prvSampleTimeNow>
 8007840:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b09      	cmp	r3, #9
 8007846:	d86a      	bhi.n	800791e <prvProcessReceivedCommands+0x142>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <prvProcessReceivedCommands+0x74>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007879 	.word	0x08007879
 8007854:	08007879 	.word	0x08007879
 8007858:	08007879 	.word	0x08007879
 800785c:	08007921 	.word	0x08007921
 8007860:	080078d5 	.word	0x080078d5
 8007864:	0800790d 	.word	0x0800790d
 8007868:	08007879 	.word	0x08007879
 800786c:	08007879 	.word	0x08007879
 8007870:	08007921 	.word	0x08007921
 8007874:	080078d5 	.word	0x080078d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	18d1      	adds	r1, r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007886:	f7ff ff67 	bl	8007758 <prvInsertTimerInActiveList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d047      	beq.n	8007920 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007896:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d13f      	bne.n	8007920 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	441a      	add	r2, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	2300      	movs	r3, #0
 80078ae:	2100      	movs	r1, #0
 80078b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b2:	f7ff fe1f 	bl	80074f4 <xTimerGenericCommand>
 80078b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d130      	bne.n	8007920 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	61bb      	str	r3, [r7, #24]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	617b      	str	r3, [r7, #20]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	18d1      	adds	r1, r2, r3
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f7ff ff27 	bl	8007758 <prvInsertTimerInActiveList>
					break;
 800790a:	e009      	b.n	8007920 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007918:	f000 fb6c 	bl	8007ff4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800791c:	e000      	b.n	8007920 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800791e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <prvProcessReceivedCommands+0x164>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	1d39      	adds	r1, r7, #4
 8007926:	2200      	movs	r2, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fc7b 	bl	8006224 <xQueueReceive>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f47f af57 	bne.w	80077e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	3730      	adds	r7, #48	; 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20001958 	.word	0x20001958

08007944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800794a:	e045      	b.n	80079d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800794c:	4b2c      	ldr	r3, [pc, #176]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007956:	4b2a      	ldr	r3, [pc, #168]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3304      	adds	r3, #4
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe f9c1 	bl	8005cec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d12e      	bne.n	80079d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4413      	add	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	429a      	cmp	r2, r3
 800798a:	d90e      	bls.n	80079aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007998:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe f96a 	bl	8005c7c <vListInsert>
 80079a8:	e016      	b.n	80079d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079aa:	2300      	movs	r3, #0
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	2300      	movs	r3, #0
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	2100      	movs	r1, #0
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff fd9d 	bl	80074f4 <xTimerGenericCommand>
 80079ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1b4      	bne.n	800794c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079e2:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <prvSwitchTimerLists+0xc0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <prvSwitchTimerLists+0xbc>)
 80079ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079f0:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <prvSwitchTimerLists+0xc0>)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	6013      	str	r3, [r2, #0]
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20001950 	.word	0x20001950
 8007a04:	20001954 	.word	0x20001954

08007a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a0e:	f000 f92d 	bl	8007c6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d120      	bne.n	8007a5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a1a:	4814      	ldr	r0, [pc, #80]	; (8007a6c <prvCheckForValidListAndQueue+0x64>)
 8007a1c:	f7fe f8e0 	bl	8005be0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a20:	4813      	ldr	r0, [pc, #76]	; (8007a70 <prvCheckForValidListAndQueue+0x68>)
 8007a22:	f7fe f8dd 	bl	8005be0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a26:	4b13      	ldr	r3, [pc, #76]	; (8007a74 <prvCheckForValidListAndQueue+0x6c>)
 8007a28:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <prvCheckForValidListAndQueue+0x64>)
 8007a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <prvCheckForValidListAndQueue+0x70>)
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <prvCheckForValidListAndQueue+0x68>)
 8007a30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a32:	2300      	movs	r3, #0
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <prvCheckForValidListAndQueue+0x74>)
 8007a38:	4a11      	ldr	r2, [pc, #68]	; (8007a80 <prvCheckForValidListAndQueue+0x78>)
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	200a      	movs	r0, #10
 8007a3e:	f7fe f9d9 	bl	8005df4 <xQueueGenericCreateStatic>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	490b      	ldr	r1, [pc, #44]	; (8007a84 <prvCheckForValidListAndQueue+0x7c>)
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fdc8 	bl	80065ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5c:	f000 f936 	bl	8007ccc <vPortExitCritical>
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20001958 	.word	0x20001958
 8007a6c:	20001928 	.word	0x20001928
 8007a70:	2000193c 	.word	0x2000193c
 8007a74:	20001950 	.word	0x20001950
 8007a78:	20001954 	.word	0x20001954
 8007a7c:	20001a04 	.word	0x20001a04
 8007a80:	20001964 	.word	0x20001964
 8007a84:	08008484 	.word	0x08008484

08007a88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ab8:	4a08      	ldr	r2, [pc, #32]	; (8007adc <pxPortInitialiseStack+0x54>)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b14      	subs	r3, #20
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b20      	subs	r3, #32
 8007ace:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr
 8007adc:	08007ae1 	.word	0x08007ae1

08007ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <prvTaskExitError+0x54>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d00a      	beq.n	8007b0a <prvTaskExitError+0x2a>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60fb      	str	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <prvTaskExitError+0x28>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	60bb      	str	r3, [r7, #8]
}
 8007b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b1e:	bf00      	nop
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0fc      	beq.n	8007b20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000050 	.word	0x20000050
	...

08007b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <pxCurrentTCBConst2>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b4a:	f380 8809 	msr	PSP, r0
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b5e:	4770      	bx	lr

08007b60 <pxCurrentTCBConst2>:
 8007b60:	20001428 	.word	0x20001428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b68:	4806      	ldr	r0, [pc, #24]	; (8007b84 <prvPortStartFirstTask+0x1c>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	b662      	cpsie	i
 8007b74:	b661      	cpsie	f
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	df00      	svc	0
 8007b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b82:	bf00      	nop
 8007b84:	e000ed08 	.word	0xe000ed08

08007b88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b8e:	4b32      	ldr	r3, [pc, #200]	; (8007c58 <xPortStartScheduler+0xd0>)
 8007b90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <xPortStartScheduler+0xd4>)
 8007bb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bb6:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bb8:	2207      	movs	r2, #7
 8007bba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bbc:	e009      	b.n	8007bd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bbe:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007bc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b80      	cmp	r3, #128	; 0x80
 8007bdc:	d0ef      	beq.n	8007bbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1c3 0307 	rsb	r3, r3, #7
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d00a      	beq.n	8007c00 <xPortStartScheduler+0x78>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60bb      	str	r3, [r7, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c00:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	4a16      	ldr	r2, [pc, #88]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c0a:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c12:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <xPortStartScheduler+0xd8>)
 8007c14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <xPortStartScheduler+0xdc>)
 8007c30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c36:	f000 f8b9 	bl	8007dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <xPortStartScheduler+0xe0>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c40:	f7ff ff92 	bl	8007b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c44:	f7ff f8ba 	bl	8006dbc <vTaskSwitchContext>
	prvTaskExitError();
 8007c48:	f7ff ff4a 	bl	8007ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	e000e400 	.word	0xe000e400
 8007c5c:	20001a54 	.word	0x20001a54
 8007c60:	20001a58 	.word	0x20001a58
 8007c64:	e000ed20 	.word	0xe000ed20
 8007c68:	20000050 	.word	0x20000050

08007c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	607b      	str	r3, [r7, #4]
}
 8007c84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c86:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <vPortEnterCritical+0x58>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <vPortEnterCritical+0x5c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	603b      	str	r3, [r7, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	e7fe      	b.n	8007cb6 <vPortEnterCritical+0x4a>
	}
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000050 	.word	0x20000050
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <vPortExitCritical+0x24>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	607b      	str	r3, [r7, #4]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cfa:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <vPortExitCritical+0x4c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <vPortExitCritical+0x42>
 8007d02:	2300      	movs	r3, #0
 8007d04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f383 8811 	msr	BASEPRI, r3
}
 8007d0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	20000050 	.word	0x20000050
 8007d1c:	00000000 	.word	0x00000000

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d30:	6010      	str	r0, [r2, #0]
 8007d32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d3a:	f380 8811 	msr	BASEPRI, r0
 8007d3e:	f7ff f83d 	bl	8006dbc <vTaskSwitchContext>
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d56:	f380 8809 	msr	PSP, r0
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	4770      	bx	lr

08007d60 <pxCurrentTCBConst>:
 8007d60:	20001428 	.word	0x20001428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop

08007d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d82:	f7fe ff7f 	bl	8006c84 <xTaskIncrementTick>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <SysTick_Handler+0x40>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortSetupTimerInterrupt+0x30>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <vPortSetupTimerInterrupt+0x34>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <vPortSetupTimerInterrupt+0x38>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a09      	ldr	r2, [pc, #36]	; (8007de8 <vPortSetupTimerInterrupt+0x3c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	099b      	lsrs	r3, r3, #6
 8007dc8:	4a08      	ldr	r2, [pc, #32]	; (8007dec <vPortSetupTimerInterrupt+0x40>)
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dce:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <vPortSetupTimerInterrupt+0x30>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	e000e010 	.word	0xe000e010
 8007de0:	e000e018 	.word	0xe000e018
 8007de4:	2000001c 	.word	0x2000001c
 8007de8:	10624dd3 	.word	0x10624dd3
 8007dec:	e000e014 	.word	0xe000e014

08007df0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007df6:	f3ef 8305 	mrs	r3, IPSR
 8007dfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d914      	bls.n	8007e2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e02:	4a16      	ldr	r2, [pc, #88]	; (8007e5c <vPortValidateInterruptPriority+0x6c>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e0c:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <vPortValidateInterruptPriority+0x70>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	7afa      	ldrb	r2, [r7, #11]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20a      	bcs.n	8007e2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	607b      	str	r3, [r7, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <vPortValidateInterruptPriority+0x74>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <vPortValidateInterruptPriority+0x78>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d90a      	bls.n	8007e52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	603b      	str	r3, [r7, #0]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <vPortValidateInterruptPriority+0x60>
	}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr
 8007e5c:	e000e3f0 	.word	0xe000e3f0
 8007e60:	20001a54 	.word	0x20001a54
 8007e64:	e000ed0c 	.word	0xe000ed0c
 8007e68:	20001a58 	.word	0x20001a58

08007e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e78:	f7fe fe58 	bl	8006b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e7c:	4b58      	ldr	r3, [pc, #352]	; (8007fe0 <pvPortMalloc+0x174>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e84:	f000 f910 	bl	80080a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e88:	4b56      	ldr	r3, [pc, #344]	; (8007fe4 <pvPortMalloc+0x178>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 808e 	bne.w	8007fb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01d      	beq.n	8007ed8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d014      	beq.n	8007ed8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <pvPortMalloc+0x6c>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	617b      	str	r3, [r7, #20]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d069      	beq.n	8007fb2 <pvPortMalloc+0x146>
 8007ede:	4b42      	ldr	r3, [pc, #264]	; (8007fe8 <pvPortMalloc+0x17c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d864      	bhi.n	8007fb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ee8:	4b40      	ldr	r3, [pc, #256]	; (8007fec <pvPortMalloc+0x180>)
 8007eea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eec:	4b3f      	ldr	r3, [pc, #252]	; (8007fec <pvPortMalloc+0x180>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef2:	e004      	b.n	8007efe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d903      	bls.n	8007f10 <pvPortMalloc+0xa4>
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f1      	bne.n	8007ef4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f10:	4b33      	ldr	r3, [pc, #204]	; (8007fe0 <pvPortMalloc+0x174>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d04b      	beq.n	8007fb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2208      	movs	r2, #8
 8007f20:	4413      	add	r3, r2
 8007f22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	2308      	movs	r3, #8
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d91f      	bls.n	8007f7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4413      	add	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <pvPortMalloc+0xf8>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	613b      	str	r3, [r7, #16]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	1ad2      	subs	r2, r2, r3
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f76:	69b8      	ldr	r0, [r7, #24]
 8007f78:	f000 f8f8 	bl	800816c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f7c:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <pvPortMalloc+0x17c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <pvPortMalloc+0x17c>)
 8007f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <pvPortMalloc+0x17c>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <pvPortMalloc+0x184>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d203      	bcs.n	8007f9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f96:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <pvPortMalloc+0x17c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <pvPortMalloc+0x184>)
 8007f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <pvPortMalloc+0x178>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fb2:	f7fe fdc9 	bl	8006b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <pvPortMalloc+0x16a>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <pvPortMalloc+0x168>
	return pvReturn;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3728      	adds	r7, #40	; 0x28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20002664 	.word	0x20002664
 8007fe4:	20002670 	.word	0x20002670
 8007fe8:	20002668 	.word	0x20002668
 8007fec:	2000265c 	.word	0x2000265c
 8007ff0:	2000266c 	.word	0x2000266c

08007ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d048      	beq.n	8008098 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008006:	2308      	movs	r3, #8
 8008008:	425b      	negs	r3, r3
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4413      	add	r3, r2
 800800e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <vPortFree+0xac>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4013      	ands	r3, r2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <vPortFree+0x44>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60fb      	str	r3, [r7, #12]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <vPortFree+0x62>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60bb      	str	r3, [r7, #8]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	4b11      	ldr	r3, [pc, #68]	; (80080a0 <vPortFree+0xac>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4013      	ands	r3, r2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d019      	beq.n	8008098 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d115      	bne.n	8008098 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <vPortFree+0xac>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	43db      	mvns	r3, r3
 8008076:	401a      	ands	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800807c:	f7fe fd56 	bl	8006b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <vPortFree+0xb0>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4413      	add	r3, r2
 800808a:	4a06      	ldr	r2, [pc, #24]	; (80080a4 <vPortFree+0xb0>)
 800808c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800808e:	6938      	ldr	r0, [r7, #16]
 8008090:	f000 f86c 	bl	800816c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008094:	f7fe fd58 	bl	8006b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008098:	bf00      	nop
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20002670 	.word	0x20002670
 80080a4:	20002668 	.word	0x20002668

080080a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080b4:	4b27      	ldr	r3, [pc, #156]	; (8008154 <prvHeapInit+0xac>)
 80080b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3307      	adds	r3, #7
 80080c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0307 	bic.w	r3, r3, #7
 80080ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	4a1f      	ldr	r2, [pc, #124]	; (8008154 <prvHeapInit+0xac>)
 80080d8:	4413      	add	r3, r2
 80080da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080e0:	4a1d      	ldr	r2, [pc, #116]	; (8008158 <prvHeapInit+0xb0>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080e6:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <prvHeapInit+0xb0>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080f4:	2208      	movs	r2, #8
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0307 	bic.w	r3, r3, #7
 8008102:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4a15      	ldr	r2, [pc, #84]	; (800815c <prvHeapInit+0xb4>)
 8008108:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800810a:	4b14      	ldr	r3, [pc, #80]	; (800815c <prvHeapInit+0xb4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <prvHeapInit+0xb4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	1ad2      	subs	r2, r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <prvHeapInit+0xb4>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4a0a      	ldr	r2, [pc, #40]	; (8008160 <prvHeapInit+0xb8>)
 8008136:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4a09      	ldr	r2, [pc, #36]	; (8008164 <prvHeapInit+0xbc>)
 800813e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <prvHeapInit+0xc0>)
 8008142:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008146:	601a      	str	r2, [r3, #0]
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20001a5c 	.word	0x20001a5c
 8008158:	2000265c 	.word	0x2000265c
 800815c:	20002664 	.word	0x20002664
 8008160:	2000266c 	.word	0x2000266c
 8008164:	20002668 	.word	0x20002668
 8008168:	20002670 	.word	0x20002670

0800816c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008174:	4b27      	ldr	r3, [pc, #156]	; (8008214 <prvInsertBlockIntoFreeList+0xa8>)
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	e002      	b.n	8008180 <prvInsertBlockIntoFreeList+0x14>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d8f7      	bhi.n	800817a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d108      	bne.n	80081ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	441a      	add	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d118      	bne.n	80081f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <prvInsertBlockIntoFreeList+0xac>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d00d      	beq.n	80081ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	441a      	add	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e008      	b.n	80081fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <prvInsertBlockIntoFreeList+0xac>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e003      	b.n	80081fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d002      	beq.n	800820a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr
 8008214:	2000265c 	.word	0x2000265c
 8008218:	20002664 	.word	0x20002664

0800821c <memset>:
 800821c:	4603      	mov	r3, r0
 800821e:	4402      	add	r2, r0
 8008220:	4293      	cmp	r3, r2
 8008222:	d100      	bne.n	8008226 <memset+0xa>
 8008224:	4770      	bx	lr
 8008226:	f803 1b01 	strb.w	r1, [r3], #1
 800822a:	e7f9      	b.n	8008220 <memset+0x4>

0800822c <_reclaim_reent>:
 800822c:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <_reclaim_reent+0xa8>)
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4604      	mov	r4, r0
 8008234:	4283      	cmp	r3, r0
 8008236:	d04b      	beq.n	80082d0 <_reclaim_reent+0xa4>
 8008238:	69c3      	ldr	r3, [r0, #28]
 800823a:	b143      	cbz	r3, 800824e <_reclaim_reent+0x22>
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d144      	bne.n	80082cc <_reclaim_reent+0xa0>
 8008242:	69e3      	ldr	r3, [r4, #28]
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	b111      	cbz	r1, 800824e <_reclaim_reent+0x22>
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f879 	bl	8008340 <_free_r>
 800824e:	6961      	ldr	r1, [r4, #20]
 8008250:	b111      	cbz	r1, 8008258 <_reclaim_reent+0x2c>
 8008252:	4620      	mov	r0, r4
 8008254:	f000 f874 	bl	8008340 <_free_r>
 8008258:	69e1      	ldr	r1, [r4, #28]
 800825a:	b111      	cbz	r1, 8008262 <_reclaim_reent+0x36>
 800825c:	4620      	mov	r0, r4
 800825e:	f000 f86f 	bl	8008340 <_free_r>
 8008262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008264:	b111      	cbz	r1, 800826c <_reclaim_reent+0x40>
 8008266:	4620      	mov	r0, r4
 8008268:	f000 f86a 	bl	8008340 <_free_r>
 800826c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826e:	b111      	cbz	r1, 8008276 <_reclaim_reent+0x4a>
 8008270:	4620      	mov	r0, r4
 8008272:	f000 f865 	bl	8008340 <_free_r>
 8008276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008278:	b111      	cbz	r1, 8008280 <_reclaim_reent+0x54>
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f860 	bl	8008340 <_free_r>
 8008280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008282:	b111      	cbz	r1, 800828a <_reclaim_reent+0x5e>
 8008284:	4620      	mov	r0, r4
 8008286:	f000 f85b 	bl	8008340 <_free_r>
 800828a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800828c:	b111      	cbz	r1, 8008294 <_reclaim_reent+0x68>
 800828e:	4620      	mov	r0, r4
 8008290:	f000 f856 	bl	8008340 <_free_r>
 8008294:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008296:	b111      	cbz	r1, 800829e <_reclaim_reent+0x72>
 8008298:	4620      	mov	r0, r4
 800829a:	f000 f851 	bl	8008340 <_free_r>
 800829e:	6a23      	ldr	r3, [r4, #32]
 80082a0:	b1b3      	cbz	r3, 80082d0 <_reclaim_reent+0xa4>
 80082a2:	4620      	mov	r0, r4
 80082a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082a8:	4718      	bx	r3
 80082aa:	5949      	ldr	r1, [r1, r5]
 80082ac:	b941      	cbnz	r1, 80082c0 <_reclaim_reent+0x94>
 80082ae:	3504      	adds	r5, #4
 80082b0:	69e3      	ldr	r3, [r4, #28]
 80082b2:	2d80      	cmp	r5, #128	; 0x80
 80082b4:	68d9      	ldr	r1, [r3, #12]
 80082b6:	d1f8      	bne.n	80082aa <_reclaim_reent+0x7e>
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f841 	bl	8008340 <_free_r>
 80082be:	e7c0      	b.n	8008242 <_reclaim_reent+0x16>
 80082c0:	680e      	ldr	r6, [r1, #0]
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f83c 	bl	8008340 <_free_r>
 80082c8:	4631      	mov	r1, r6
 80082ca:	e7ef      	b.n	80082ac <_reclaim_reent+0x80>
 80082cc:	2500      	movs	r5, #0
 80082ce:	e7ef      	b.n	80082b0 <_reclaim_reent+0x84>
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	bf00      	nop
 80082d4:	200000a0 	.word	0x200000a0

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	2600      	movs	r6, #0
 80082dc:	4d0c      	ldr	r5, [pc, #48]	; (8008310 <__libc_init_array+0x38>)
 80082de:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082e0:	1b64      	subs	r4, r4, r5
 80082e2:	10a4      	asrs	r4, r4, #2
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	f000 f87e 	bl	80083e8 <_init>
 80082ec:	2600      	movs	r6, #0
 80082ee:	4d0a      	ldr	r5, [pc, #40]	; (8008318 <__libc_init_array+0x40>)
 80082f0:	4c0a      	ldr	r4, [pc, #40]	; (800831c <__libc_init_array+0x44>)
 80082f2:	1b64      	subs	r4, r4, r5
 80082f4:	10a4      	asrs	r4, r4, #2
 80082f6:	42a6      	cmp	r6, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008300:	4798      	blx	r3
 8008302:	3601      	adds	r6, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f855 3b04 	ldr.w	r3, [r5], #4
 800830a:	4798      	blx	r3
 800830c:	3601      	adds	r6, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	080084dc 	.word	0x080084dc
 8008314:	080084dc 	.word	0x080084dc
 8008318:	080084dc 	.word	0x080084dc
 800831c:	080084e0 	.word	0x080084e0

08008320 <__retarget_lock_acquire_recursive>:
 8008320:	4770      	bx	lr

08008322 <__retarget_lock_release_recursive>:
 8008322:	4770      	bx	lr

08008324 <memcpy>:
 8008324:	440a      	add	r2, r1
 8008326:	4291      	cmp	r1, r2
 8008328:	f100 33ff 	add.w	r3, r0, #4294967295
 800832c:	d100      	bne.n	8008330 <memcpy+0xc>
 800832e:	4770      	bx	lr
 8008330:	b510      	push	{r4, lr}
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	4291      	cmp	r1, r2
 8008338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800833c:	d1f9      	bne.n	8008332 <memcpy+0xe>
 800833e:	bd10      	pop	{r4, pc}

08008340 <_free_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4605      	mov	r5, r0
 8008344:	2900      	cmp	r1, #0
 8008346:	d040      	beq.n	80083ca <_free_r+0x8a>
 8008348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834c:	1f0c      	subs	r4, r1, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfb8      	it	lt
 8008352:	18e4      	addlt	r4, r4, r3
 8008354:	f000 f83c 	bl	80083d0 <__malloc_lock>
 8008358:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <_free_r+0x8c>)
 800835a:	6813      	ldr	r3, [r2, #0]
 800835c:	b933      	cbnz	r3, 800836c <_free_r+0x2c>
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	6014      	str	r4, [r2, #0]
 8008362:	4628      	mov	r0, r5
 8008364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008368:	f000 b838 	b.w	80083dc <__malloc_unlock>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d908      	bls.n	8008382 <_free_r+0x42>
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	1821      	adds	r1, r4, r0
 8008374:	428b      	cmp	r3, r1
 8008376:	bf01      	itttt	eq
 8008378:	6819      	ldreq	r1, [r3, #0]
 800837a:	685b      	ldreq	r3, [r3, #4]
 800837c:	1809      	addeq	r1, r1, r0
 800837e:	6021      	streq	r1, [r4, #0]
 8008380:	e7ed      	b.n	800835e <_free_r+0x1e>
 8008382:	461a      	mov	r2, r3
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	b10b      	cbz	r3, 800838c <_free_r+0x4c>
 8008388:	42a3      	cmp	r3, r4
 800838a:	d9fa      	bls.n	8008382 <_free_r+0x42>
 800838c:	6811      	ldr	r1, [r2, #0]
 800838e:	1850      	adds	r0, r2, r1
 8008390:	42a0      	cmp	r0, r4
 8008392:	d10b      	bne.n	80083ac <_free_r+0x6c>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	4401      	add	r1, r0
 8008398:	1850      	adds	r0, r2, r1
 800839a:	4283      	cmp	r3, r0
 800839c:	6011      	str	r1, [r2, #0]
 800839e:	d1e0      	bne.n	8008362 <_free_r+0x22>
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4408      	add	r0, r1
 80083a6:	6010      	str	r0, [r2, #0]
 80083a8:	6053      	str	r3, [r2, #4]
 80083aa:	e7da      	b.n	8008362 <_free_r+0x22>
 80083ac:	d902      	bls.n	80083b4 <_free_r+0x74>
 80083ae:	230c      	movs	r3, #12
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	e7d6      	b.n	8008362 <_free_r+0x22>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	1821      	adds	r1, r4, r0
 80083b8:	428b      	cmp	r3, r1
 80083ba:	bf01      	itttt	eq
 80083bc:	6819      	ldreq	r1, [r3, #0]
 80083be:	685b      	ldreq	r3, [r3, #4]
 80083c0:	1809      	addeq	r1, r1, r0
 80083c2:	6021      	streq	r1, [r4, #0]
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	6054      	str	r4, [r2, #4]
 80083c8:	e7cb      	b.n	8008362 <_free_r+0x22>
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200027b0 	.word	0x200027b0

080083d0 <__malloc_lock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	; (80083d8 <__malloc_lock+0x8>)
 80083d2:	f7ff bfa5 	b.w	8008320 <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	200027ac 	.word	0x200027ac

080083dc <__malloc_unlock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	; (80083e4 <__malloc_unlock+0x8>)
 80083de:	f7ff bfa0 	b.w	8008322 <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	200027ac 	.word	0x200027ac

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
