
GB_EtherCan_Software_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b0  0800a3b0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3b0  0800a3b0  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3b0  0800a3b0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800a3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024b0  200000bc  0800a474  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000256c  0800a474  0002256c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d860  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004983  00000000  00000000  0003d945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  000422c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7ed  00000000  00000000  00045600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d297  00000000  00000000  00061ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd52  00000000  00000000  0007f084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cdd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  0011ce28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000bc 	.word	0x200000bc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a048 	.word	0x0800a048

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c0 	.word	0x200000c0
 800014c:	0800a048 	.word	0x0800a048

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000178:	4b2d      	ldr	r3, [pc, #180]	; (8000230 <MX_CAN_Init+0xbc>)
 800017a:	4a2e      	ldr	r2, [pc, #184]	; (8000234 <MX_CAN_Init+0xc0>)
 800017c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 800017e:	4b2c      	ldr	r3, [pc, #176]	; (8000230 <MX_CAN_Init+0xbc>)
 8000180:	2224      	movs	r2, #36	; 0x24
 8000182:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000184:	4b2a      	ldr	r3, [pc, #168]	; (8000230 <MX_CAN_Init+0xbc>)
 8000186:	2200      	movs	r2, #0
 8000188:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800018a:	4b29      	ldr	r3, [pc, #164]	; (8000230 <MX_CAN_Init+0xbc>)
 800018c:	2200      	movs	r2, #0
 800018e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000190:	4b27      	ldr	r3, [pc, #156]	; (8000230 <MX_CAN_Init+0xbc>)
 8000192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000196:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000198:	4b25      	ldr	r3, [pc, #148]	; (8000230 <MX_CAN_Init+0xbc>)
 800019a:	2200      	movs	r2, #0
 800019c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800019e:	4b24      	ldr	r3, [pc, #144]	; (8000230 <MX_CAN_Init+0xbc>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80001a4:	4b22      	ldr	r3, [pc, #136]	; (8000230 <MX_CAN_Init+0xbc>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80001aa:	4b21      	ldr	r3, [pc, #132]	; (8000230 <MX_CAN_Init+0xbc>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80001b0:	4b1f      	ldr	r3, [pc, #124]	; (8000230 <MX_CAN_Init+0xbc>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001b6:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <MX_CAN_Init+0xbc>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80001bc:	4b1c      	ldr	r3, [pc, #112]	; (8000230 <MX_CAN_Init+0xbc>)
 80001be:	2200      	movs	r2, #0
 80001c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001c2:	481b      	ldr	r0, [pc, #108]	; (8000230 <MX_CAN_Init+0xbc>)
 80001c4:	f002 f912 	bl	80023ec <HAL_CAN_Init>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80001ce:	f000 fbb7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // Can Filter Config
  pTxHeader.DLC = 8; //give message with fix size
 80001d2:	4b19      	ldr	r3, [pc, #100]	; (8000238 <MX_CAN_Init+0xc4>)
 80001d4:	2208      	movs	r2, #8
 80001d6:	611a      	str	r2, [r3, #16]
  pTxHeader.IDE = CAN_ID_STD; //set identifier to standard
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <MX_CAN_Init+0xc4>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
  pTxHeader.RTR = CAN_RTR_DATA; //set data type to remote transmission request?
 80001de:	4b16      	ldr	r3, [pc, #88]	; (8000238 <MX_CAN_Init+0xc4>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	60da      	str	r2, [r3, #12]
  pTxHeader.StdId = 0x301; //define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <MX_CAN_Init+0xc4>)
 80001e6:	f240 3201 	movw	r2, #769	; 0x301
 80001ea:	601a      	str	r2, [r3, #0]

  //filter one (stack light blink)

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //set fifo assignment
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <MX_CAN_Init+0xc8>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	611a      	str	r2, [r3, #16]
  // sFilterConfig.FilterIdHigh = 0x245 << 5; //the ID that the filter looks for (switch this for the other microcontroller)
  sFilterConfig.FilterIdHigh = 0;
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_CAN_Init+0xc8>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_CAN_Init+0xc8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_CAN_Init+0xc8>)
 8000200:	2200      	movs	r2, #0
 8000202:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <MX_CAN_Init+0xc8>)
 8000206:	2200      	movs	r2, #0
 8000208:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_CAN_Init+0xc8>)
 800020c:	2201      	movs	r2, #1
 800020e:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <MX_CAN_Init+0xc8>)
 8000212:	2201      	movs	r2, #1
 8000214:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configure CAN filter
 8000216:	4909      	ldr	r1, [pc, #36]	; (800023c <MX_CAN_Init+0xc8>)
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <MX_CAN_Init+0xbc>)
 800021a:	f002 f9e2 	bl	80025e2 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //start CAN
 800021e:	4804      	ldr	r0, [pc, #16]	; (8000230 <MX_CAN_Init+0xbc>)
 8000220:	f002 faa8 	bl	8002774 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000224:	2102      	movs	r1, #2
 8000226:	4802      	ldr	r0, [pc, #8]	; (8000230 <MX_CAN_Init+0xbc>)
 8000228:	f002 fbc2 	bl	80029b0 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000124 	.word	0x20000124
 8000234:	40006400 	.word	0x40006400
 8000238:	200000d8 	.word	0x200000d8
 800023c:	200000f0 	.word	0x200000f0

08000240 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a28      	ldr	r2, [pc, #160]	; (80002fc <HAL_CAN_MspInit+0xbc>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d149      	bne.n	80002f4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	4a26      	ldr	r2, [pc, #152]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 8000266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800026a:	61d3      	str	r3, [r2, #28]
 800026c:	4b24      	ldr	r3, [pc, #144]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 800026e:	69db      	ldr	r3, [r3, #28]
 8000270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b21      	ldr	r3, [pc, #132]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a20      	ldr	r2, [pc, #128]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <HAL_CAN_MspInit+0xc0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <HAL_CAN_MspInit+0xc4>)
 80002a6:	f003 f8c5 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002b0:	2302      	movs	r3, #2
 80002b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b4:	2303      	movs	r3, #3
 80002b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	4619      	mov	r1, r3
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <HAL_CAN_MspInit+0xc4>)
 80002c0:	f003 f8b8 	bl	8003434 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2105      	movs	r1, #5
 80002c8:	2014      	movs	r0, #20
 80002ca:	f002 fe78 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002ce:	2014      	movs	r0, #20
 80002d0:	f002 fe91 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2101      	movs	r1, #1
 80002d8:	2015      	movs	r0, #21
 80002da:	f002 fe70 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80002de:	2015      	movs	r0, #21
 80002e0:	f002 fe89 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2105      	movs	r1, #5
 80002e8:	2016      	movs	r0, #22
 80002ea:	f002 fe68 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80002ee:	2016      	movs	r0, #22
 80002f0:	f002 fe81 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40006400 	.word	0x40006400
 8000300:	40021000 	.word	0x40021000
 8000304:	40010800 	.word	0x40010800

08000308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_DMA_Init+0x48>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <MX_DMA_Init+0x48>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <MX_DMA_Init+0x48>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2105      	movs	r1, #5
 800032a:	200e      	movs	r0, #14
 800032c:	f002 fe47 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000330:	200e      	movs	r0, #14
 8000332:	f002 fe60 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	2105      	movs	r1, #5
 800033a:	200f      	movs	r0, #15
 800033c:	f002 fe3f 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000340:	200f      	movs	r0, #15
 8000342:	f002 fe58 	bl	8002ff6 <HAL_NVIC_EnableIRQ>

}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetHandler */
  ethernetHandlerHandle = osThreadNew(StartEthernetHandlerTask, NULL, &ethernetHandler_attributes);
 8000358:	4a08      	ldr	r2, [pc, #32]	; (800037c <MX_FREERTOS_Init+0x28>)
 800035a:	2100      	movs	r1, #0
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <MX_FREERTOS_Init+0x2c>)
 800035e:	f005 faa3 	bl	80058a8 <osThreadNew>
 8000362:	4603      	mov	r3, r0
 8000364:	4a07      	ldr	r2, [pc, #28]	; (8000384 <MX_FREERTOS_Init+0x30>)
 8000366:	6013      	str	r3, [r2, #0]

  /* creation of canIRQHandler */
  canIRQHandlerHandle = osThreadNew(StartCanIRQHandlerTask, NULL, &canIRQHandler_attributes);
 8000368:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MX_FREERTOS_Init+0x34>)
 800036a:	2100      	movs	r1, #0
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <MX_FREERTOS_Init+0x38>)
 800036e:	f005 fa9b 	bl	80058a8 <osThreadNew>
 8000372:	4603      	mov	r3, r0
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <MX_FREERTOS_Init+0x3c>)
 8000376:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	0800a0ec 	.word	0x0800a0ec
 8000380:	08000395 	.word	0x08000395
 8000384:	2000094c 	.word	0x2000094c
 8000388:	0800a110 	.word	0x0800a110
 800038c:	080003b9 	.word	0x080003b9
 8000390:	20000950 	.word	0x20000950

08000394 <StartEthernetHandlerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernetHandlerTask */
void StartEthernetHandlerTask(void *argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEthernetHandlerTask */
	Ethernet_Init();
 800039c:	f000 f920 	bl	80005e0 <Ethernet_Init>

  /* Infinite loop */
  for(;;)
  {
    UDP_Loop(SOCKET_NUMBER, gDATABUF, UDP_PORT);
 80003a0:	f64d 52e0 	movw	r2, #56800	; 0xdde0
 80003a4:	4903      	ldr	r1, [pc, #12]	; (80003b4 <StartEthernetHandlerTask+0x20>)
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 f956 	bl	8000658 <UDP_Loop>
    osDelay(100);
 80003ac:	2064      	movs	r0, #100	; 0x64
 80003ae:	f005 fb25 	bl	80059fc <osDelay>
    UDP_Loop(SOCKET_NUMBER, gDATABUF, UDP_PORT);
 80003b2:	e7f5      	b.n	80003a0 <StartEthernetHandlerTask+0xc>
 80003b4:	2000014c 	.word	0x2000014c

080003b8 <StartCanIRQHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanIRQHandlerTask */
void StartCanIRQHandlerTask(void *argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanIRQHandlerTask */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <StartCanIRQHandlerTask+0x1c>)
 80003c6:	f003 f9d1 	bl	800376c <HAL_GPIO_TogglePin>
  	osDelay(100);
 80003ca:	2064      	movs	r0, #100	; 0x64
 80003cc:	f005 fb16 	bl	80059fc <osDelay>
  	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 80003d0:	e7f6      	b.n	80003c0 <StartCanIRQHandlerTask+0x8>
 80003d2:	bf00      	nop
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	4b49      	ldr	r3, [pc, #292]	; (8000514 <MX_GPIO_Init+0x13c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a48      	ldr	r2, [pc, #288]	; (8000514 <MX_GPIO_Init+0x13c>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b46      	ldr	r3, [pc, #280]	; (8000514 <MX_GPIO_Init+0x13c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000404:	4b43      	ldr	r3, [pc, #268]	; (8000514 <MX_GPIO_Init+0x13c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a42      	ldr	r2, [pc, #264]	; (8000514 <MX_GPIO_Init+0x13c>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b40      	ldr	r3, [pc, #256]	; (8000514 <MX_GPIO_Init+0x13c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <MX_GPIO_Init+0x13c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a3c      	ldr	r2, [pc, #240]	; (8000514 <MX_GPIO_Init+0x13c>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <MX_GPIO_Init+0x13c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b37      	ldr	r3, [pc, #220]	; (8000514 <MX_GPIO_Init+0x13c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a36      	ldr	r2, [pc, #216]	; (8000514 <MX_GPIO_Init+0x13c>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <MX_GPIO_Init+0x13c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SCS_Pin|ETH_RST_Pin|LED_RX_Pin|LED_TX_Pin
 800044c:	2200      	movs	r2, #0
 800044e:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000452:	4831      	ldr	r0, [pc, #196]	; (8000518 <MX_GPIO_Init+0x140>)
 8000454:	f003 f972 	bl	800373c <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045e:	482f      	ldr	r0, [pc, #188]	; (800051c <MX_GPIO_Init+0x144>)
 8000460:	f003 f96c 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000464:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046a:	2303      	movs	r3, #3
 800046c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	482a      	ldr	r0, [pc, #168]	; (8000520 <MX_GPIO_Init+0x148>)
 8000476:	f002 ffdd 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800047a:	f248 031f 	movw	r3, #32799	; 0x801f
 800047e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	2303      	movs	r3, #3
 8000482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4824      	ldr	r0, [pc, #144]	; (800051c <MX_GPIO_Init+0x144>)
 800048c:	f002 ffd2 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_SCS_Pin|ETH_RST_Pin|LED_RX_Pin|LED_TX_Pin
 8000490:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000494:	613b      	str	r3, [r7, #16]
                          |LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	481b      	ldr	r0, [pc, #108]	; (8000518 <MX_GPIO_Init+0x140>)
 80004aa:	f002 ffc3 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 80004ae:	2304      	movs	r3, #4
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <MX_GPIO_Init+0x14c>)
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4815      	ldr	r0, [pc, #84]	; (8000518 <MX_GPIO_Init+0x140>)
 80004c2:	f002 ffb7 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4
 80004c6:	f640 73f8 	movw	r3, #4088	; 0xff8
 80004ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004cc:	2303      	movs	r3, #3
 80004ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4810      	ldr	r0, [pc, #64]	; (8000518 <MX_GPIO_Init+0x140>)
 80004d8:	f002 ffac 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80004dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <MX_GPIO_Init+0x144>)
 80004f6:	f002 ff9d 	bl	8003434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2105      	movs	r1, #5
 80004fe:	2008      	movs	r0, #8
 8000500:	f002 fd5d 	bl	8002fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000504:	2008      	movs	r0, #8
 8000506:	f002 fd76 	bl	8002ff6 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00
 800051c:	40010800 	.word	0x40010800
 8000520:	40011000 	.word	0x40011000
 8000524:	10210000 	.word	0x10210000

08000528 <W5500_Select>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W5500_Select(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SCS_GPIO_Port, SPI1_SCS_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <W5500_Select+0x14>)
 8000532:	f003 f903 	bl	800373c <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010c00 	.word	0x40010c00

08000540 <W5500_Unselect>:

void W5500_Unselect(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_SCS_GPIO_Port, SPI1_SCS_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <W5500_Unselect+0x14>)
 800054a:	f003 f8f7 	bl	800373c <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010c00 	.word	0x40010c00

08000558 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000564:	887a      	ldrh	r2, [r7, #2]
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <W5500_ReadBuff+0x24>)
 800056e:	f003 ff43 	bl	80043f8 <HAL_SPI_Receive>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200009d8 	.word	0x200009d8

08000580 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <W5500_WriteBuff+0x24>)
 8000596:	f003 fdf3 	bl	8004180 <HAL_SPI_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200009d8 	.word	0x200009d8

080005a8 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffd0 	bl	8000558 <W5500_ReadBuff>
	return byte;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffd5 	bl	8000580 <W5500_WriteBuff>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <Ethernet_Init>:

void Ethernet_Init() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2102      	movs	r1, #2
 80005ea:	4812      	ldr	r0, [pc, #72]	; (8000634 <Ethernet_Init+0x54>)
 80005ec:	f003 f8a6 	bl	800373c <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80005f0:	4911      	ldr	r1, [pc, #68]	; (8000638 <Ethernet_Init+0x58>)
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <Ethernet_Init+0x5c>)
 80005f4:	f001 fcce 	bl	8001f94 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80005f8:	4911      	ldr	r1, [pc, #68]	; (8000640 <Ethernet_Init+0x60>)
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <Ethernet_Init+0x64>)
 80005fc:	f001 fcee 	bl	8001fdc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000600:	4911      	ldr	r1, [pc, #68]	; (8000648 <Ethernet_Init+0x68>)
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <Ethernet_Init+0x6c>)
 8000604:	f001 fd16 	bl	8002034 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <Ethernet_Init+0x70>)
 800060a:	463b      	mov	r3, r7
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8000614:	463a      	mov	r2, r7
 8000616:	463b      	mov	r3, r7
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fd82 	bl	8002124 <wizchip_init>
	wizchip_setnetinfo(&gWIZNETINFO);
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <Ethernet_Init+0x74>)
 8000622:	f001 fe0b 	bl	800223c <wizchip_setnetinfo>
	wizchip_getnetinfo(&gWIZNETINFO);
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <Ethernet_Init+0x74>)
 8000628:	f001 fe48 	bl	80022bc <wizchip_getnetinfo>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40010c00 	.word	0x40010c00
 8000638:	08000541 	.word	0x08000541
 800063c:	08000529 	.word	0x08000529
 8000640:	080005c3 	.word	0x080005c3
 8000644:	080005a9 	.word	0x080005a9
 8000648:	08000581 	.word	0x08000581
 800064c:	08000559 	.word	0x08000559
 8000650:	0800a080 	.word	0x0800a080
 8000654:	20000004 	.word	0x20000004

08000658 <UDP_Loop>:

int32_t UDP_Loop(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	80bb      	strh	r3, [r7, #4]
	memset(&txJSON, '\0', txJSON_size);
 8000668:	2232      	movs	r2, #50	; 0x32
 800066a:	2100      	movs	r1, #0
 800066c:	486e      	ldr	r0, [pc, #440]	; (8000828 <UDP_Loop+0x1d0>)
 800066e:	f007 fe7a 	bl	8008366 <memset>
	memset(&rxJSON, '\0', rxJSON_size);
 8000672:	2232      	movs	r2, #50	; 0x32
 8000674:	2100      	movs	r1, #0
 8000676:	486d      	ldr	r0, [pc, #436]	; (800082c <UDP_Loop+0x1d4>)
 8000678:	f007 fe75 	bl	8008366 <memset>
	int32_t ret;
	uint16_t size;
	uint16_t destport;
	switch (getSn_SR(sn))
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	3301      	adds	r3, #1
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f939 	bl	8001900 <WIZCHIP_READ>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80af 	beq.w	80007f4 <UDP_Loop+0x19c>
 8000696:	2b22      	cmp	r3, #34	; 0x22
 8000698:	f040 80bb 	bne.w	8000812 <UDP_Loop+0x1ba>
	{
		case SOCK_UDP:
			if(!connection_is_established)
 800069c:	4b64      	ldr	r3, [pc, #400]	; (8000830 <UDP_Loop+0x1d8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11c      	bne.n	80006de <UDP_Loop+0x86>
			{
				memset(&txJSON, '\0', txJSON_size);
 80006a4:	2232      	movs	r2, #50	; 0x32
 80006a6:	2100      	movs	r1, #0
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <UDP_Loop+0x1d0>)
 80006aa:	f007 fe5c 	bl	8008366 <memset>
				sprintf((char *) txJSON, "{510,232,12345678}");
 80006ae:	4961      	ldr	r1, [pc, #388]	; (8000834 <UDP_Loop+0x1dc>)
 80006b0:	485d      	ldr	r0, [pc, #372]	; (8000828 <UDP_Loop+0x1d0>)
 80006b2:	f007 ff6f 	bl	8008594 <siprintf>
				ret = sendto(sn, txJSON, (strcspn((char *) txJSON, "}") + 1), destip, 56801);
 80006b6:	4960      	ldr	r1, [pc, #384]	; (8000838 <UDP_Loop+0x1e0>)
 80006b8:	485b      	ldr	r0, [pc, #364]	; (8000828 <UDP_Loop+0x1d0>)
 80006ba:	f007 fffa 	bl	80086b2 <strcspn>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	3301      	adds	r3, #1
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	79f8      	ldrb	r0, [r7, #7]
 80006c8:	f64d 53e1 	movw	r3, #56801	; 0xdde1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4b5b      	ldr	r3, [pc, #364]	; (800083c <UDP_Loop+0x1e4>)
 80006d0:	4955      	ldr	r1, [pc, #340]	; (8000828 <UDP_Loop+0x1d0>)
 80006d2:	f000 fabf 	bl	8000c54 <sendto>
 80006d6:	6178      	str	r0, [r7, #20]
				osDelay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f005 f98f 	bl	80059fc <osDelay>
			}
			if ((size = getSn_RX_RSR(sn)) > 0)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fab2 	bl	8001c4a <getSn_RX_RSR>
 80006e6:	4603      	mov	r3, r0
 80006e8:	83fb      	strh	r3, [r7, #30]
 80006ea:	8bfb      	ldrh	r3, [r7, #30]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f000 8092 	beq.w	8000816 <UDP_Loop+0x1be>
			{
				if (size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f8:	d902      	bls.n	8000700 <UDP_Loop+0xa8>
 80006fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fe:	83fb      	strh	r3, [r7, #30]
				ret = recvfrom(sn, buf, size, destip, (uint16_t*) &destport);
 8000700:	8bfa      	ldrh	r2, [r7, #30]
 8000702:	79f8      	ldrb	r0, [r7, #7]
 8000704:	f107 030e 	add.w	r3, r7, #14
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <UDP_Loop+0x1e4>)
 800070c:	6839      	ldr	r1, [r7, #0]
 800070e:	f000 fbd7 	bl	8000ec0 <recvfrom>
 8000712:	6178      	str	r0, [r7, #20]
				if (ret <= 0) return ret;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	2b00      	cmp	r3, #0
 8000718:	dc01      	bgt.n	800071e <UDP_Loop+0xc6>
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	e07f      	b.n	800081e <UDP_Loop+0x1c6>
				size = (uint16_t) ret;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	83fb      	strh	r3, [r7, #30]
				memcpy(&rxJSON, &buf[1], size-2);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	1c59      	adds	r1, r3, #1
 8000726:	8bfb      	ldrh	r3, [r7, #30]
 8000728:	3b02      	subs	r3, #2
 800072a:	461a      	mov	r2, r3
 800072c:	483f      	ldr	r0, [pc, #252]	; (800082c <UDP_Loop+0x1d4>)
 800072e:	f007 fe0c 	bl	800834a <memcpy>
				char *token = strtok((char *) rxJSON, ",");
 8000732:	4943      	ldr	r1, [pc, #268]	; (8000840 <UDP_Loop+0x1e8>)
 8000734:	483d      	ldr	r0, [pc, #244]	; (800082c <UDP_Loop+0x1d4>)
 8000736:	f007 ffcd 	bl	80086d4 <strtok>
 800073a:	6138      	str	r0, [r7, #16]
				if(strcmp(token, "007") == 0)
 800073c:	4941      	ldr	r1, [pc, #260]	; (8000844 <UDP_Loop+0x1ec>)
 800073e:	6938      	ldr	r0, [r7, #16]
 8000740:	f7ff fd06 	bl	8000150 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d14d      	bne.n	80007e6 <UDP_Loop+0x18e>
				{
					token = strtok(NULL, ",");
 800074a:	493d      	ldr	r1, [pc, #244]	; (8000840 <UDP_Loop+0x1e8>)
 800074c:	2000      	movs	r0, #0
 800074e:	f007 ffc1 	bl	80086d4 <strtok>
 8000752:	6138      	str	r0, [r7, #16]
					if(strcmp(token, "232") == 0)
 8000754:	493c      	ldr	r1, [pc, #240]	; (8000848 <UDP_Loop+0x1f0>)
 8000756:	6938      	ldr	r0, [r7, #16]
 8000758:	f7ff fcfa 	bl	8000150 <strcmp>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d141      	bne.n	80007e6 <UDP_Loop+0x18e>
					{
						token = strtok(NULL, ",");
 8000762:	4937      	ldr	r1, [pc, #220]	; (8000840 <UDP_Loop+0x1e8>)
 8000764:	2000      	movs	r0, #0
 8000766:	f007 ffb5 	bl	80086d4 <strtok>
 800076a:	6138      	str	r0, [r7, #16]
						if(strcmp(token, "001") == 0)
 800076c:	4937      	ldr	r1, [pc, #220]	; (800084c <UDP_Loop+0x1f4>)
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	f7ff fcee 	bl	8000150 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d135      	bne.n	80007e6 <UDP_Loop+0x18e>
						{
							token = strtok(NULL, ",");
 800077a:	4931      	ldr	r1, [pc, #196]	; (8000840 <UDP_Loop+0x1e8>)
 800077c:	2000      	movs	r0, #0
 800077e:	f007 ffa9 	bl	80086d4 <strtok>
 8000782:	6138      	str	r0, [r7, #16]
							pTxHeader.StdId = (int)strtol(token, NULL, 16);
 8000784:	2210      	movs	r2, #16
 8000786:	2100      	movs	r1, #0
 8000788:	6938      	ldr	r0, [r7, #16]
 800078a:	f008 f87d 	bl	8008888 <strtol>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <UDP_Loop+0x1f8>)
 8000794:	601a      	str	r2, [r3, #0]
							token = strtok(NULL, ",");
 8000796:	492a      	ldr	r1, [pc, #168]	; (8000840 <UDP_Loop+0x1e8>)
 8000798:	2000      	movs	r0, #0
 800079a:	f007 ff9b 	bl	80086d4 <strtok>
 800079e:	6138      	str	r0, [r7, #16]
							pTxHeader.DLC = atoi(token);
 80007a0:	6938      	ldr	r0, [r7, #16]
 80007a2:	f007 fcab 	bl	80080fc <atoi>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <UDP_Loop+0x1f8>)
 80007ac:	611a      	str	r2, [r3, #16]
							token = strtok(NULL, ",");
 80007ae:	4924      	ldr	r1, [pc, #144]	; (8000840 <UDP_Loop+0x1e8>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f007 ff8f 	bl	80086d4 <strtok>
 80007b6:	6138      	str	r0, [r7, #16]
							for (int i = 0; i < pTxHeader.DLC; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	e00e      	b.n	80007dc <UDP_Loop+0x184>
							{
								sscanf(token + 2*i, "%02x", (unsigned int *)&CanSendArray[i]);
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	461a      	mov	r2, r3
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	1898      	adds	r0, r3, r2
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <UDP_Loop+0x1fc>)
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	4921      	ldr	r1, [pc, #132]	; (8000858 <UDP_Loop+0x200>)
 80007d2:	f007 feff 	bl	80085d4 <siscanf>
							for (int i = 0; i < pTxHeader.DLC; i++)
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	3301      	adds	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <UDP_Loop+0x1f8>)
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d8eb      	bhi.n	80007be <UDP_Loop+0x166>
							}
						}
					}
				}
				HAL_CAN_AddTxMessage(&hcan, &pTxHeader, CanSendArray, &TxMailbox);
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <UDP_Loop+0x204>)
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <UDP_Loop+0x1fc>)
 80007ea:	4919      	ldr	r1, [pc, #100]	; (8000850 <UDP_Loop+0x1f8>)
 80007ec:	481c      	ldr	r0, [pc, #112]	; (8000860 <UDP_Loop+0x208>)
 80007ee:	f002 f805 	bl	80027fc <HAL_CAN_AddTxMessage>
			}
			break;
 80007f2:	e010      	b.n	8000816 <UDP_Loop+0x1be>
		case SOCK_CLOSED:
			if((ret = socket(sn, Sn_MR_UDP, PORT_UDPS, 0x01)) != sn) return ret;
 80007f4:	79f8      	ldrb	r0, [r7, #7]
 80007f6:	2301      	movs	r3, #1
 80007f8:	f64d 52e0 	movw	r2, #56800	; 0xdde0
 80007fc:	2102      	movs	r1, #2
 80007fe:	f000 f8a5 	bl	800094c <socket>
 8000802:	4603      	mov	r3, r0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	429a      	cmp	r2, r3
 800080c:	d005      	beq.n	800081a <UDP_Loop+0x1c2>
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	e005      	b.n	800081e <UDP_Loop+0x1c6>
			break;
		default:
			break;
 8000812:	bf00      	nop
 8000814:	e002      	b.n	800081c <UDP_Loop+0x1c4>
			break;
 8000816:	bf00      	nop
 8000818:	e000      	b.n	800081c <UDP_Loop+0x1c4>
			break;
 800081a:	bf00      	nop
	}
	return 1;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000988 	.word	0x20000988
 800082c:	20000954 	.word	0x20000954
 8000830:	200009ba 	.word	0x200009ba
 8000834:	0800a088 	.word	0x0800a088
 8000838:	0800a09c 	.word	0x0800a09c
 800083c:	20000000 	.word	0x20000000
 8000840:	0800a0a0 	.word	0x0800a0a0
 8000844:	0800a0a4 	.word	0x0800a0a4
 8000848:	0800a0a8 	.word	0x0800a0a8
 800084c:	0800a0ac 	.word	0x0800a0ac
 8000850:	200000d8 	.word	0x200000d8
 8000854:	2000011c 	.word	0x2000011c
 8000858:	0800a0b0 	.word	0x0800a0b0
 800085c:	20000118 	.word	0x20000118
 8000860:	20000124 	.word	0x20000124

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f001 fd8e 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f811 	bl	8000892 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f7ff fdb2 	bl	80003d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000874:	f000 fd12 	bl	800129c <MX_SPI1_Init>
  MX_DMA_Init();
 8000878:	f7ff fd46 	bl	8000308 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800087c:	f000 ff6c 	bl	8001758 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000880:	f7ff fc78 	bl	8000174 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000884:	f004 ffaa 	bl	80057dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000888:	f7ff fd64 	bl	8000354 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800088c:	f004 ffd8 	bl	8005840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x2c>

08000892 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b090      	sub	sp, #64	; 0x40
 8000896:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	2228      	movs	r2, #40	; 0x28
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 fd60 	bl	8008366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff82 	bl	80037e4 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008e6:	f000 f82b 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2102      	movs	r1, #2
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f9ef 	bl	8003ce8 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000910:	f000 f816 	bl	8000940 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3740      	adds	r7, #64	; 0x40
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f001 fd41 	bl	80023b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40000800 	.word	0x40000800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	4603      	mov	r3, r0
 8000960:	71bb      	strb	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b08      	cmp	r3, #8
 800096e:	d902      	bls.n	8000976 <socket+0x2a>
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	e0f2      	b.n	8000b5c <socket+0x210>
	switch(protocol)
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <socket+0x3c>
 800097c:	2b00      	cmp	r3, #0
 800097e:	dd11      	ble.n	80009a4 <socket+0x58>
 8000980:	3b02      	subs	r3, #2
 8000982:	2b02      	cmp	r3, #2
 8000984:	d80e      	bhi.n	80009a4 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000986:	e010      	b.n	80009aa <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2204      	movs	r2, #4
 800098e:	4619      	mov	r1, r3
 8000990:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000994:	f001 f84e 	bl	8001a34 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <socket+0x5e>
 800099e:	f06f 0302 	mvn.w	r3, #2
 80009a2:	e0db      	b.n	8000b5c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80009a4:	f06f 0304 	mvn.w	r3, #4
 80009a8:	e0d8      	b.n	8000b5c <socket+0x210>
         break;
 80009aa:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <socket+0x70>
 80009b6:	f06f 0305 	mvn.w	r3, #5
 80009ba:	e0cf      	b.n	8000b5c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d025      	beq.n	8000a0e <socket+0xc2>
	{
   	switch(protocol)
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d002      	beq.n	80009ce <socket+0x82>
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d008      	beq.n	80009de <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80009cc:	e024      	b.n	8000a18 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d11c      	bne.n	8000a12 <socket+0xc6>
 80009d8:	f06f 0305 	mvn.w	r3, #5
 80009dc:	e0be      	b.n	8000b5c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80009e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db02      	blt.n	80009f6 <socket+0xaa>
 80009f0:	f06f 0305 	mvn.w	r3, #5
 80009f4:	e0b2      	b.n	8000b5c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00a      	beq.n	8000a16 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db06      	blt.n	8000a16 <socket+0xca>
 8000a08:	f06f 0305 	mvn.w	r3, #5
 8000a0c:	e0a6      	b.n	8000b5c <socket+0x210>
   	}
   }
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <socket+0xcc>
   	      break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <socket+0xcc>
   	      break;
 8000a16:	bf00      	nop
	close(sn);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f8ac 	bl	8000b78 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	3301      	adds	r3, #1
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a2e:	f023 030f 	bic.w	r3, r3, #15
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f000 ffaa 	bl	8001998 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d110      	bne.n	8000a6c <socket+0x120>
	{
	   port = sock_any_port++;
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <socket+0x218>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	b291      	uxth	r1, r2
 8000a52:	4a44      	ldr	r2, [pc, #272]	; (8000b64 <socket+0x218>)
 8000a54:	8011      	strh	r1, [r2, #0]
 8000a56:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000a58:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <socket+0x218>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d103      	bne.n	8000a6c <socket+0x120>
 8000a64:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <socket+0x218>)
 8000a66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000a6a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	3301      	adds	r3, #1
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a78:	461a      	mov	r2, r3
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4619      	mov	r1, r3
 8000a84:	4610      	mov	r0, r2
 8000a86:	f000 ff87 	bl	8001998 <WIZCHIP_WRITE>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	3301      	adds	r3, #1
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a96:	461a      	mov	r2, r3
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	f000 ff7a 	bl	8001998 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ff70 	bl	8001998 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ab8:	bf00      	nop
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	3301      	adds	r3, #1
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ff1a 	bl	8001900 <WIZCHIP_READ>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f3      	bne.n	8000aba <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <socket+0x21c>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <socket+0x21c>)
 8000aee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	f003 0201 	and.w	r2, r3, #1
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <socket+0x21c>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <socket+0x21c>)
 8000b0c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2201      	movs	r2, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <socket+0x220>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4013      	ands	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <socket+0x220>)
 8000b2a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <socket+0x224>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <socket+0x228>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000b3e:	bf00      	nop
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	3301      	adds	r3, #1
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fed7 	bl	8001900 <WIZCHIP_READ>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f3      	beq.n	8000b40 <socket+0x1f4>
   return (int8_t)sn;
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	2000001c 	.word	0x2000001c
 8000b68:	200009bc 	.word	0x200009bc
 8000b6c:	200009be 	.word	0x200009be
 8000b70:	200009c0 	.word	0x200009c0
 8000b74:	200009d0 	.word	0x200009d0

08000b78 <close>:

int8_t close(uint8_t sn)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d902      	bls.n	8000b8e <close+0x16>
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	e055      	b.n	8000c3a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	3301      	adds	r3, #1
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fefb 	bl	8001998 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000ba2:	bf00      	nop
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3301      	adds	r3, #1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fea5 	bl	8001900 <WIZCHIP_READ>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f3      	bne.n	8000ba4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc8:	211f      	movs	r1, #31
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fee4 	bl	8001998 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <close+0xcc>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <close+0xcc>)
 8000bec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <close+0xd0>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4013      	ands	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <close+0xd0>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <close+0xd4>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <close+0xd8>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000c1e:	bf00      	nop
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	3301      	adds	r3, #1
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fe67 	bl	8001900 <WIZCHIP_READ>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f3      	bne.n	8000c20 <close+0xa8>
	return SOCK_OK;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200009bc 	.word	0x200009bc
 8000c48:	200009be 	.word	0x200009be
 8000c4c:	200009c0 	.word	0x200009c0
 8000c50:	200009d0 	.word	0x200009d0

08000c54 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	4613      	mov	r3, r2
 8000c64:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d902      	bls.n	8000c7a <sendto+0x26>
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e11b      	b.n	8000eb2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	3301      	adds	r3, #1
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fe3c 	bl	8001900 <WIZCHIP_READ>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d902      	bls.n	8000c9a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000c94:	f06f 0304 	mvn.w	r3, #4
 8000c98:	e10b      	b.n	8000eb2 <sendto+0x25e>
         break;
 8000c9a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <sendto+0x54>
 8000ca2:	f06f 030d 	mvn.w	r3, #13
 8000ca6:	e104      	b.n	8000eb2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	3202      	adds	r2, #2
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3203      	adds	r2, #3
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10e      	bne.n	8000cfc <sendto+0xa8>
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fe0a 	bl	8001900 <WIZCHIP_READ>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d002      	beq.n	8000cfc <sendto+0xa8>
 8000cf6:	f06f 030b 	mvn.w	r3, #11
 8000cfa:	e0da      	b.n	8000eb2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8000cfc:	8c3b      	ldrh	r3, [r7, #32]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10e      	bne.n	8000d20 <sendto+0xcc>
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3301      	adds	r3, #1
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fdf8 	bl	8001900 <WIZCHIP_READ>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d002      	beq.n	8000d20 <sendto+0xcc>
 8000d1a:	f06f 030a 	mvn.w	r3, #10
 8000d1e:	e0c8      	b.n	8000eb2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	3301      	adds	r3, #1
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fde7 	bl	8001900 <WIZCHIP_READ>
 8000d32:	4603      	mov	r3, r0
 8000d34:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b42      	cmp	r3, #66	; 0x42
 8000d3a:	d008      	beq.n	8000d4e <sendto+0xfa>
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b22      	cmp	r3, #34	; 0x22
 8000d40:	d005      	beq.n	8000d4e <sendto+0xfa>
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
 8000d44:	2b32      	cmp	r3, #50	; 0x32
 8000d46:	d002      	beq.n	8000d4e <sendto+0xfa>
 8000d48:	f06f 0306 	mvn.w	r3, #6
 8000d4c:	e0b1      	b.n	8000eb2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	3301      	adds	r3, #1
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fec8 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	3301      	adds	r3, #1
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d70:	461a      	mov	r2, r3
 8000d72:	8c3b      	ldrh	r3, [r7, #32]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	f000 fe0b 	bl	8001998 <WIZCHIP_WRITE>
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	3301      	adds	r3, #1
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000d8e:	461a      	mov	r2, r3
 8000d90:	8c3b      	ldrh	r3, [r7, #32]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f000 fdfe 	bl	8001998 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	3301      	adds	r3, #1
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fda9 	bl	8001900 <WIZCHIP_READ>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000db6:	89ba      	ldrh	r2, [r7, #12]
 8000db8:	8abb      	ldrh	r3, [r7, #20]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d901      	bls.n	8000dc2 <sendto+0x16e>
 8000dbe:	8abb      	ldrh	r3, [r7, #20]
 8000dc0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fef5 	bl	8001bb4 <getSn_TX_FSR>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd90 	bl	8001900 <WIZCHIP_READ>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <sendto+0x198>
 8000de6:	f06f 0303 	mvn.w	r3, #3
 8000dea:	e062      	b.n	8000eb2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <sendto+0x268>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	fa42 f303 	asr.w	r3, r2, r3
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <sendto+0x1b8>
 8000e00:	89ba      	ldrh	r2, [r7, #12]
 8000e02:	8abb      	ldrh	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d901      	bls.n	8000e0c <sendto+0x1b8>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e052      	b.n	8000eb2 <sendto+0x25e>
      if(len <= freesize) break;
 8000e0c:	89ba      	ldrh	r2, [r7, #12]
 8000e0e:	8abb      	ldrh	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d900      	bls.n	8000e16 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8000e14:	e7d5      	b.n	8000dc2 <sendto+0x16e>
      if(len <= freesize) break;
 8000e16:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8000e18:	89ba      	ldrh	r2, [r7, #12]
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ff5e 	bl	8001ce0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	3301      	adds	r3, #1
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e30:	2120      	movs	r1, #32
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fdb0 	bl	8001998 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn))
 8000e38:	bf00      	nop
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	3301      	adds	r3, #1
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fd5a 	bl	8001900 <WIZCHIP_READ>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f3      	bne.n	8000e3a <sendto+0x1e6>
		;
   while(1)
   {
      tmp = getSn_IR(sn);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	3301      	adds	r3, #1
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fd4e 	bl	8001900 <WIZCHIP_READ>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00c      	beq.n	8000e90 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e82:	2110      	movs	r1, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd87 	bl	8001998 <WIZCHIP_WRITE>
         break;
 8000e8a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	e010      	b.n	8000eb2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0db      	beq.n	8000e52 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fd75 	bl	8001998 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8000eae:	f06f 030c 	mvn.w	r3, #12
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200009bc 	.word	0x200009bc

08000ec0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d902      	bls.n	8000ee2 <recvfrom+0x22>
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	e1d4      	b.n	800128c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fd08 	bl	8001900 <WIZCHIP_READ>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	777b      	strb	r3, [r7, #29]
 8000ef4:	7f7b      	ldrb	r3, [r7, #29]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b02      	subs	r3, #2
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d902      	bls.n	8000f06 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000f00:	f06f 0304 	mvn.w	r3, #4
 8000f04:	e1c2      	b.n	800128c <recvfrom+0x3cc>
         break;
 8000f06:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <recvfrom+0x54>
 8000f0e:	f06f 030d 	mvn.w	r3, #13
 8000f12:	e1bb      	b.n	800128c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	4a88      	ldr	r2, [pc, #544]	; (8001138 <recvfrom+0x278>)
 8000f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d128      	bne.n	8000f72 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fe91 	bl	8001c4a <getSn_RX_RSR>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	3301      	adds	r3, #1
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fce1 	bl	8001900 <WIZCHIP_READ>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <recvfrom+0x8a>
 8000f44:	f06f 0303 	mvn.w	r3, #3
 8000f48:	e1a0      	b.n	800128c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8000f4a:	4b7c      	ldr	r3, [pc, #496]	; (800113c <recvfrom+0x27c>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	fa42 f303 	asr.w	r3, r2, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <recvfrom+0xa8>
 8000f5e:	8bfb      	ldrh	r3, [r7, #30]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <recvfrom+0xa8>
 8000f64:	2300      	movs	r3, #0
 8000f66:	e191      	b.n	800128c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8000f68:	8bfb      	ldrh	r3, [r7, #30]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8000f6e:	e7d7      	b.n	8000f20 <recvfrom+0x60>
         if(pack_len != 0) break;
 8000f70:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d079      	beq.n	8001070 <recvfrom+0x1b0>
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	f300 8142 	bgt.w	8001206 <recvfrom+0x346>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d003      	beq.n	8000f8e <recvfrom+0xce>
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	f000 80dc 	beq.w	8001144 <recvfrom+0x284>
 8000f8c:	e13b      	b.n	8001206 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4a69      	ldr	r2, [pc, #420]	; (8001138 <recvfrom+0x278>)
 8000f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d152      	bne.n	8001040 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8000f9a:	f107 0114 	add.w	r1, r7, #20
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fef8 	bl	8001d98 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	3301      	adds	r3, #1
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fcee 	bl	8001998 <WIZCHIP_WRITE>
   			while(getSn_CR(sn))
 8000fbc:	bf00      	nop
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fc98 	bl	8001900 <WIZCHIP_READ>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f3      	bne.n	8000fbe <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8000fd6:	7d3a      	ldrb	r2, [r7, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	7d7a      	ldrb	r2, [r7, #21]
 8000fe2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	7dba      	ldrb	r2, [r7, #22]
 8000fea:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	7dfa      	ldrb	r2, [r7, #23]
 8000ff2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8000ff4:	7e3b      	ldrb	r3, [r7, #24]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b29a      	uxth	r2, r3
 8001004:	7e7b      	ldrb	r3, [r7, #25]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b29a      	uxth	r2, r3
 800100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8001010:	7eba      	ldrb	r2, [r7, #26]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	b291      	uxth	r1, r2
 8001016:	4a48      	ldr	r2, [pc, #288]	; (8001138 <recvfrom+0x278>)
 8001018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <recvfrom+0x278>)
 8001020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b299      	uxth	r1, r3
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	b29a      	uxth	r2, r3
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	440a      	add	r2, r1
 8001030:	b291      	uxth	r1, r2
 8001032:	4a41      	ldr	r2, [pc, #260]	; (8001138 <recvfrom+0x278>)
 8001034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4a41      	ldr	r2, [pc, #260]	; (8001140 <recvfrom+0x280>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <recvfrom+0x278>)
 8001044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001048:	89ba      	ldrh	r2, [r7, #12]
 800104a:	429a      	cmp	r2, r3
 800104c:	d202      	bcs.n	8001054 <recvfrom+0x194>
 800104e:	89bb      	ldrh	r3, [r7, #12]
 8001050:	83fb      	strh	r3, [r7, #30]
 8001052:	e004      	b.n	800105e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4a38      	ldr	r2, [pc, #224]	; (8001138 <recvfrom+0x278>)
 8001058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800105e:	8bfb      	ldrh	r3, [r7, #30]
 8001060:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8001062:	8bfa      	ldrh	r2, [r7, #30]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fe95 	bl	8001d98 <wiz_recv_data>
			break;
 800106e:	e0d6      	b.n	800121e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4a31      	ldr	r2, [pc, #196]	; (8001138 <recvfrom+0x278>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d146      	bne.n	800110a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800107c:	f107 0114 	add.w	r1, r7, #20
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2202      	movs	r2, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fe87 	bl	8001d98 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	3301      	adds	r3, #1
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fc7d 	bl	8001998 <WIZCHIP_WRITE>
   			while(getSn_CR(sn))
 800109e:	bf00      	nop
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	3301      	adds	r3, #1
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fc27 	bl	8001900 <WIZCHIP_READ>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f3      	bne.n	80010a0 <recvfrom+0x1e0>
					;
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80010b8:	7d3a      	ldrb	r2, [r7, #20]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b291      	uxth	r1, r2
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <recvfrom+0x278>)
 80010c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <recvfrom+0x278>)
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	7d7b      	ldrb	r3, [r7, #21]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3a02      	subs	r2, #2
 80010dc:	b291      	uxth	r1, r2
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <recvfrom+0x278>)
 80010e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <recvfrom+0x278>)
 80010e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ec:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d906      	bls.n	8001102 <recvfrom+0x242>
   			{
   			   close(sn);
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fd3e 	bl	8000b78 <close>
   			   return SOCKFATAL_PACKLEN;
 80010fc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8001100:	e0c4      	b.n	800128c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <recvfrom+0x280>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <recvfrom+0x278>)
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	89ba      	ldrh	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d202      	bcs.n	800111e <recvfrom+0x25e>
 8001118:	89bb      	ldrh	r3, [r7, #12]
 800111a:	83fb      	strh	r3, [r7, #30]
 800111c:	e004      	b.n	8001128 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <recvfrom+0x278>)
 8001122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001126:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fe32 	bl	8001d98 <wiz_recv_data>
		   break;
 8001134:	e073      	b.n	800121e <recvfrom+0x35e>
 8001136:	bf00      	nop
 8001138:	200009c0 	.word	0x200009c0
 800113c:	200009bc 	.word	0x200009bc
 8001140:	200009d0 	.word	0x200009d0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <recvfrom+0x3d4>)
 8001148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d144      	bne.n	80011da <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8001150:	f107 0114 	add.w	r1, r7, #20
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2206      	movs	r2, #6
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fe1d 	bl	8001d98 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	3301      	adds	r3, #1
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fc13 	bl	8001998 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001172:	bf00      	nop
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3301      	adds	r3, #1
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fbbd 	bl	8001900 <WIZCHIP_READ>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f3      	bne.n	8001174 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800118c:	7d3a      	ldrb	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	7d7a      	ldrb	r2, [r7, #21]
 8001198:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3302      	adds	r3, #2
 800119e:	7dba      	ldrb	r2, [r7, #22]
 80011a0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3303      	adds	r3, #3
 80011a6:	7dfa      	ldrb	r2, [r7, #23]
 80011a8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80011aa:	7e3a      	ldrb	r2, [r7, #24]
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	b291      	uxth	r1, r2
 80011b0:	4a38      	ldr	r2, [pc, #224]	; (8001294 <recvfrom+0x3d4>)
 80011b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	4a36      	ldr	r2, [pc, #216]	; (8001294 <recvfrom+0x3d4>)
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b299      	uxth	r1, r3
 80011c2:	7e7b      	ldrb	r3, [r7, #25]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	440a      	add	r2, r1
 80011ca:	b291      	uxth	r1, r2
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <recvfrom+0x3d4>)
 80011ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4a30      	ldr	r2, [pc, #192]	; (8001298 <recvfrom+0x3d8>)
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <recvfrom+0x3d4>)
 80011de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e2:	89ba      	ldrh	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d202      	bcs.n	80011ee <recvfrom+0x32e>
 80011e8:	89bb      	ldrh	r3, [r7, #12]
 80011ea:	83fb      	strh	r3, [r7, #30]
 80011ec:	e004      	b.n	80011f8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <recvfrom+0x3d4>)
 80011f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80011f8:	8bfa      	ldrh	r2, [r7, #30]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fdca 	bl	8001d98 <wiz_recv_data>
			break;
 8001204:	e00b      	b.n	800121e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001206:	8bfa      	ldrh	r2, [r7, #30]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fe1f 	bl	8001e50 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	491f      	ldr	r1, [pc, #124]	; (8001294 <recvfrom+0x3d4>)
 8001216:	8bfa      	ldrh	r2, [r7, #30]
 8001218:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800121c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	3301      	adds	r3, #1
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fbb3 	bl	8001998 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8001232:	bf00      	nop
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	3301      	adds	r3, #1
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fb5d 	bl	8001900 <WIZCHIP_READ>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f3      	bne.n	8001234 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <recvfrom+0x3d4>)
 8001250:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	8bfa      	ldrh	r2, [r7, #30]
 8001258:	1a8a      	subs	r2, r1, r2
 800125a:	b291      	uxth	r1, r2
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <recvfrom+0x3d4>)
 800125e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <recvfrom+0x3d4>)
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4a09      	ldr	r2, [pc, #36]	; (8001298 <recvfrom+0x3d8>)
 8001272:	5cd2      	ldrb	r2, [r2, r3]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	b2d1      	uxtb	r1, r2
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <recvfrom+0x3d8>)
 800127e:	54d1      	strb	r1, [r2, r3]
 8001280:	e003      	b.n	800128a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <recvfrom+0x3d8>)
 8001286:	2100      	movs	r1, #0
 8001288:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800128a:	8bfb      	ldrh	r3, [r7, #30]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200009c0 	.word	0x200009c0
 8001298:	200009d0 	.word	0x200009d0

0800129c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_SPI1_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <MX_SPI1_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_SPI1_Init+0x64>)
 80012c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_SPI1_Init+0x64>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_SPI1_Init+0x64>)
 80012e8:	220a      	movs	r2, #10
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_SPI1_Init+0x64>)
 80012ee:	f002 fec3 	bl	8004078 <HAL_SPI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012f8:	f7ff fb22 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200009d8 	.word	0x200009d8
 8001304:	40013000 	.word	0x40013000

08001308 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_SPI_MspInit+0x88>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d12f      	bne.n	8001388 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 800132e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_SPI_MspInit+0x8c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001358:	23a0      	movs	r3, #160	; 0xa0
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_SPI_MspInit+0x90>)
 800136c:	f002 f862 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_SPI_MspInit+0x90>)
 8001384:	f002 f856 	bl	8003434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40013000 	.word	0x40013000
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_MspInit+0x68>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_MspInit+0x68>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_MspInit+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_MspInit+0x68>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_MspInit+0x68>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x68>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210f      	movs	r1, #15
 80013d6:	f06f 0001 	mvn.w	r0, #1
 80013da:	f001 fdf0 	bl	8002fbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_MspInit+0x6c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_MspInit+0x6c>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001422:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <HAL_InitTick+0xe8>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a33      	ldr	r2, [pc, #204]	; (80014f4 <HAL_InitTick+0xe8>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_InitTick+0xe8>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800143a:	f107 0210 	add.w	r2, r7, #16
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fdc9 	bl	8003fdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001454:	f002 fd9a 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8001458:	6378      	str	r0, [r7, #52]	; 0x34
 800145a:	e004      	b.n	8001466 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145c:	f002 fd96 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8001460:	4603      	mov	r3, r0
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_InitTick+0xec>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	3b01      	subs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_InitTick+0xf0>)
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <HAL_InitTick+0xf4>)
 8001478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_InitTick+0xf0>)
 800147c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001480:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_InitTick+0xf0>)
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_InitTick+0xf0>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_InitTick+0xf0>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_InitTick+0xf0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <HAL_InitTick+0xf0>)
 800149c:	f003 fb58 	bl	8004b50 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d11b      	bne.n	80014e6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014ae:	4813      	ldr	r0, [pc, #76]	; (80014fc <HAL_InitTick+0xf0>)
 80014b0:	f003 fba6 	bl	8004c00 <HAL_TIM_Base_Start_IT>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d111      	bne.n	80014e6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014c2:	201e      	movs	r0, #30
 80014c4:	f001 fd97 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	d808      	bhi.n	80014e0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014ce:	2200      	movs	r2, #0
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	201e      	movs	r0, #30
 80014d4:	f001 fd73 	bl	8002fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0xf8>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e002      	b.n	80014e6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3738      	adds	r7, #56	; 0x38
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	431bde83 	.word	0x431bde83
 80014fc:	20000a30 	.word	0x20000a30
 8001500:	40000800 	.word	0x40000800
 8001504:	2000004c 	.word	0x2000004c

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ETH_INT_Pin);
 8001536:	2004      	movs	r0, #4
 8001538:	f002 f932 	bl	80037a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Channel4_IRQHandler+0x10>)
 8001546:	f001 fe6f 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000b04 	.word	0x20000b04

08001554 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Channel5_IRQHandler+0x10>)
 800155a:	f001 fe65 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000ac0 	.word	0x20000ac0

08001568 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800156e:	f001 fa44 	bl	80029fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000124 	.word	0x20000124

0800157c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <CAN1_RX1_IRQHandler+0x10>)
 8001582:	f001 fa3a 	bl	80029fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000124 	.word	0x20000124

08001590 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <CAN1_SCE_IRQHandler+0x10>)
 8001596:	f001 fa30 	bl	80029fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000124 	.word	0x20000124

080015a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM4_IRQHandler+0x10>)
 80015aa:	f003 fb7b 	bl	8004ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000a30 	.word	0x20000a30

080015b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART1_IRQHandler+0x10>)
 80015be:	f003 fd5f 	bl	8005080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000a7c 	.word	0x20000a7c

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <_kill>:

int _kill(int pid, int sig)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015e4:	f006 fd8e 	bl	8008104 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2216      	movs	r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
	return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_exit>:

void _exit (int status)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001602:	f04f 31ff 	mov.w	r1, #4294967295
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffe7 	bl	80015da <_kill>
	while (1) {}		/* Make sure we hang here */
 800160c:	e7fe      	b.n	800160c <_exit+0x12>

0800160e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e00a      	b.n	8001636 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001620:	f3af 8000 	nop.w
 8001624:	4601      	mov	r1, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	60ba      	str	r2, [r7, #8]
 800162c:	b2ca      	uxtb	r2, r1
 800162e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbf0      	blt.n	8001620 <_read+0x12>
	}

return len;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e009      	b.n	800166e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbf1      	blt.n	800165a <_write+0x12>
	}
	return len;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_close>:

int _close(int file)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <_isatty>:

int _isatty(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f006 fcf8 	bl	8008104 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20005000 	.word	0x20005000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000a78 	.word	0x20000a78
 8001748:	20002570 	.word	0x20002570

0800174c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_USART1_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART1_UART_Init+0x4c>)
 8001790:	f003 fc28 	bl	8004fe4 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f7ff f8d1 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000a7c 	.word	0x20000a7c
 80017a8:	40013800 	.word	0x40013800

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_UART_MspInit+0x138>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	f040 8086 	bne.w	80018da <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <HAL_UART_MspInit+0x13c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4836      	ldr	r0, [pc, #216]	; (80018ec <HAL_UART_MspInit+0x140>)
 8001814:	f001 fe0e 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	482f      	ldr	r0, [pc, #188]	; (80018ec <HAL_UART_MspInit+0x140>)
 800182e:	f001 fe01 	bl	8003434 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001834:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <HAL_UART_MspInit+0x148>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_UART_MspInit+0x144>)
 800183a:	2200      	movs	r2, #0
 800183c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_UART_MspInit+0x144>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001858:	2220      	movs	r2, #32
 800185a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_UART_MspInit+0x144>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001862:	4823      	ldr	r0, [pc, #140]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001864:	f001 fbd6 	bl	8003014 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800186e:	f7ff f867 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_UART_MspInit+0x144>)
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_UART_MspInit+0x144>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 8001880:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <HAL_UART_MspInit+0x150>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 8001886:	2210      	movs	r2, #16
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 80018b0:	f001 fbb0 	bl	8003014 <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80018ba:	f7ff f841 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_UART_MspInit+0x14c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2105      	movs	r1, #5
 80018ce:	2025      	movs	r0, #37	; 0x25
 80018d0:	f001 fb75 	bl	8002fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018d4:	2025      	movs	r0, #37	; 0x25
 80018d6:	f001 fb8e 	bl	8002ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	20000ac0 	.word	0x20000ac0
 80018f4:	40020058 	.word	0x40020058
 80018f8:	20000b04 	.word	0x20000b04
 80018fc:	40020044 	.word	0x40020044

08001900 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <WIZCHIP_READ+0x94>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <WIZCHIP_READ+0x94>)
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <WIZCHIP_READ+0x94>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <WIZCHIP_READ+0x24>
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <WIZCHIP_READ+0x94>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	2b00      	cmp	r3, #0
 8001922:	d114      	bne.n	800194e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <WIZCHIP_READ+0x94>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	0c12      	lsrs	r2, r2, #16
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	4610      	mov	r0, r2
 8001930:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <WIZCHIP_READ+0x94>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	0a12      	lsrs	r2, r2, #8
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	4610      	mov	r0, r2
 800193e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <WIZCHIP_READ+0x94>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	4610      	mov	r0, r2
 800194a:	4798      	blx	r3
 800194c:	e011      	b.n	8001972 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	b2db      	uxtb	r3, r3
 8001954:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b2db      	uxtb	r3, r3
 800195c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <WIZCHIP_READ+0x94>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f107 020c 	add.w	r2, r7, #12
 800196c:	2103      	movs	r1, #3
 800196e:	4610      	mov	r0, r2
 8001970:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <WIZCHIP_READ+0x94>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4798      	blx	r3
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <WIZCHIP_READ+0x94>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <WIZCHIP_READ+0x94>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4798      	blx	r3
   return ret;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000024 	.word	0x20000024

08001998 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d119      	bne.n	80019f4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	0c12      	lsrs	r2, r2, #16
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4610      	mov	r0, r2
 80019cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	0a12      	lsrs	r2, r2, #8
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	4610      	mov	r0, r2
 80019da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	4610      	mov	r0, r2
 80019e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	4610      	mov	r0, r2
 80019f0:	4798      	blx	r3
 80019f2:	e013      	b.n	8001a1c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	2104      	movs	r1, #4
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001a22:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <WIZCHIP_WRITE+0x98>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4798      	blx	r3
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000024 	.word	0x20000024

08001a34 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a4e:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <WIZCHIP_READ_BUF+0x2a>
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d126      	bne.n	8001aac <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	0c12      	lsrs	r2, r2, #16
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	0a12      	lsrs	r2, r2, #8
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	4610      	mov	r0, r2
 8001a78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4610      	mov	r0, r2
 8001a84:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	82fb      	strh	r3, [r7, #22]
 8001a8a:	e00a      	b.n	8001aa2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	8afa      	ldrh	r2, [r7, #22]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	188c      	adds	r4, r1, r2
 8001a96:	4798      	blx	r3
 8001a98:	4603      	mov	r3, r0
 8001a9a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001a9c:	8afb      	ldrh	r3, [r7, #22]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	82fb      	strh	r3, [r7, #22]
 8001aa2:	8afa      	ldrh	r2, [r7, #22]
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3f0      	bcc.n	8001a8c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001aaa:	e017      	b.n	8001adc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	2103      	movs	r1, #3
 8001acc:	4610      	mov	r0, r2
 8001ace:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ae2:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <WIZCHIP_READ_BUF+0xbc>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4798      	blx	r3
}
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd90      	pop	{r4, r7, pc}
 8001af0:	20000024 	.word	0x20000024

08001af4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d126      	bne.n	8001b6c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	0c12      	lsrs	r2, r2, #16
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	0a12      	lsrs	r2, r2, #8
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	4610      	mov	r0, r2
 8001b38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	4610      	mov	r0, r2
 8001b44:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	82fb      	strh	r3, [r7, #22]
 8001b4a:	e00a      	b.n	8001b62 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	8afa      	ldrh	r2, [r7, #22]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	440a      	add	r2, r1
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	82fb      	strh	r3, [r7, #22]
 8001b62:	8afa      	ldrh	r2, [r7, #22]
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d3f0      	bcc.n	8001b4c <WIZCHIP_WRITE_BUF+0x58>
 8001b6a:	e017      	b.n	8001b9c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f107 0210 	add.w	r2, r7, #16
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	4611      	mov	r1, r2
 8001b98:	68b8      	ldr	r0, [r7, #8]
 8001b9a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ba2:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4798      	blx	r3
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000024 	.word	0x20000024

08001bb4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	81fb      	strh	r3, [r7, #14]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	3301      	adds	r3, #1
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe94 	bl	8001900 <WIZCHIP_READ>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001bdc:	89bb      	ldrh	r3, [r7, #12]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b29c      	uxth	r4, r3
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3301      	adds	r3, #1
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe86 	bl	8001900 <WIZCHIP_READ>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4423      	add	r3, r4
 8001bfa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001bfc:	89bb      	ldrh	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01a      	beq.n	8001c38 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3301      	adds	r3, #1
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe76 	bl	8001900 <WIZCHIP_READ>
 8001c14:	4603      	mov	r3, r0
 8001c16:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001c18:	89fb      	ldrh	r3, [r7, #14]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b29c      	uxth	r4, r3
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3301      	adds	r3, #1
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe68 	bl	8001900 <WIZCHIP_READ>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4423      	add	r3, r4
 8001c36:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001c38:	89fa      	ldrh	r2, [r7, #14]
 8001c3a:	89bb      	ldrh	r3, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1c2      	bne.n	8001bc6 <getSn_TX_FSR+0x12>
   return val;
 8001c40:	89fb      	ldrh	r3, [r7, #14]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001c4a:	b590      	push	{r4, r7, lr}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	81fb      	strh	r3, [r7, #14]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3301      	adds	r3, #1
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe49 	bl	8001900 <WIZCHIP_READ>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001c72:	89bb      	ldrh	r3, [r7, #12]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b29c      	uxth	r4, r3
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe3b 	bl	8001900 <WIZCHIP_READ>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4423      	add	r3, r4
 8001c90:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001c92:	89bb      	ldrh	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01a      	beq.n	8001cce <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe2b 	bl	8001900 <WIZCHIP_READ>
 8001caa:	4603      	mov	r3, r0
 8001cac:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b29c      	uxth	r4, r3
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	3301      	adds	r3, #1
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fe1d 	bl	8001900 <WIZCHIP_READ>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4423      	add	r3, r4
 8001ccc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001cce:	89fa      	ldrh	r2, [r7, #14]
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d1c2      	bne.n	8001c5c <getSn_RX_RSR+0x12>
   return val;
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}

08001ce0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d048      	beq.n	8001d90 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3301      	adds	r3, #1
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fdf8 	bl	8001900 <WIZCHIP_READ>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b29c      	uxth	r4, r3
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fdeb 	bl	8001900 <WIZCHIP_READ>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4423      	add	r3, r4
 8001d30:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	3202      	adds	r2, #2
 8001d3c:	00d2      	lsls	r2, r2, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	461a      	mov	r2, r3
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	f7ff fed3 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001d4e:	89fa      	ldrh	r2, [r7, #14]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001d62:	461a      	mov	r2, r3
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff fe12 	bl	8001998 <WIZCHIP_WRITE>
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	3301      	adds	r3, #1
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001d80:	461a      	mov	r2, r3
 8001d82:	89fb      	ldrh	r3, [r7, #14]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f7ff fe05 	bl	8001998 <WIZCHIP_WRITE>
 8001d8e:	e000      	b.n	8001d92 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001d90:	bf00      	nop
}
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}

08001d98 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d048      	beq.n	8001e48 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fd9c 	bl	8001900 <WIZCHIP_READ>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b29c      	uxth	r4, r3
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fd8f 	bl	8001900 <WIZCHIP_READ>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4423      	add	r3, r4
 8001de8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	3203      	adds	r2, #3
 8001df4:	00d2      	lsls	r2, r2, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	68b8      	ldr	r0, [r7, #8]
 8001e02:	f7ff fe17 	bl	8001a34 <WIZCHIP_READ_BUF>
   ptr += len;
 8001e06:	89fa      	ldrh	r2, [r7, #14]
 8001e08:	88bb      	ldrh	r3, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	3301      	adds	r3, #1
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f7ff fdb6 	bl	8001998 <WIZCHIP_WRITE>
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3301      	adds	r3, #1
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001e38:	461a      	mov	r2, r3
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7ff fda9 	bl	8001998 <WIZCHIP_WRITE>
 8001e46:	e000      	b.n	8001e4a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001e48:	bf00      	nop
}
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}

08001e50 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3301      	adds	r3, #1
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fd45 	bl	8001900 <WIZCHIP_READ>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3301      	adds	r3, #1
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fd38 	bl	8001900 <WIZCHIP_READ>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4423      	add	r3, r4
 8001e96:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8001e98:	89fa      	ldrh	r2, [r7, #14]
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eac:	461a      	mov	r2, r3
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7ff fd6d 	bl	8001998 <WIZCHIP_WRITE>
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001eca:	461a      	mov	r2, r3
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7ff fd60 	bl	8001998 <WIZCHIP_WRITE>
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <reg_wizchip_cs_cbfunc+0x16>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <reg_wizchip_cs_cbfunc+0x3c>)
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <reg_wizchip_cs_cbfunc+0x40>)
 8001fae:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <reg_wizchip_cs_cbfunc+0x3c>)
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <reg_wizchip_cs_cbfunc+0x44>)
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	e006      	b.n	8001fc6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <reg_wizchip_cs_cbfunc+0x3c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <reg_wizchip_cs_cbfunc+0x3c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6153      	str	r3, [r2, #20]
   }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000024 	.word	0x20000024
 8001fd4:	08001ef9 	.word	0x08001ef9
 8001fd8:	08001f05 	.word	0x08001f05

08001fdc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001fe6:	bf00      	nop
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <reg_wizchip_spi_cbfunc+0x4c>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f9      	beq.n	8001fe8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <reg_wizchip_spi_cbfunc+0x24>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d106      	bne.n	800200e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <reg_wizchip_spi_cbfunc+0x4c>)
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <reg_wizchip_spi_cbfunc+0x50>)
 8002004:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <reg_wizchip_spi_cbfunc+0x4c>)
 8002008:	4a09      	ldr	r2, [pc, #36]	; (8002030 <reg_wizchip_spi_cbfunc+0x54>)
 800200a:	61da      	str	r2, [r3, #28]
 800200c:	e006      	b.n	800201c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <reg_wizchip_spi_cbfunc+0x4c>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <reg_wizchip_spi_cbfunc+0x4c>)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	61d3      	str	r3, [r2, #28]
   }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000024 	.word	0x20000024
 800202c:	08001f45 	.word	0x08001f45
 8002030:	08001f53 	.word	0x08001f53

08002034 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800203e:	bf00      	nop
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f9      	beq.n	8002040 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <reg_wizchip_spiburst_cbfunc+0x24>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <reg_wizchip_spiburst_cbfunc+0x50>)
 800205c:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
 8002064:	e006      	b.n	8002074 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002066:	4a06      	ldr	r2, [pc, #24]	; (8002080 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000024 	.word	0x20000024
 8002084:	08001f67 	.word	0x08001f67
 8002088:	08001f7d 	.word	0x08001f7d

0800208c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2206      	movs	r2, #6
 8002096:	4619      	mov	r1, r3
 8002098:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800209c:	f7ff fcca 	bl	8001a34 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2204      	movs	r2, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ac:	f7ff fcc2 	bl	8001a34 <WIZCHIP_READ_BUF>
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2204      	movs	r2, #4
 80020b6:	4619      	mov	r1, r3
 80020b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80020bc:	f7ff fcba 	bl	8001a34 <WIZCHIP_READ_BUF>
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2204      	movs	r2, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020cc:	f7ff fcb2 	bl	8001a34 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fc60 	bl	8001998 <WIZCHIP_WRITE>
   getMR(); // for delay
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fc11 	bl	8001900 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2206      	movs	r2, #6
 80020e2:	4619      	mov	r1, r3
 80020e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020e8:	f7ff fd04 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2204      	movs	r2, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020f8:	f7ff fcfc 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2204      	movs	r2, #4
 8002102:	4619      	mov	r1, r3
 8002104:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002108:	f7ff fcf4 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2204      	movs	r2, #4
 8002112:	4619      	mov	r1, r3
 8002114:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002118:	f7ff fcec 	bl	8001af4 <WIZCHIP_WRITE_BUF>
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002132:	f7ff ffab 	bl	800208c <wizchip_sw_reset>
   if(txsize)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03b      	beq.n	80021b4 <wizchip_init+0x90>
   {
      tmp = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e015      	b.n	8002172 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	4413      	add	r3, r2
 8002154:	b2db      	uxtb	r3, r3
 8002156:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8002158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800215c:	2b10      	cmp	r3, #16
 800215e:	dd02      	ble.n	8002166 <wizchip_init+0x42>
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e066      	b.n	8002234 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	2b07      	cmp	r3, #7
 8002178:	dde5      	ble.n	8002146 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e015      	b.n	80021ac <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8002180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	3301      	adds	r3, #1
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800218e:	4618      	mov	r0, r3
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff fbfc 	bl	8001998 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	dde5      	ble.n	8002180 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03b      	beq.n	8002232 <wizchip_init+0x10e>
   {
      tmp = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e015      	b.n	80021f0 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 80021c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	4413      	add	r3, r2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80021d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	dd02      	ble.n	80021e4 <wizchip_init+0xc0>
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e027      	b.n	8002234 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	dde5      	ble.n	80021c4 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e015      	b.n	800222a <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3301      	adds	r3, #1
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800220c:	4618      	mov	r0, r3
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f7ff fbbd 	bl	8001998 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	2b07      	cmp	r3, #7
 8002230:	dde5      	ble.n	80021fe <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2206      	movs	r2, #6
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800224e:	f7ff fc51 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	330e      	adds	r3, #14
 8002256:	2204      	movs	r2, #4
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800225e:	f7ff fc49 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	330a      	adds	r3, #10
 8002266:	2204      	movs	r2, #4
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800226e:	f7ff fc41 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3306      	adds	r3, #6
 8002276:	2204      	movs	r2, #4
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800227e:	f7ff fc39 	bl	8001af4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7c9a      	ldrb	r2, [r3, #18]
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <wizchip_setnetinfo+0x78>)
 8002288:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7cda      	ldrb	r2, [r3, #19]
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <wizchip_setnetinfo+0x78>)
 8002290:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7d1a      	ldrb	r2, [r3, #20]
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <wizchip_setnetinfo+0x78>)
 8002298:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7d5a      	ldrb	r2, [r3, #21]
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <wizchip_setnetinfo+0x78>)
 80022a0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7d9a      	ldrb	r2, [r3, #22]
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <wizchip_setnetinfo+0x7c>)
 80022a8:	701a      	strb	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000b48 	.word	0x20000b48
 80022b8:	20000b4c 	.word	0x20000b4c

080022bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2206      	movs	r2, #6
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80022ce:	f7ff fbb1 	bl	8001a34 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	330e      	adds	r3, #14
 80022d6:	2204      	movs	r2, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022de:	f7ff fba9 	bl	8001a34 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	330a      	adds	r3, #10
 80022e6:	2204      	movs	r2, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80022ee:	f7ff fba1 	bl	8001a34 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3306      	adds	r3, #6
 80022f6:	2204      	movs	r2, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80022fe:	f7ff fb99 	bl	8001a34 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <wizchip_getnetinfo+0x78>)
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <wizchip_getnetinfo+0x78>)
 800230c:	785a      	ldrb	r2, [r3, #1]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <wizchip_getnetinfo+0x78>)
 8002314:	789a      	ldrb	r2, [r3, #2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <wizchip_getnetinfo+0x78>)
 800231c:	78da      	ldrb	r2, [r3, #3]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <wizchip_getnetinfo+0x7c>)
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	759a      	strb	r2, [r3, #22]
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000b48 	.word	0x20000b48
 8002338:	20000b4c 	.word	0x20000b4c

0800233c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002354:	4c0a      	ldr	r4, [pc, #40]	; (8002380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002362:	f7ff f9f3 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002366:	f005 ffc9 	bl	80082fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236a:	f7fe fa7b 	bl	8000864 <main>
  bx lr
 800236e:	4770      	bx	lr
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002378:	0800a3b8 	.word	0x0800a3b8
  ldr r2, =_sbss
 800237c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8002380:	2000256c 	.word	0x2000256c

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x28>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_Init+0x28>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 fe05 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff f834 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7fe fffa 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x1c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_IncTick+0x20>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <HAL_IncTick+0x20>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000050 	.word	0x20000050
 80023d4:	20000b50 	.word	0x20000b50

080023d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <HAL_GetTick+0x10>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000b50 	.word	0x20000b50

080023ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0ed      	b.n	80025da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fd ff18 	bl	8000240 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff ffda 	bl	80023d8 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002426:	e012      	b.n	800244e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002428:	f7ff ffd6 	bl	80023d8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d90b      	bls.n	800244e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0c5      	b.n	80025da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0e5      	beq.n	8002428 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0202 	bic.w	r2, r2, #2
 800246a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7ff ffb4 	bl	80023d8 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002472:	e012      	b.n	800249a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002474:	f7ff ffb0 	bl	80023d8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b0a      	cmp	r3, #10
 8002480:	d90b      	bls.n	800249a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2205      	movs	r2, #5
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e09f      	b.n	80025da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e1b      	ldrb	r3, [r3, #24]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d108      	bne.n	80024c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e007      	b.n	80024d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e5b      	ldrb	r3, [r3, #25]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d108      	bne.n	80024ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e007      	b.n	80024fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e9b      	ldrb	r3, [r3, #26]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d108      	bne.n	8002516 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0220 	bic.w	r2, r2, #32
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7edb      	ldrb	r3, [r3, #27]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0210 	bic.w	r2, r2, #16
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e007      	b.n	8002550 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0210 	orr.w	r2, r2, #16
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7f1b      	ldrb	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0208 	orr.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f5b      	ldrb	r3, [r3, #29]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0204 	orr.w	r2, r2, #4
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d003      	beq.n	8002608 <HAL_CAN_ConfigFilter+0x26>
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b02      	cmp	r3, #2
 8002604:	f040 80aa 	bne.w	800275c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2201      	movs	r2, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d123      	bne.n	800268a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	401a      	ands	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002664:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3248      	adds	r2, #72	; 0x48
 800266a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800267e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	3348      	adds	r3, #72	; 0x48
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d122      	bne.n	80026d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3248      	adds	r2, #72	; 0x48
 80026b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	3348      	adds	r3, #72	; 0x48
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026f2:	e007      	b.n	8002704 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800271e:	e007      	b.n	8002730 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e006      	b.n	800276a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d12e      	bne.n	80027e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027a0:	f7ff fe1a 	bl	80023d8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027a6:	e012      	b.n	80027ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027a8:	f7ff fe16 	bl	80023d8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b0a      	cmp	r3, #10
 80027b4:	d90b      	bls.n	80027ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2205      	movs	r2, #5
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e012      	b.n	80027f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e006      	b.n	80027f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002810:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d003      	beq.n	8002828 <HAL_CAN_AddTxMessage+0x2c>
 8002820:	7ffb      	ldrb	r3, [r7, #31]
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 80b8 	bne.w	8002998 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80a0 	beq.w	8002988 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	0e1b      	lsrs	r3, r3, #24
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e09e      	b.n	80029a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002868:	2201      	movs	r2, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	409a      	lsls	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3318      	adds	r3, #24
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	440b      	add	r3, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e00f      	b.n	80028b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3318      	adds	r3, #24
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	440b      	add	r3, r1
 80028b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3318      	adds	r3, #24
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	7d1b      	ldrb	r3, [r3, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d111      	bne.n	80028f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3318      	adds	r3, #24
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	3304      	adds	r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	440b      	add	r3, r1
 80028f2:	3304      	adds	r3, #4
 80028f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3307      	adds	r3, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	061a      	lsls	r2, r3, #24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3306      	adds	r3, #6
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3305      	adds	r3, #5
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4313      	orrs	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	3204      	adds	r2, #4
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	4610      	mov	r0, r2
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	ea43 0200 	orr.w	r2, r3, r0
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800292c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4313      	orrs	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4610      	mov	r0, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6811      	ldr	r1, [r2, #0]
 8002954:	ea43 0200 	orr.w	r2, r3, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002962:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3318      	adds	r3, #24
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3318      	adds	r3, #24
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	440b      	add	r3, r1
 8002982:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e00e      	b.n	80029a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e006      	b.n	80029a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d002      	beq.n	80029ce <HAL_CAN_ActivateNotification+0x1e>
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d109      	bne.n	80029e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e006      	b.n	80029f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b08a      	sub	sp, #40	; 0x28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d07c      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d023      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f983 	bl	8002d68 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a62:	e016      	b.n	8002a92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
 8002a76:	e00c      	b.n	8002a92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	e002      	b.n	8002a92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f986 	bl	8002d9e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d024      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f962 	bl	8002d7a <HAL_CAN_TxMailbox1CompleteCallback>
 8002ab6:	e016      	b.n	8002ae6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	e00c      	b.n	8002ae6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e002      	b.n	8002ae6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f965 	bl	8002db0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d024      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f941 	bl	8002d8c <HAL_CAN_TxMailbox2CompleteCallback>
 8002b0a:	e016      	b.n	8002b3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e00c      	b.n	8002b3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e002      	b.n	8002b3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f944 	bl	8002dc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2208      	movs	r2, #8
 8002b78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f933 	bl	8002de6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f91b 	bl	8002dd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f913 	bl	8002e0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8fb 	bl	8002df8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8fc 	bl	8002e1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8f4 	bl	8002e2e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d07b      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d072      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d043      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d03e      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc8:	2b60      	cmp	r3, #96	; 0x60
 8002cca:	d02b      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x32a>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d82e      	bhi.n	8002d2e <HAL_CAN_IRQHandler+0x334>
 8002cd0:	2b50      	cmp	r3, #80	; 0x50
 8002cd2:	d022      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x320>
 8002cd4:	2b50      	cmp	r3, #80	; 0x50
 8002cd6:	d82a      	bhi.n	8002d2e <HAL_CAN_IRQHandler+0x334>
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d019      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x316>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d826      	bhi.n	8002d2e <HAL_CAN_IRQHandler+0x334>
 8002ce0:	2b30      	cmp	r3, #48	; 0x30
 8002ce2:	d010      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x30c>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d822      	bhi.n	8002d2e <HAL_CAN_IRQHandler+0x334>
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d002      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x2f8>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d005      	beq.n	8002cfc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cf0:	e01d      	b.n	8002d2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cfa:	e019      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f043 0310 	orr.w	r3, r3, #16
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d04:	e014      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d0e:	e00f      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d18:	e00a      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d22:	e005      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d2c:	e000      	b.n	8002d30 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2204      	movs	r2, #4
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f870 	bl	8002e40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
	...

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4906      	ldr	r1, [pc, #24]	; (8002eec <__NVIC_EnableIRQ+0x34>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff4f 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff64 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ffb2 	bl	8002f44 <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff81 	bl	8002ef0 <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff57 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e043      	b.n	80030b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_DMA_Init+0xa8>)
 8003032:	4413      	add	r3, r2
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_DMA_Init+0xac>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	009a      	lsls	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_DMA_Init+0xb0>)
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800305e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800306c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	bffdfff8 	.word	0xbffdfff8
 80030c0:	cccccccd 	.word	0xcccccccd
 80030c4:	40020000 	.word	0x40020000

080030c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d008      	beq.n	80030f0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e020      	b.n	8003132 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800314e:	2b02      	cmp	r3, #2
 8003150:	d005      	beq.n	800315e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e051      	b.n	8003202 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 020e 	bic.w	r2, r2, #14
 800316c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_DMA_Abort_IT+0xd0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d029      	beq.n	80031dc <HAL_DMA_Abort_IT+0xa0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_DMA_Abort_IT+0xd4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x9c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_DMA_Abort_IT+0xd8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01a      	beq.n	80031d2 <HAL_DMA_Abort_IT+0x96>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_DMA_Abort_IT+0xdc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d012      	beq.n	80031cc <HAL_DMA_Abort_IT+0x90>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	; (800321c <HAL_DMA_Abort_IT+0xe0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00a      	beq.n	80031c6 <HAL_DMA_Abort_IT+0x8a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_DMA_Abort_IT+0xe4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d102      	bne.n	80031c0 <HAL_DMA_Abort_IT+0x84>
 80031ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031be:	e00e      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c4:	e00b      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ca:	e008      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	e005      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d6:	e002      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031d8:	2310      	movs	r3, #16
 80031da:	e000      	b.n	80031de <HAL_DMA_Abort_IT+0xa2>
 80031dc:	2301      	movs	r3, #1
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_DMA_Abort_IT+0xe8>)
 80031e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
    } 
  }
  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40020008 	.word	0x40020008
 8003210:	4002001c 	.word	0x4002001c
 8003214:	40020030 	.word	0x40020030
 8003218:	40020044 	.word	0x40020044
 800321c:	40020058 	.word	0x40020058
 8003220:	4002006c 	.word	0x4002006c
 8003224:	40020000 	.word	0x40020000

08003228 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2204      	movs	r2, #4
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d04f      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xc8>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d04a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a66      	ldr	r2, [pc, #408]	; (8003418 <HAL_DMA_IRQHandler+0x1f0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d029      	beq.n	80032d6 <HAL_DMA_IRQHandler+0xae>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_DMA_IRQHandler+0x1f4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xaa>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a63      	ldr	r2, [pc, #396]	; (8003420 <HAL_DMA_IRQHandler+0x1f8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01a      	beq.n	80032cc <HAL_DMA_IRQHandler+0xa4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a62      	ldr	r2, [pc, #392]	; (8003424 <HAL_DMA_IRQHandler+0x1fc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d012      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x9e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a60      	ldr	r2, [pc, #384]	; (8003428 <HAL_DMA_IRQHandler+0x200>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00a      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x98>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5f      	ldr	r2, [pc, #380]	; (800342c <HAL_DMA_IRQHandler+0x204>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d102      	bne.n	80032ba <HAL_DMA_IRQHandler+0x92>
 80032b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b8:	e00e      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032be:	e00b      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032c4:	e008      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ca:	e005      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d0:	e002      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032d2:	2340      	movs	r3, #64	; 0x40
 80032d4:	e000      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb0>
 80032d6:	2304      	movs	r3, #4
 80032d8:	4a55      	ldr	r2, [pc, #340]	; (8003430 <HAL_DMA_IRQHandler+0x208>)
 80032da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8094 	beq.w	800340e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032ee:	e08e      	b.n	800340e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2202      	movs	r2, #2
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d056      	beq.n	80033ae <HAL_DMA_IRQHandler+0x186>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d051      	beq.n	80033ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020a 	bic.w	r2, r2, #10
 8003326:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a38      	ldr	r2, [pc, #224]	; (8003418 <HAL_DMA_IRQHandler+0x1f0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d029      	beq.n	800338e <HAL_DMA_IRQHandler+0x166>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <HAL_DMA_IRQHandler+0x1f4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_DMA_IRQHandler+0x162>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a35      	ldr	r2, [pc, #212]	; (8003420 <HAL_DMA_IRQHandler+0x1f8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01a      	beq.n	8003384 <HAL_DMA_IRQHandler+0x15c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a34      	ldr	r2, [pc, #208]	; (8003424 <HAL_DMA_IRQHandler+0x1fc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d012      	beq.n	800337e <HAL_DMA_IRQHandler+0x156>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a32      	ldr	r2, [pc, #200]	; (8003428 <HAL_DMA_IRQHandler+0x200>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x150>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a31      	ldr	r2, [pc, #196]	; (800342c <HAL_DMA_IRQHandler+0x204>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d102      	bne.n	8003372 <HAL_DMA_IRQHandler+0x14a>
 800336c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003370:	e00e      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 8003372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003376:	e00b      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 8003378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337c:	e008      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 800337e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003382:	e005      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 8003384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003388:	e002      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 800338a:	2320      	movs	r3, #32
 800338c:	e000      	b.n	8003390 <HAL_DMA_IRQHandler+0x168>
 800338e:	2302      	movs	r3, #2
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_DMA_IRQHandler+0x208>)
 8003392:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d034      	beq.n	800340e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033ac:	e02f      	b.n	800340e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2208      	movs	r2, #8
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d028      	beq.n	8003410 <HAL_DMA_IRQHandler+0x1e8>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 020e 	bic.w	r2, r2, #14
 80033d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
    }
  }
  return;
 800340e:	bf00      	nop
 8003410:	bf00      	nop
}
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020008 	.word	0x40020008
 800341c:	4002001c 	.word	0x4002001c
 8003420:	40020030 	.word	0x40020030
 8003424:	40020044 	.word	0x40020044
 8003428:	40020058 	.word	0x40020058
 800342c:	4002006c 	.word	0x4002006c
 8003430:	40020000 	.word	0x40020000

08003434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003434:	b480      	push	{r7}
 8003436:	b08b      	sub	sp, #44	; 0x2c
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003442:	2300      	movs	r3, #0
 8003444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003446:	e169      	b.n	800371c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003448:	2201      	movs	r2, #1
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	429a      	cmp	r2, r3
 8003462:	f040 8158 	bne.w	8003716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a9a      	ldr	r2, [pc, #616]	; (80036d4 <HAL_GPIO_Init+0x2a0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d05e      	beq.n	800352e <HAL_GPIO_Init+0xfa>
 8003470:	4a98      	ldr	r2, [pc, #608]	; (80036d4 <HAL_GPIO_Init+0x2a0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d875      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 8003476:	4a98      	ldr	r2, [pc, #608]	; (80036d8 <HAL_GPIO_Init+0x2a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d058      	beq.n	800352e <HAL_GPIO_Init+0xfa>
 800347c:	4a96      	ldr	r2, [pc, #600]	; (80036d8 <HAL_GPIO_Init+0x2a4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d86f      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 8003482:	4a96      	ldr	r2, [pc, #600]	; (80036dc <HAL_GPIO_Init+0x2a8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d052      	beq.n	800352e <HAL_GPIO_Init+0xfa>
 8003488:	4a94      	ldr	r2, [pc, #592]	; (80036dc <HAL_GPIO_Init+0x2a8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d869      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 800348e:	4a94      	ldr	r2, [pc, #592]	; (80036e0 <HAL_GPIO_Init+0x2ac>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04c      	beq.n	800352e <HAL_GPIO_Init+0xfa>
 8003494:	4a92      	ldr	r2, [pc, #584]	; (80036e0 <HAL_GPIO_Init+0x2ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d863      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 800349a:	4a92      	ldr	r2, [pc, #584]	; (80036e4 <HAL_GPIO_Init+0x2b0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d046      	beq.n	800352e <HAL_GPIO_Init+0xfa>
 80034a0:	4a90      	ldr	r2, [pc, #576]	; (80036e4 <HAL_GPIO_Init+0x2b0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d85d      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d82a      	bhi.n	8003500 <HAL_GPIO_Init+0xcc>
 80034aa:	2b12      	cmp	r3, #18
 80034ac:	d859      	bhi.n	8003562 <HAL_GPIO_Init+0x12e>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_GPIO_Init+0x80>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	0800352f 	.word	0x0800352f
 80034b8:	08003509 	.word	0x08003509
 80034bc:	0800351b 	.word	0x0800351b
 80034c0:	0800355d 	.word	0x0800355d
 80034c4:	08003563 	.word	0x08003563
 80034c8:	08003563 	.word	0x08003563
 80034cc:	08003563 	.word	0x08003563
 80034d0:	08003563 	.word	0x08003563
 80034d4:	08003563 	.word	0x08003563
 80034d8:	08003563 	.word	0x08003563
 80034dc:	08003563 	.word	0x08003563
 80034e0:	08003563 	.word	0x08003563
 80034e4:	08003563 	.word	0x08003563
 80034e8:	08003563 	.word	0x08003563
 80034ec:	08003563 	.word	0x08003563
 80034f0:	08003563 	.word	0x08003563
 80034f4:	08003563 	.word	0x08003563
 80034f8:	08003511 	.word	0x08003511
 80034fc:	08003525 	.word	0x08003525
 8003500:	4a79      	ldr	r2, [pc, #484]	; (80036e8 <HAL_GPIO_Init+0x2b4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003506:	e02c      	b.n	8003562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	623b      	str	r3, [r7, #32]
          break;
 800350e:	e029      	b.n	8003564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	3304      	adds	r3, #4
 8003516:	623b      	str	r3, [r7, #32]
          break;
 8003518:	e024      	b.n	8003564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	3308      	adds	r3, #8
 8003520:	623b      	str	r3, [r7, #32]
          break;
 8003522:	e01f      	b.n	8003564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	330c      	adds	r3, #12
 800352a:	623b      	str	r3, [r7, #32]
          break;
 800352c:	e01a      	b.n	8003564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003536:	2304      	movs	r3, #4
 8003538:	623b      	str	r3, [r7, #32]
          break;
 800353a:	e013      	b.n	8003564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003544:	2308      	movs	r3, #8
 8003546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	611a      	str	r2, [r3, #16]
          break;
 800354e:	e009      	b.n	8003564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003550:	2308      	movs	r3, #8
 8003552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	615a      	str	r2, [r3, #20]
          break;
 800355a:	e003      	b.n	8003564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
          break;
 8003560:	e000      	b.n	8003564 <HAL_GPIO_Init+0x130>
          break;
 8003562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2bff      	cmp	r3, #255	; 0xff
 8003568:	d801      	bhi.n	800356e <HAL_GPIO_Init+0x13a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	e001      	b.n	8003572 <HAL_GPIO_Init+0x13e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2bff      	cmp	r3, #255	; 0xff
 8003578:	d802      	bhi.n	8003580 <HAL_GPIO_Init+0x14c>
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	e002      	b.n	8003586 <HAL_GPIO_Init+0x152>
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	3b08      	subs	r3, #8
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	210f      	movs	r1, #15
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	6a39      	ldr	r1, [r7, #32]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80b1 	beq.w	8003716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035b4:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_GPIO_Init+0x2b8>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4a4c      	ldr	r2, [pc, #304]	; (80036ec <HAL_GPIO_Init+0x2b8>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6193      	str	r3, [r2, #24]
 80035c0:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_GPIO_Init+0x2b8>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035cc:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_GPIO_Init+0x2bc>)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a40      	ldr	r2, [pc, #256]	; (80036f4 <HAL_GPIO_Init+0x2c0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_GPIO_Init+0x1ec>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3f      	ldr	r2, [pc, #252]	; (80036f8 <HAL_GPIO_Init+0x2c4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00d      	beq.n	800361c <HAL_GPIO_Init+0x1e8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3e      	ldr	r2, [pc, #248]	; (80036fc <HAL_GPIO_Init+0x2c8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <HAL_GPIO_Init+0x1e4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <HAL_GPIO_Init+0x2cc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_GPIO_Init+0x1e0>
 8003610:	2303      	movs	r3, #3
 8003612:	e006      	b.n	8003622 <HAL_GPIO_Init+0x1ee>
 8003614:	2304      	movs	r3, #4
 8003616:	e004      	b.n	8003622 <HAL_GPIO_Init+0x1ee>
 8003618:	2302      	movs	r3, #2
 800361a:	e002      	b.n	8003622 <HAL_GPIO_Init+0x1ee>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_GPIO_Init+0x1ee>
 8003620:	2300      	movs	r3, #0
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	f002 0203 	and.w	r2, r2, #3
 8003628:	0092      	lsls	r2, r2, #2
 800362a:	4093      	lsls	r3, r2
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003632:	492f      	ldr	r1, [pc, #188]	; (80036f0 <HAL_GPIO_Init+0x2bc>)
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	492c      	ldr	r1, [pc, #176]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	e006      	b.n	8003668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	43db      	mvns	r3, r3
 8003662:	4928      	ldr	r1, [pc, #160]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 8003664:	4013      	ands	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003674:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4922      	ldr	r1, [pc, #136]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	e006      	b.n	8003690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	43db      	mvns	r3, r3
 800368a:	491e      	ldr	r1, [pc, #120]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 800368c:	4013      	ands	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4918      	ldr	r1, [pc, #96]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	4914      	ldr	r1, [pc, #80]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d021      	beq.n	8003708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_GPIO_Init+0x2d0>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
 80036d0:	e021      	b.n	8003716 <HAL_GPIO_Init+0x2e2>
 80036d2:	bf00      	nop
 80036d4:	10320000 	.word	0x10320000
 80036d8:	10310000 	.word	0x10310000
 80036dc:	10220000 	.word	0x10220000
 80036e0:	10210000 	.word	0x10210000
 80036e4:	10120000 	.word	0x10120000
 80036e8:	10110000 	.word	0x10110000
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40010800 	.word	0x40010800
 80036f8:	40010c00 	.word	0x40010c00
 80036fc:	40011000 	.word	0x40011000
 8003700:	40011400 	.word	0x40011400
 8003704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_GPIO_Init+0x304>)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	43db      	mvns	r3, r3
 8003710:	4909      	ldr	r1, [pc, #36]	; (8003738 <HAL_GPIO_Init+0x304>)
 8003712:	4013      	ands	r3, r2
 8003714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	3301      	adds	r3, #1
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	f47f ae8e 	bne.w	8003448 <HAL_GPIO_Init+0x14>
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	372c      	adds	r7, #44	; 0x2c
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003758:	e003      	b.n	8003762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43d9      	mvns	r1, r3
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	400b      	ands	r3, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	611a      	str	r2, [r3, #16]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d006      	beq.n	80037c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f806 	bl	80037d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e272      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8087 	beq.w	8003912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003804:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b04      	cmp	r3, #4
 800380e:	d00c      	beq.n	800382a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003810:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d112      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
 800381c:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	d10b      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06c      	beq.n	8003910 <HAL_RCC_OscConfig+0x12c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d168      	bne.n	8003910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e24c      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x76>
 800384c:	4b80      	ldr	r3, [pc, #512]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a7f      	ldr	r2, [pc, #508]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b7b      	ldr	r3, [pc, #492]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a77      	ldr	r2, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0xbc>
 8003886:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6e      	ldr	r2, [pc, #440]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 80038a0:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a67      	ldr	r2, [pc, #412]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fd8a 	bl	80023d8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe fd86 	bl	80023d8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e200      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xe4>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe fd76 	bl	80023d8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fd72 	bl	80023d8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1ec      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x10c>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800391e:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800392a:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x18c>
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x176>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1c0      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4939      	ldr	r1, [pc, #228]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e03a      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x270>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fe fd2b 	bl	80023d8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7fe fd27 	bl	80023d8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1a1      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4927      	ldr	r1, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_RCC_OscConfig+0x270>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fd0a 	bl	80023d8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fe fd06 	bl	80023d8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e180      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d03a      	beq.n	8003a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d019      	beq.n	8003a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_RCC_OscConfig+0x274>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fe fcea 	bl	80023d8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fe fce6 	bl	80023d8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e160      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f000 fb08 	bl	800403c <RCC_Delay>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_OscConfig+0x274>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fe fcd0 	bl	80023d8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fe fccc 	bl	80023d8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e146      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	42420000 	.word	0x42420000
 8003a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b92      	ldr	r3, [pc, #584]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e9      	bne.n	8003a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80a6 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4a87      	ldr	r2, [pc, #540]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]
 8003a92:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b82      	ldr	r3, [pc, #520]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b7f      	ldr	r3, [pc, #508]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fc8d 	bl	80023d8 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe fc89 	bl	80023d8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e103      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x4c8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x312>
 8003ae8:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a6e      	ldr	r2, [pc, #440]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	e02d      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x334>
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a69      	ldr	r2, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6213      	str	r3, [r2, #32]
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4a66      	ldr	r2, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6213      	str	r3, [r2, #32]
 8003b16:	e01c      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d10c      	bne.n	8003b3a <HAL_RCC_OscConfig+0x356>
 8003b20:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a60      	ldr	r2, [pc, #384]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6213      	str	r3, [r2, #32]
 8003b38:	e00b      	b.n	8003b52 <HAL_RCC_OscConfig+0x36e>
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a5a      	ldr	r2, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a57      	ldr	r2, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fc3d 	bl	80023d8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fc39 	bl	80023d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0b1      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCC_OscConfig+0x37e>
 8003b84:	e014      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fc27 	bl	80023d8 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fc23 	bl	80023d8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e09b      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba4:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4a3b      	ldr	r2, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8087 	beq.w	8003cda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d061      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d146      	bne.n	8003c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fbf7 	bl	80023d8 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe fbf3 	bl	80023d8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e06d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c00:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d108      	bne.n	8003c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a19      	ldr	r1, [r3, #32]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fe fbc7 	bl	80023d8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fbc3 	bl	80023d8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e03d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x46a>
 8003c6c:	e035      	b.n	8003cda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fbb0 	bl	80023d8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fbac 	bl	80023d8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e026      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x498>
 8003c9a:	e01e      	b.n	8003cda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e019      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x500>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0d0      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d910      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 0207 	bic.w	r2, r3, #7
 8003d12:	4965      	ldr	r1, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d040      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e073      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4936      	ldr	r1, [pc, #216]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fafe 	bl	80023d8 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe fafa 	bl	80023d8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e053      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d210      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4922      	ldr	r1, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fab8 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	0800a134 	.word	0x0800a134
 8003eb4:	20000020 	.word	0x20000020
 8003eb8:	2000004c 	.word	0x2000004c

08003ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b490      	push	{r4, r7}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ec4:	1d3c      	adds	r4, r7, #4
 8003ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ecc:	f240 2301 	movw	r3, #513	; 0x201
 8003ed0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x40>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x46>
 8003efa:	e02b      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003efe:	623b      	str	r3, [r7, #32]
      break;
 8003f00:	e02b      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	0c9b      	lsrs	r3, r3, #18
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	443b      	add	r3, r7
 8003f0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	0c5b      	lsrs	r3, r3, #17
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	3328      	adds	r3, #40	; 0x28
 8003f2a:	443b      	add	r3, r7
 8003f2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f36:	fb03 f202 	mul.w	r2, r3, r2
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	e004      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	623b      	str	r3, [r7, #32]
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f56:	623b      	str	r3, [r7, #32]
      break;
 8003f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3728      	adds	r7, #40	; 0x28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc90      	pop	{r4, r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	0800a0b8 	.word	0x0800a0b8
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	007a1200 	.word	0x007a1200
 8003f74:	003d0900 	.word	0x003d0900

08003f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b02      	ldr	r3, [pc, #8]	; (8003f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	20000020 	.word	0x20000020

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f90:	f7ff fff2 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800a144 	.word	0x0800a144

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff ffde 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	0adb      	lsrs	r3, r3, #11
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	0800a144 	.word	0x0800a144

08003fdc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	220f      	movs	r2, #15
 8003fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_RCC_GetClockConfig+0x58>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0203 	and.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <HAL_RCC_GetClockConfig+0x58>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_GetClockConfig+0x58>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_RCC_GetClockConfig+0x58>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_GetClockConfig+0x5c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40021000 	.word	0x40021000
 8004038:	40022000 	.word	0x40022000

0800403c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <RCC_Delay+0x34>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <RCC_Delay+0x38>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a5b      	lsrs	r3, r3, #9
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004058:	bf00      	nop
  }
  while (Delay --);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	60fa      	str	r2, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f9      	bne.n	8004058 <RCC_Delay+0x1c>
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	20000020 	.word	0x20000020
 8004074:	10624dd3 	.word	0x10624dd3

08004078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e076      	b.n	8004178 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d009      	beq.n	80040b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	61da      	str	r2, [r3, #28]
 80040a2:	e005      	b.n	80040b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd f91c 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	0c1a      	lsrs	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f002 0204 	and.w	r2, r2, #4
 8004156:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004166:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Transmit+0x22>
 800419e:	2302      	movs	r3, #2
 80041a0:	e126      	b.n	80043f0 <HAL_SPI_Transmit+0x270>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041aa:	f7fe f915 	bl	80023d8 <HAL_GetTick>
 80041ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d002      	beq.n	80041c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041c4:	e10b      	b.n	80043de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0x52>
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041d6:	e102      	b.n	80043de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2203      	movs	r2, #3
 80041dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d10f      	bne.n	8004240 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d007      	beq.n	800425e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004266:	d14b      	bne.n	8004300 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0xf6>
 8004270:	8afb      	ldrh	r3, [r7, #22]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d13e      	bne.n	80042f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800429a:	e02b      	b.n	80042f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d112      	bne.n	80042d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	881a      	ldrh	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	1c9a      	adds	r2, r3, #2
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ce:	e011      	b.n	80042f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d0:	f7fe f882 	bl	80023d8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d803      	bhi.n	80042e8 <HAL_SPI_Transmit+0x168>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_Transmit+0x16e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042f2:	e074      	b.n	80043de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ce      	bne.n	800429c <HAL_SPI_Transmit+0x11c>
 80042fe:	e04c      	b.n	800439a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_SPI_Transmit+0x18e>
 8004308:	8afb      	ldrh	r3, [r7, #22]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d140      	bne.n	8004390 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004334:	e02c      	b.n	8004390 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d113      	bne.n	800436c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	86da      	strh	r2, [r3, #54]	; 0x36
 800436a:	e011      	b.n	8004390 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436c:	f7fe f834 	bl	80023d8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d803      	bhi.n	8004384 <HAL_SPI_Transmit+0x204>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d102      	bne.n	800438a <HAL_SPI_Transmit+0x20a>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800438e:	e026      	b.n	80043de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1cd      	bne.n	8004336 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fbb8 	bl	8004b14 <SPI_EndRxTxTransaction>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e000      	b.n	80043de <HAL_SPI_Transmit+0x25e>
  }

error:
 80043dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004414:	d112      	bne.n	800443c <HAL_SPI_Receive+0x44>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2204      	movs	r2, #4
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8f1 	bl	800461a <HAL_SPI_TransmitReceive>
 8004438:	4603      	mov	r3, r0
 800443a:	e0ea      	b.n	8004612 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_SPI_Receive+0x52>
 8004446:	2302      	movs	r3, #2
 8004448:	e0e3      	b.n	8004612 <HAL_SPI_Receive+0x21a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004452:	f7fd ffc1 	bl	80023d8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d002      	beq.n	800446a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004468:	e0ca      	b.n	8004600 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_Receive+0x7e>
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    goto error;
 800447a:	e0c1      	b.n	8004600 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2204      	movs	r2, #4
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c2:	d10f      	bne.n	80044e4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d007      	beq.n	8004502 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d162      	bne.n	80045d0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800450a:	e02e      	b.n	800456a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d115      	bne.n	8004546 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f103 020c 	add.w	r2, r3, #12
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004544:	e011      	b.n	800456a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004546:	f7fd ff47 	bl	80023d8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d803      	bhi.n	800455e <HAL_SPI_Receive+0x166>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d102      	bne.n	8004564 <HAL_SPI_Receive+0x16c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004568:	e04a      	b.n	8004600 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1cb      	bne.n	800450c <HAL_SPI_Receive+0x114>
 8004574:	e031      	b.n	80045da <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d113      	bne.n	80045ac <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	b292      	uxth	r2, r2
 8004590:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045aa:	e011      	b.n	80045d0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ac:	f7fd ff14 	bl	80023d8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d803      	bhi.n	80045c4 <HAL_SPI_Receive+0x1cc>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d102      	bne.n	80045ca <HAL_SPI_Receive+0x1d2>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045ce:	e017      	b.n	8004600 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1cd      	bne.n	8004576 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa46 	bl	8004a70 <SPI_EndRxTransaction>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
 80045fc:	e000      	b.n	8004600 <HAL_SPI_Receive+0x208>
  }

error :
 80045fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b08c      	sub	sp, #48	; 0x30
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004628:	2301      	movs	r3, #1
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x26>
 800463c:	2302      	movs	r3, #2
 800463e:	e18a      	b.n	8004956 <HAL_SPI_TransmitReceive+0x33c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004648:	f7fd fec6 	bl	80023d8 <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004666:	2b01      	cmp	r3, #1
 8004668:	d00f      	beq.n	800468a <HAL_SPI_TransmitReceive+0x70>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004670:	d107      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x68>
 800467a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800467e:	2b04      	cmp	r3, #4
 8004680:	d003      	beq.n	800468a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004682:	2302      	movs	r3, #2
 8004684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004688:	e15b      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_SPI_TransmitReceive+0x82>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_TransmitReceive+0x82>
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046a2:	e14e      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d003      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2205      	movs	r2, #5
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	887a      	ldrh	r2, [r7, #2]
 80046ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	887a      	ldrh	r2, [r7, #2]
 80046da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d007      	beq.n	800470c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004714:	d178      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x10a>
 800471e:	8b7b      	ldrh	r3, [r7, #26]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d166      	bne.n	80047f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	1c9a      	adds	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004748:	e053      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d11b      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x176>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x176>
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d113      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	881a      	ldrh	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d119      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x1b8>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d014      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	b292      	uxth	r2, r2
 80047b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ce:	2301      	movs	r3, #1
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047d2:	f7fd fe01 	bl	80023d8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047de:	429a      	cmp	r2, r3
 80047e0:	d807      	bhi.n	80047f2 <HAL_SPI_TransmitReceive+0x1d8>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d003      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047f0:	e0a7      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1a6      	bne.n	800474a <HAL_SPI_TransmitReceive+0x130>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1a1      	bne.n	800474a <HAL_SPI_TransmitReceive+0x130>
 8004806:	e07c      	b.n	8004902 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x1fc>
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d16b      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	e057      	b.n	80048ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d11c      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x26c>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d017      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x26c>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d114      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d119      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x2ae>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d014      	beq.n	80048c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c4:	2301      	movs	r3, #1
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048c8:	f7fd fd86 	bl	80023d8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d803      	bhi.n	80048e0 <HAL_SPI_TransmitReceive+0x2c6>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d102      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x2cc>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048ec:	e029      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1a2      	bne.n	800483e <HAL_SPI_TransmitReceive+0x224>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d19d      	bne.n	800483e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004904:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f904 	bl	8004b14 <SPI_EndRxTxTransaction>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800491e:	e010      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	e000      	b.n	8004942 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004952:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004956:	4618      	mov	r0, r3
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004970:	f7fd fd32 	bl	80023d8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4413      	add	r3, r2
 800497e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004980:	f7fd fd2a 	bl	80023d8 <HAL_GetTick>
 8004984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	015b      	lsls	r3, r3, #5
 800498c:	0d1b      	lsrs	r3, r3, #20
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004996:	e054      	b.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d050      	beq.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049a0:	f7fd fd1a 	bl	80023d8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d902      	bls.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d13d      	bne.n	8004a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ce:	d111      	bne.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d8:	d004      	beq.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e2:	d107      	bne.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fc:	d10f      	bne.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e017      	b.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	bf0c      	ite	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	2300      	movne	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d19b      	bne.n	8004998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000020 	.word	0x20000020

08004a70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a84:	d111      	bne.n	8004aaa <SPI_EndRxTransaction+0x3a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d004      	beq.n	8004a9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d107      	bne.n	8004aaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d117      	bne.n	8004ae4 <SPI_EndRxTransaction+0x74>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d112      	bne.n	8004ae4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff ff49 	bl	8004960 <SPI_WaitFlagStateUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e013      	b.n	8004b0c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff ff36 	bl	8004960 <SPI_WaitFlagStateUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e000      	b.n	8004b0c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	2180      	movs	r1, #128	; 0x80
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff ff18 	bl	8004960 <SPI_WaitFlagStateUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e000      	b.n	8004b48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e041      	b.n	8004be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f839 	bl	8004bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f000 f9b4 	bl	8004efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e03a      	b.n	8004c8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_TIM_Base_Start_IT+0x98>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x58>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d009      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x58>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x58>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d111      	bne.n	8004c7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d010      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	e007      	b.n	8004c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0202 	mvn.w	r2, #2
 8004cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8ed 	bl	8004ec6 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8e0 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8ef 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0204 	mvn.w	r2, #4
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8c3 	bl	8004ec6 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8b6 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f8c5 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f899 	bl	8004ec6 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f88c 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f89b 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0210 	mvn.w	r2, #16
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f86f 	bl	8004ec6 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f862 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f871 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0201 	mvn.w	r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fb fd7a 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8bf 	bl	8004fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f835 	bl	8004eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0220 	mvn.w	r2, #32
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f88a 	bl	8004fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a29      	ldr	r2, [pc, #164]	; (8004fb4 <TIM_Base_SetConfig+0xb8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_Base_SetConfig+0x30>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1a:	d007      	beq.n	8004f2c <TIM_Base_SetConfig+0x30>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <TIM_Base_SetConfig+0xbc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_Base_SetConfig+0x30>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <TIM_Base_SetConfig+0xc0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d108      	bne.n	8004f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1c      	ldr	r2, [pc, #112]	; (8004fb4 <TIM_Base_SetConfig+0xb8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0x62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0x62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <TIM_Base_SetConfig+0xbc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0x62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <TIM_Base_SetConfig+0xc0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <TIM_Base_SetConfig+0xb8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d103      	bne.n	8004fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	615a      	str	r2, [r3, #20]
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800

08004fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e03f      	b.n	8005076 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fbce 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb49 	bl	80056c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_UART_IRQHandler+0x52>
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa4f 	bl	800556e <UART_Receive_IT>
      return;
 80050d0:	e17b      	b.n	80053ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80b1 	beq.w	800523c <HAL_UART_IRQHandler+0x1bc>
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <HAL_UART_IRQHandler+0x70>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80a6 	beq.w	800523c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_UART_IRQHandler+0x90>
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_UART_IRQHandler+0xb0>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f043 0202 	orr.w	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_UART_IRQHandler+0xd0>
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <HAL_UART_IRQHandler+0xfa>
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_UART_IRQHandler+0xee>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0208 	orr.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 811e 	beq.w	80053c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_UART_IRQHandler+0x11e>
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9e8 	bl	800556e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <HAL_UART_IRQHandler+0x146>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d031      	beq.n	800522a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f92a 	bl	8005420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d023      	beq.n	8005222 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d013      	beq.n	800521a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	4a76      	ldr	r2, [pc, #472]	; (80053d0 <HAL_UART_IRQHandler+0x350>)
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd ff9c 	bl	800313c <HAL_DMA_Abort_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005214:	4610      	mov	r0, r2
 8005216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e00e      	b.n	8005238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8ec 	bl	80053f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	e00a      	b.n	8005238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8e8 	bl	80053f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e006      	b.n	8005238 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8e4 	bl	80053f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005236:	e0c3      	b.n	80053c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	bf00      	nop
    return;
 800523a:	e0c1      	b.n	80053c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 80a1 	bne.w	8005388 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 809b 	beq.w	8005388 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8095 	beq.w	8005388 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d04e      	beq.n	8005320 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800528c:	8a3b      	ldrh	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8098 	beq.w	80053c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005298:	8a3a      	ldrh	r2, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	f080 8092 	bcs.w	80053c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8a3a      	ldrh	r2, [r7, #16]
 80052a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d02b      	beq.n	8005308 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0210 	bic.w	r2, r2, #16
 80052fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd fee0 	bl	80030c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005310:	b29b      	uxth	r3, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f876 	bl	800540a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800531e:	e051      	b.n	80053c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d047      	beq.n	80053c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005338:	8a7b      	ldrh	r3, [r7, #18]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d044      	beq.n	80053c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800534c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0210 	bic.w	r2, r2, #16
 800537a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800537c:	8a7b      	ldrh	r3, [r7, #18]
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f842 	bl	800540a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005386:	e01f      	b.n	80053c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_UART_IRQHandler+0x324>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f87f 	bl	80054a0 <UART_Transmit_IT>
    return;
 80053a2:	e012      	b.n	80053ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_UART_IRQHandler+0x34a>
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8c0 	bl	800553e <UART_EndTransmit_IT>
    return;
 80053be:	e004      	b.n	80053ca <HAL_UART_IRQHandler+0x34a>
    return;
 80053c0:	bf00      	nop
 80053c2:	e002      	b.n	80053ca <HAL_UART_IRQHandler+0x34a>
      return;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <HAL_UART_IRQHandler+0x34a>
      return;
 80053c8:	bf00      	nop
  }
}
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	08005479 	.word	0x08005479

080053d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005436:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0210 	bic.w	r2, r2, #16
 800545e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ffb0 	bl	80053f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b21      	cmp	r3, #33	; 0x21
 80054b2:	d13e      	bne.n	8005532 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054bc:	d114      	bne.n	80054e8 <UART_Transmit_IT+0x48>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d110      	bne.n	80054e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	1c9a      	adds	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]
 80054e6:	e008      	b.n	80054fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6211      	str	r1, [r2, #32]
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4619      	mov	r1, r3
 8005508:	84d1      	strh	r1, [r2, #38]	; 0x26
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005554:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff ff38 	bl	80053d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b22      	cmp	r3, #34	; 0x22
 8005580:	f040 8099 	bne.w	80056b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558c:	d117      	bne.n	80055be <UART_Receive_IT+0x50>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
 80055bc:	e026      	b.n	800560c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d007      	beq.n	80055e2 <UART_Receive_IT+0x74>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <UART_Receive_IT+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e008      	b.n	8005602 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29b      	uxth	r3, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800561c:	2b00      	cmp	r3, #0
 800561e:	d148      	bne.n	80056b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0220 	bic.w	r2, r2, #32
 800562e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800563e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	2b01      	cmp	r3, #1
 800565e:	d123      	bne.n	80056a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0210 	bic.w	r2, r2, #16
 8005674:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b10      	cmp	r3, #16
 8005682:	d10a      	bne.n	800569a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff feb2 	bl	800540a <HAL_UARTEx_RxEventCallback>
 80056a6:	e002      	b.n	80056ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fe9c 	bl	80053e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e002      	b.n	80056b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056fa:	f023 030c 	bic.w	r3, r3, #12
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	430b      	orrs	r3, r1
 8005706:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <UART_SetConfig+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d103      	bne.n	8005730 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fe fc44 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	e002      	b.n	8005736 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7fe fc2c 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8005734:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009a      	lsls	r2, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <UART_SetConfig+0x118>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	0119      	lsls	r1, r3, #4
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	fbb2 f2f3 	udiv	r2, r2, r3
 800576c:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <UART_SetConfig+0x118>)
 800576e:	fba3 0302 	umull	r0, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2064      	movs	r0, #100	; 0x64
 8005776:	fb00 f303 	mul.w	r3, r0, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	; 0x32
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <UART_SetConfig+0x118>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578c:	4419      	add	r1, r3
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <UART_SetConfig+0x118>)
 80057a6:	fba3 0302 	umull	r0, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2064      	movs	r0, #100	; 0x64
 80057ae:	fb00 f303 	mul.w	r3, r0, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	3332      	adds	r3, #50	; 0x32
 80057b8:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <UART_SetConfig+0x118>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	440a      	add	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40013800 	.word	0x40013800
 80057d8:	51eb851f 	.word	0x51eb851f

080057dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e2:	f3ef 8305 	mrs	r3, IPSR
 80057e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ee:	f3ef 8310 	mrs	r3, PRIMASK
 80057f2:	607b      	str	r3, [r7, #4]
  return(result);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <osKernelInitialize+0x32>
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <osKernelInitialize+0x60>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d109      	bne.n	8005816 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005802:	f3ef 8311 	mrs	r3, BASEPRI
 8005806:	603b      	str	r3, [r7, #0]
  return(result);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800580e:	f06f 0305 	mvn.w	r3, #5
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e00c      	b.n	8005830 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <osKernelInitialize+0x60>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800581e:	4b07      	ldr	r3, [pc, #28]	; (800583c <osKernelInitialize+0x60>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005830:	68fb      	ldr	r3, [r7, #12]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr
 800583c:	20000b54 	.word	0x20000b54

08005840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005846:	f3ef 8305 	mrs	r3, IPSR
 800584a:	60bb      	str	r3, [r7, #8]
  return(result);
 800584c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10f      	bne.n	8005872 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005852:	f3ef 8310 	mrs	r3, PRIMASK
 8005856:	607b      	str	r3, [r7, #4]
  return(result);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <osKernelStart+0x32>
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <osKernelStart+0x64>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d109      	bne.n	800587a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005866:	f3ef 8311 	mrs	r3, BASEPRI
 800586a:	603b      	str	r3, [r7, #0]
  return(result);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005872:	f06f 0305 	mvn.w	r3, #5
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e00e      	b.n	8005898 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <osKernelStart+0x64>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d107      	bne.n	8005892 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <osKernelStart+0x64>)
 8005884:	2202      	movs	r2, #2
 8005886:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005888:	f001 f84e 	bl	8006928 <vTaskStartScheduler>
      stat = osOK;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e002      	b.n	8005898 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005898:	68fb      	ldr	r3, [r7, #12]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000b54 	.word	0x20000b54

080058a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b092      	sub	sp, #72	; 0x48
 80058ac:	af04      	add	r7, sp, #16
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b8:	f3ef 8305 	mrs	r3, IPSR
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8094 	bne.w	80059ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ca:	623b      	str	r3, [r7, #32]
  return(result);
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 808d 	bne.w	80059ee <osThreadNew+0x146>
 80058d4:	4b48      	ldr	r3, [pc, #288]	; (80059f8 <osThreadNew+0x150>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d106      	bne.n	80058ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058dc:	f3ef 8311 	mrs	r3, BASEPRI
 80058e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 8082 	bne.w	80059ee <osThreadNew+0x146>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d07e      	beq.n	80059ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80058f4:	2318      	movs	r3, #24
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80058f8:	2300      	movs	r3, #0
 80058fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80058fc:	f107 031b 	add.w	r3, r7, #27
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d045      	beq.n	800599a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <osThreadNew+0x74>
        name = attr->name;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <osThreadNew+0x9a>
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	2b38      	cmp	r3, #56	; 0x38
 8005934:	d805      	bhi.n	8005942 <osThreadNew+0x9a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <osThreadNew+0x9e>
        return (NULL);
 8005942:	2300      	movs	r3, #0
 8005944:	e054      	b.n	80059f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	089b      	lsrs	r3, r3, #2
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <osThreadNew+0xd4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2bbb      	cmp	r3, #187	; 0xbb
 8005964:	d90a      	bls.n	800597c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800596a:	2b00      	cmp	r3, #0
 800596c:	d006      	beq.n	800597c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <osThreadNew+0xd4>
        mem = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
 800597a:	e010      	b.n	800599e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <osThreadNew+0xf6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d108      	bne.n	800599e <osThreadNew+0xf6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <osThreadNew+0xf6>
          mem = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
 8005998:	e001      	b.n	800599e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d110      	bne.n	80059c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059ac:	9202      	str	r2, [sp, #8]
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fde0 	bl	8006580 <xTaskCreateStatic>
 80059c0:	4603      	mov	r3, r0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e013      	b.n	80059ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d110      	bne.n	80059ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	f107 0314 	add.w	r3, r7, #20
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fe2a 	bl	8006638 <xTaskCreate>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <osThreadNew+0x146>
          hTask = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059ee:	697b      	ldr	r3, [r7, #20]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3738      	adds	r7, #56	; 0x38
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20000b54 	.word	0x20000b54

080059fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a04:	f3ef 8305 	mrs	r3, IPSR
 8005a08:	613b      	str	r3, [r7, #16]
  return(result);
 8005a0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10f      	bne.n	8005a30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a10:	f3ef 8310 	mrs	r3, PRIMASK
 8005a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <osDelay+0x34>
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <osDelay+0x58>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d109      	bne.n	8005a38 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a24:	f3ef 8311 	mrs	r3, BASEPRI
 8005a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <osDelay+0x3c>
    stat = osErrorISR;
 8005a30:	f06f 0305 	mvn.w	r3, #5
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e007      	b.n	8005a48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 ff3c 	bl	80068c0 <vTaskDelay>
    }
  }

  return (stat);
 8005a48:	697b      	ldr	r3, [r7, #20]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000b54 	.word	0x20000b54

08005a58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <vApplicationGetIdleTaskMemory+0x28>)
 8005a68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	20000b58 	.word	0x20000b58
 8005a84:	20000c14 	.word	0x20000c14

08005a88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a07      	ldr	r2, [pc, #28]	; (8005ab4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a06      	ldr	r2, [pc, #24]	; (8005ab8 <vApplicationGetTimerTaskMemory+0x30>)
 8005a9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000e14 	.word	0x20000e14
 8005ab8:	20000ed0 	.word	0x20000ed0

08005abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f103 0208 	add.w	r2, r3, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f103 0208 	add.w	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f103 0208 	add.w	r2, r3, #8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d103      	bne.n	8005b78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	e00c      	b.n	8005b92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e002      	b.n	8005b86 <vListInsert+0x2e>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d2f6      	bcs.n	8005b80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6892      	ldr	r2, [r2, #8]
 8005bde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6852      	ldr	r2, [r2, #4]
 8005be8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d103      	bne.n	8005bfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1e5a      	subs	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c44:	f001 ff82 	bl	8007b4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c50:	68f9      	ldr	r1, [r7, #12]
 8005c52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	441a      	add	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	3b01      	subs	r3, #1
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	441a      	add	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	22ff      	movs	r2, #255	; 0xff
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	22ff      	movs	r2, #255	; 0xff
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00f      	beq.n	8005cc2 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3310      	adds	r3, #16
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f8aa 	bl	8006e00 <xTaskRemoveFromEventList>
 8005cac:	e009      	b.n	8005cc2 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff02 	bl	8005abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3324      	adds	r3, #36	; 0x24
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fefd 	bl	8005abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cc2:	f001 ff73 	bl	8007bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cc6:	2301      	movs	r3, #1
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <xQueueGenericCreateStatic+0x52>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xQueueGenericCreateStatic+0x56>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueGenericCreateStatic+0x58>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <xQueueGenericCreateStatic+0x7e>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <xQueueGenericCreateStatic+0x82>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <xQueueGenericCreateStatic+0x84>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	61fb      	str	r3, [r7, #28]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d6e:	2350      	movs	r3, #80	; 0x50
 8005d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b50      	cmp	r3, #80	; 0x50
 8005d76:	d00a      	beq.n	8005d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	61bb      	str	r3, [r7, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005da0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f805 	bl	8005dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3730      	adds	r7, #48	; 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e002      	b.n	8005de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005dec:	2101      	movs	r1, #1
 8005dee:	69b8      	ldr	r0, [r7, #24]
 8005df0:	f7ff ff13 	bl	8005c1a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericSend+0x32>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <xQueueGenericSend+0x40>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <xQueueGenericSend+0x44>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <xQueueGenericSend+0x46>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <xQueueGenericSend+0x60>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d103      	bne.n	8005e72 <xQueueGenericSend+0x6e>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericSend+0x72>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericSend+0x74>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	623b      	str	r3, [r7, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e92:	f001 f975 	bl	8007180 <xTaskGetSchedulerState>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <xQueueGenericSend+0x9e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <xQueueGenericSend+0xa2>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <xQueueGenericSend+0xa4>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61fb      	str	r3, [r7, #28]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ec2:	f001 fe43 	bl	8007b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <xQueueGenericSend+0xd4>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d112      	bne.n	8005efe <xQueueGenericSend+0xfa>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ede:	f000 f9e3 	bl	80062a8 <prvCopyDataToQueue>
 8005ee2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 ff85 	bl	8006e00 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ef6:	f001 fe59 	bl	8007bac <vPortExitCritical>
				return pdPASS;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e062      	b.n	8005fc4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f04:	f001 fe52 	bl	8007bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e05b      	b.n	8005fc4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f12:	f107 0314 	add.w	r3, r7, #20
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 ffd6 	bl	8006ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f20:	f001 fe44 	bl	8007bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f24:	f000 fd70 	bl	8006a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f28:	f001 fe10 	bl	8007b4c <vPortEnterCritical>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSend+0x13e>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d103      	bne.n	8005f58 <xQueueGenericSend+0x154>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f58:	f001 fe28 	bl	8007bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f5c:	1d3a      	adds	r2, r7, #4
 8005f5e:	f107 0314 	add.w	r3, r7, #20
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ffc5 	bl	8006ef4 <xTaskCheckForTimeOut>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d123      	bne.n	8005fb8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fa91 	bl	8006498 <prvIsQueueFull>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d017      	beq.n	8005fac <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	3310      	adds	r3, #16
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 feeb 	bl	8006d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8c:	f000 fa1c 	bl	80063c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f90:	f000 fd48 	bl	8006a24 <xTaskResumeAll>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d193      	bne.n	8005ec2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <xQueueGenericSend+0x1c8>)
 8005f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	e78a      	b.n	8005ec2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fae:	f000 fa0b 	bl	80063c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb2:	f000 fd37 	bl	8006a24 <xTaskResumeAll>
 8005fb6:	e784      	b.n	8005ec2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fba:	f000 fa05 	bl	80063c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fbe:	f000 fd31 	bl	8006a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fc2:	2300      	movs	r3, #0
		}
	}
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3738      	adds	r7, #56	; 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	e000ed04 	.word	0xe000ed04

08005fd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08e      	sub	sp, #56	; 0x38
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <xQueueGenericSendFromISR+0x3c>
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <xQueueGenericSendFromISR+0x40>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <xQueueGenericSendFromISR+0x42>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	623b      	str	r3, [r7, #32]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d103      	bne.n	800603a <xQueueGenericSendFromISR+0x6a>
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <xQueueGenericSendFromISR+0x6e>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <xQueueGenericSendFromISR+0x70>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61fb      	str	r3, [r7, #28]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800605a:	f001 fe39 	bl	8007cd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800605e:	f3ef 8211 	mrs	r2, BASEPRI
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	61ba      	str	r2, [r7, #24]
 8006074:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006076:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <xQueueGenericSendFromISR+0xbc>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d12c      	bne.n	80060e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800609c:	f000 f904 	bl	80062a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d112      	bne.n	80060d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d016      	beq.n	80060e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	3324      	adds	r3, #36	; 0x24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fea2 	bl	8006e00 <xTaskRemoveFromEventList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00e      	beq.n	80060e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e007      	b.n	80060e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	b25a      	sxtb	r2, r3
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060e0:	2301      	movs	r3, #1
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80060e4:	e001      	b.n	80060ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3738      	adds	r7, #56	; 0x38
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08c      	sub	sp, #48	; 0x30
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <xQueueReceive+0x30>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	623b      	str	r3, [r7, #32]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueReceive+0x3e>
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueReceive+0x42>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueReceive+0x44>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueReceive+0x5e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61fb      	str	r3, [r7, #28]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615e:	f001 f80f 	bl	8007180 <xTaskGetSchedulerState>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <xQueueReceive+0x6e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <xQueueReceive+0x72>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueReceive+0x74>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueReceive+0x8e>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61bb      	str	r3, [r7, #24]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800618e:	f001 fcdd 	bl	8007b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d014      	beq.n	80061c8 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a2:	f000 f8eb 	bl	800637c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	3310      	adds	r3, #16
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fe20 	bl	8006e00 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061c0:	f001 fcf4 	bl	8007bac <vPortExitCritical>
				return pdPASS;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e069      	b.n	800629c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ce:	f001 fced 	bl	8007bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e062      	b.n	800629c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061dc:	f107 0310 	add.w	r3, r7, #16
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fe71 	bl	8006ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ea:	f001 fcdf 	bl	8007bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ee:	f000 fc0b 	bl	8006a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061f2:	f001 fcab 	bl	8007b4c <vPortEnterCritical>
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d103      	bne.n	800620c <xQueueReceive+0x10c>
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d103      	bne.n	8006222 <xQueueReceive+0x122>
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006222:	f001 fcc3 	bl	8007bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006226:	1d3a      	adds	r2, r7, #4
 8006228:	f107 0310 	add.w	r3, r7, #16
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fe60 	bl	8006ef4 <xTaskCheckForTimeOut>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d123      	bne.n	8006282 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800623a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623c:	f000 f916 	bl	800646c <prvIsQueueEmpty>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4611      	mov	r1, r2
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fd86 	bl	8006d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006256:	f000 f8b7 	bl	80063c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800625a:	f000 fbe3 	bl	8006a24 <xTaskResumeAll>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d194      	bne.n	800618e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <xQueueReceive+0x1a4>)
 8006266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	e78b      	b.n	800618e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006278:	f000 f8a6 	bl	80063c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800627c:	f000 fbd2 	bl	8006a24 <xTaskResumeAll>
 8006280:	e785      	b.n	800618e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006284:	f000 f8a0 	bl	80063c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006288:	f000 fbcc 	bl	8006a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628e:	f000 f8ed 	bl	800646c <prvIsQueueEmpty>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	f43f af7a 	beq.w	800618e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800629a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	; 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d14d      	bne.n	800636a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 ff72 	bl	80071bc <xTaskPriorityDisinherit>
 80062d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	e043      	b.n	800636a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d119      	bne.n	800631c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6898      	ldr	r0, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	461a      	mov	r2, r3
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	f002 f829 	bl	800834a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	441a      	add	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d32b      	bcc.n	800636a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	e026      	b.n	800636a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68d8      	ldr	r0, [r3, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	461a      	mov	r2, r3
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	f002 f80f 	bl	800834a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	425b      	negs	r3, r3
 8006336:	441a      	add	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d207      	bcs.n	8006358 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	425b      	negs	r3, r3
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d105      	bne.n	800636a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3b01      	subs	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006372:	697b      	ldr	r3, [r7, #20]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d018      	beq.n	80063c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	441a      	add	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d303      	bcc.n	80063b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68d9      	ldr	r1, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	461a      	mov	r2, r3
 80063ba:	6838      	ldr	r0, [r7, #0]
 80063bc:	f001 ffc5 	bl	800834a <memcpy>
	}
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063d0:	f001 fbbc 	bl	8007b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063dc:	e011      	b.n	8006402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fd08 	bl	8006e00 <xTaskRemoveFromEventList>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063f6:	f000 fddf 	bl	8006fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dce9      	bgt.n	80063de <prvUnlockQueue+0x16>
 800640a:	e000      	b.n	800640e <prvUnlockQueue+0x46>
					break;
 800640c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006416:	f001 fbc9 	bl	8007bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800641a:	f001 fb97 	bl	8007b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006426:	e011      	b.n	800644c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3310      	adds	r3, #16
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fce3 	bl	8006e00 <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006440:	f000 fdba 	bl	8006fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	3b01      	subs	r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800644c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dce9      	bgt.n	8006428 <prvUnlockQueue+0x60>
 8006454:	e000      	b.n	8006458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	22ff      	movs	r2, #255	; 0xff
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006460:	f001 fba4 	bl	8007bac <vPortExitCritical>
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006474:	f001 fb6a 	bl	8007b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800648a:	f001 fb8f 	bl	8007bac <vPortExitCritical>

	return xReturn;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a0:	f001 fb54 	bl	8007b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d102      	bne.n	80064b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e001      	b.n	80064ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ba:	f001 fb77 	bl	8007bac <vPortExitCritical>

	return xReturn;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e014      	b.n	8006502 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d8:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <vQueueAddToRegistry+0x4c>)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10b      	bne.n	80064fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e4:	490b      	ldr	r1, [pc, #44]	; (8006514 <vQueueAddToRegistry+0x4c>)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <vQueueAddToRegistry+0x4c>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064fa:	e006      	b.n	800650a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b07      	cmp	r3, #7
 8006506:	d9e7      	bls.n	80064d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	200012d0 	.word	0x200012d0

08006518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006528:	f001 fb10 	bl	8007b4c <vPortEnterCritical>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006532:	b25b      	sxtb	r3, r3
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d103      	bne.n	8006542 <vQueueWaitForMessageRestricted+0x2a>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006548:	b25b      	sxtb	r3, r3
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d103      	bne.n	8006558 <vQueueWaitForMessageRestricted+0x40>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006558:	f001 fb28 	bl	8007bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fc1b 	bl	8006da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006572:	6978      	ldr	r0, [r7, #20]
 8006574:	f7ff ff28 	bl	80063c8 <prvUnlockQueue>
	}
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	623b      	str	r3, [r7, #32]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	61fb      	str	r3, [r7, #28]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065c6:	23bc      	movs	r3, #188	; 0xbc
 80065c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2bbc      	cmp	r3, #188	; 0xbc
 80065ce:	d00a      	beq.n	80065e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61bb      	str	r3, [r7, #24]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01e      	beq.n	800662a <xTaskCreateStatic+0xaa>
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01b      	beq.n	800662a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006604:	2300      	movs	r3, #0
 8006606:	9303      	str	r3, [sp, #12]
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	9302      	str	r3, [sp, #8]
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f851 	bl	80066c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006624:	f000 f8ec 	bl	8006800 <prvAddNewTaskToReadyList>
 8006628:	e001      	b.n	800662e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800662e:	697b      	ldr	r3, [r7, #20]
	}
 8006630:	4618      	mov	r0, r3
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08c      	sub	sp, #48	; 0x30
 800663c:	af04      	add	r7, sp, #16
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fb7d 	bl	8007d4c <pvPortMalloc>
 8006652:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800665a:	20bc      	movs	r0, #188	; 0xbc
 800665c:	f001 fb76 	bl	8007d4c <pvPortMalloc>
 8006660:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
 800666e:	e005      	b.n	800667c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	f001 fc2f 	bl	8007ed4 <vPortFree>
 8006676:	e001      	b.n	800667c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	2300      	movs	r3, #0
 800668e:	9303      	str	r3, [sp, #12]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	9302      	str	r3, [sp, #8]
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f80f 	bl	80066c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a6:	69f8      	ldr	r0, [r7, #28]
 80066a8:	f000 f8aa 	bl	8006800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066ac:	2301      	movs	r3, #1
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e002      	b.n	80066b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066b8:	69bb      	ldr	r3, [r7, #24]
	}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	461a      	mov	r2, r3
 80066dc:	21a5      	movs	r1, #165	; 0xa5
 80066de:	f001 fe42 	bl	8008366 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	3b01      	subs	r3, #1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	617b      	str	r3, [r7, #20]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e012      	b.n	8006748 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	3334      	adds	r3, #52	; 0x34
 8006732:	460a      	mov	r2, r1
 8006734:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d006      	beq.n	8006750 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3301      	adds	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d9e9      	bls.n	8006722 <prvInitialiseNewTask+0x5e>
 800674e:	e000      	b.n	8006752 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006750:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2b37      	cmp	r3, #55	; 0x37
 800675e:	d901      	bls.n	8006764 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006760:	2337      	movs	r3, #55	; 0x37
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	2200      	movs	r2, #0
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f9bd 	bl	8005afa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	3318      	adds	r3, #24
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff f9b8 	bl	8005afa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	3354      	adds	r3, #84	; 0x54
 80067b4:	2260      	movs	r2, #96	; 0x60
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 fdd4 	bl	8008366 <memset>
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <prvInitialiseNewTask+0x130>)
 80067c2:	659a      	str	r2, [r3, #88]	; 0x58
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	4a0c      	ldr	r2, [pc, #48]	; (80067f8 <prvInitialiseNewTask+0x134>)
 80067c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	4a0b      	ldr	r2, [pc, #44]	; (80067fc <prvInitialiseNewTask+0x138>)
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	69b8      	ldr	r0, [r7, #24]
 80067d6:	f001 f8c5 	bl	8007964 <pxPortInitialiseStack>
 80067da:	4602      	mov	r2, r0
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ec:	bf00      	nop
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	0800a16c 	.word	0x0800a16c
 80067f8:	0800a18c 	.word	0x0800a18c
 80067fc:	0800a14c 	.word	0x0800a14c

08006800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006808:	f001 f9a0 	bl	8007b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800680c:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <prvAddNewTaskToReadyList+0xa8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a25      	ldr	r2, [pc, #148]	; (80068a8 <prvAddNewTaskToReadyList+0xa8>)
 8006814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006816:	4b25      	ldr	r3, [pc, #148]	; (80068ac <prvAddNewTaskToReadyList+0xac>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800681e:	4a23      	ldr	r2, [pc, #140]	; (80068ac <prvAddNewTaskToReadyList+0xac>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006824:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <prvAddNewTaskToReadyList+0xa8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d110      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800682c:	f000 fbe2 	bl	8006ff4 <prvInitialiseTaskLists>
 8006830:	e00d      	b.n	800684e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006832:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <prvAddNewTaskToReadyList+0xb0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800683a:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <prvAddNewTaskToReadyList+0xac>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d802      	bhi.n	800684e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006848:	4a18      	ldr	r2, [pc, #96]	; (80068ac <prvAddNewTaskToReadyList+0xac>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <prvAddNewTaskToReadyList+0xb4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	4a17      	ldr	r2, [pc, #92]	; (80068b4 <prvAddNewTaskToReadyList+0xb4>)
 8006856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006858:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <prvAddNewTaskToReadyList+0xb4>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <prvAddNewTaskToReadyList+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d903      	bls.n	8006874 <prvAddNewTaskToReadyList+0x74>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <prvAddNewTaskToReadyList+0xb8>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <prvAddNewTaskToReadyList+0xbc>)
 8006882:	441a      	add	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7ff f941 	bl	8005b12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006890:	f001 f98c 	bl	8007bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <prvAddNewTaskToReadyList+0xb0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800689c:	4b03      	ldr	r3, [pc, #12]	; (80068ac <prvAddNewTaskToReadyList+0xac>)
 800689e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200017e4 	.word	0x200017e4
 80068ac:	20001310 	.word	0x20001310
 80068b0:	200017f0 	.word	0x200017f0
 80068b4:	20001800 	.word	0x20001800
 80068b8:	200017ec 	.word	0x200017ec
 80068bc:	20001314 	.word	0x20001314

080068c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <vTaskDelay+0x60>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <vTaskDelay+0x30>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60bb      	str	r3, [r7, #8]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068f0:	f000 f88a 	bl	8006a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fcce 	bl	8007298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068fc:	f000 f892 	bl	8006a24 <xTaskResumeAll>
 8006900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <vTaskDelay+0x64>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	2000180c 	.word	0x2000180c
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006936:	463a      	mov	r2, r7
 8006938:	1d39      	adds	r1, r7, #4
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff f88a 	bl	8005a58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	9202      	str	r2, [sp, #8]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2300      	movs	r3, #0
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	460a      	mov	r2, r1
 8006956:	4924      	ldr	r1, [pc, #144]	; (80069e8 <vTaskStartScheduler+0xc0>)
 8006958:	4824      	ldr	r0, [pc, #144]	; (80069ec <vTaskStartScheduler+0xc4>)
 800695a:	f7ff fe11 	bl	8006580 <xTaskCreateStatic>
 800695e:	4603      	mov	r3, r0
 8006960:	4a23      	ldr	r2, [pc, #140]	; (80069f0 <vTaskStartScheduler+0xc8>)
 8006962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006964:	4b22      	ldr	r3, [pc, #136]	; (80069f0 <vTaskStartScheduler+0xc8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800696c:	2301      	movs	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e001      	b.n	8006976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800697c:	f000 fce0 	bl	8007340 <xTimerCreateTimerTask>
 8006980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d11b      	bne.n	80069c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	613b      	str	r3, [r7, #16]
}
 800699a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <vTaskStartScheduler+0xcc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3354      	adds	r3, #84	; 0x54
 80069a2:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <vTaskStartScheduler+0xd0>)
 80069a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <vTaskStartScheduler+0xd4>)
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <vTaskStartScheduler+0xd8>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <vTaskStartScheduler+0xdc>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ba:	f001 f855 	bl	8007a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069be:	e00e      	b.n	80069de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d10a      	bne.n	80069de <vTaskStartScheduler+0xb6>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <vTaskStartScheduler+0xb4>
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	0800a0c8 	.word	0x0800a0c8
 80069ec:	08006fd1 	.word	0x08006fd1
 80069f0:	20001808 	.word	0x20001808
 80069f4:	20001310 	.word	0x20001310
 80069f8:	20000058 	.word	0x20000058
 80069fc:	20001804 	.word	0x20001804
 8006a00:	200017f0 	.word	0x200017f0
 8006a04:	200017e8 	.word	0x200017e8

08006a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <vTaskSuspendAll+0x18>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	4a03      	ldr	r2, [pc, #12]	; (8006a20 <vTaskSuspendAll+0x18>)
 8006a14:	6013      	str	r3, [r2, #0]
}
 8006a16:	bf00      	nop
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	2000180c 	.word	0x2000180c

08006a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a32:	4b3c      	ldr	r3, [pc, #240]	; (8006b24 <xTaskResumeAll+0x100>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	603b      	str	r3, [r7, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a50:	f001 f87c 	bl	8007b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a54:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <xTaskResumeAll+0x100>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	4a32      	ldr	r2, [pc, #200]	; (8006b24 <xTaskResumeAll+0x100>)
 8006a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5e:	4b31      	ldr	r3, [pc, #196]	; (8006b24 <xTaskResumeAll+0x100>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d156      	bne.n	8006b14 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a66:	4b30      	ldr	r3, [pc, #192]	; (8006b28 <xTaskResumeAll+0x104>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d052      	beq.n	8006b14 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a6e:	e02f      	b.n	8006ad0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a70:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <xTaskResumeAll+0x108>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff f8a3 	bl	8005bc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f89e 	bl	8005bc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <xTaskResumeAll+0x10c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d903      	bls.n	8006aa0 <xTaskResumeAll+0x7c>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a24      	ldr	r2, [pc, #144]	; (8006b30 <xTaskResumeAll+0x10c>)
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4a21      	ldr	r2, [pc, #132]	; (8006b34 <xTaskResumeAll+0x110>)
 8006aae:	441a      	add	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f7ff f82b 	bl	8005b12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <xTaskResumeAll+0x114>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <xTaskResumeAll+0x118>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ad0:	4b16      	ldr	r3, [pc, #88]	; (8006b2c <xTaskResumeAll+0x108>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1cb      	bne.n	8006a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ade:	f000 fb2b 	bl	8007138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <xTaskResumeAll+0x11c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006aee:	f000 f837 	bl	8006b60 <xTaskIncrementTick>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006af8:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <xTaskResumeAll+0x118>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f1      	bne.n	8006aee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <xTaskResumeAll+0x11c>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <xTaskResumeAll+0x118>)
 8006b12:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b14:	f001 f84a 	bl	8007bac <vPortExitCritical>

	return xAlreadyYielded;
 8006b18:	687b      	ldr	r3, [r7, #4]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	2000180c 	.word	0x2000180c
 8006b28:	200017e4 	.word	0x200017e4
 8006b2c:	200017a4 	.word	0x200017a4
 8006b30:	200017ec 	.word	0x200017ec
 8006b34:	20001314 	.word	0x20001314
 8006b38:	20001310 	.word	0x20001310
 8006b3c:	200017f8 	.word	0x200017f8
 8006b40:	200017f4 	.word	0x200017f4

08006b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <xTaskGetTickCount+0x18>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b50:	687b      	ldr	r3, [r7, #4]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	200017e8 	.word	0x200017e8

08006b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <xTaskIncrementTick+0x114>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d175      	bne.n	8006c5e <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b72:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <xTaskIncrementTick+0x118>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b7a:	4a3f      	ldr	r2, [pc, #252]	; (8006c78 <xTaskIncrementTick+0x118>)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d120      	bne.n	8006bc8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b86:	4b3d      	ldr	r3, [pc, #244]	; (8006c7c <xTaskIncrementTick+0x11c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <xTaskIncrementTick+0x46>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	603b      	str	r3, [r7, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xTaskIncrementTick+0x44>
 8006ba6:	4b35      	ldr	r3, [pc, #212]	; (8006c7c <xTaskIncrementTick+0x11c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	4b34      	ldr	r3, [pc, #208]	; (8006c80 <xTaskIncrementTick+0x120>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a32      	ldr	r2, [pc, #200]	; (8006c7c <xTaskIncrementTick+0x11c>)
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	4a32      	ldr	r2, [pc, #200]	; (8006c80 <xTaskIncrementTick+0x120>)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b32      	ldr	r3, [pc, #200]	; (8006c84 <xTaskIncrementTick+0x124>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	4a30      	ldr	r2, [pc, #192]	; (8006c84 <xTaskIncrementTick+0x124>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	f000 fab8 	bl	8007138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bc8:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <xTaskIncrementTick+0x128>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d34a      	bcc.n	8006c68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <xTaskIncrementTick+0x11c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <xTaskIncrementTick+0x80>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <xTaskIncrementTick+0x82>
 8006be0:	2300      	movs	r3, #0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be6:	4b28      	ldr	r3, [pc, #160]	; (8006c88 <xTaskIncrementTick+0x128>)
 8006be8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bec:	601a      	str	r2, [r3, #0]
					break;
 8006bee:	e03b      	b.n	8006c68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <xTaskIncrementTick+0x11c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d203      	bcs.n	8006c10 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <xTaskIncrementTick+0x128>)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6013      	str	r3, [r2, #0]
						break;
 8006c0e:	e02b      	b.n	8006c68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe ffd7 	bl	8005bc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3318      	adds	r3, #24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe ffce 	bl	8005bc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <xTaskIncrementTick+0x12c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d903      	bls.n	8006c40 <xTaskIncrementTick+0xe0>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a13      	ldr	r2, [pc, #76]	; (8006c8c <xTaskIncrementTick+0x12c>)
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4a10      	ldr	r2, [pc, #64]	; (8006c90 <xTaskIncrementTick+0x130>)
 8006c4e:	441a      	add	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fe ff5b 	bl	8005b12 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5c:	e7b9      	b.n	8006bd2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <xTaskIncrementTick+0x134>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	4a0b      	ldr	r2, [pc, #44]	; (8006c94 <xTaskIncrementTick+0x134>)
 8006c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c68:	697b      	ldr	r3, [r7, #20]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	2000180c 	.word	0x2000180c
 8006c78:	200017e8 	.word	0x200017e8
 8006c7c:	2000179c 	.word	0x2000179c
 8006c80:	200017a0 	.word	0x200017a0
 8006c84:	200017fc 	.word	0x200017fc
 8006c88:	20001804 	.word	0x20001804
 8006c8c:	200017ec 	.word	0x200017ec
 8006c90:	20001314 	.word	0x20001314
 8006c94:	200017f4 	.word	0x200017f4

08006c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c9e:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <vTaskSwitchContext+0xb0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ca6:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <vTaskSwitchContext+0xb4>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cac:	e046      	b.n	8006d3c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006cae:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <vTaskSwitchContext+0xb4>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <vTaskSwitchContext+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e010      	b.n	8006cde <vTaskSwitchContext+0x46>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	607b      	str	r3, [r7, #4]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <vTaskSwitchContext+0x3e>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	491d      	ldr	r1, [pc, #116]	; (8006d54 <vTaskSwitchContext+0xbc>)
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0e4      	beq.n	8006cbc <vTaskSwitchContext+0x24>
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <vTaskSwitchContext+0xbc>)
 8006cfe:	4413      	add	r3, r2
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	605a      	str	r2, [r3, #4]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3308      	adds	r3, #8
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d104      	bne.n	8006d22 <vTaskSwitchContext+0x8a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <vTaskSwitchContext+0xc0>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <vTaskSwitchContext+0xb8>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <vTaskSwitchContext+0xc0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3354      	adds	r3, #84	; 0x54
 8006d38:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <vTaskSwitchContext+0xc4>)
 8006d3a:	6013      	str	r3, [r2, #0]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000180c 	.word	0x2000180c
 8006d4c:	200017f8 	.word	0x200017f8
 8006d50:	200017ec 	.word	0x200017ec
 8006d54:	20001314 	.word	0x20001314
 8006d58:	20001310 	.word	0x20001310
 8006d5c:	20000058 	.word	0x20000058

08006d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <vTaskPlaceOnEventList+0x44>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fe fee2 	bl	8005b58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d94:	2101      	movs	r1, #1
 8006d96:	6838      	ldr	r0, [r7, #0]
 8006d98:	f000 fa7e 	bl	8007298 <prvAddCurrentTaskToDelayedList>
}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20001310 	.word	0x20001310

08006da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	617b      	str	r3, [r7, #20]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <vTaskPlaceOnEventListRestricted+0x54>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7fe fe9a 	bl	8005b12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006de4:	f04f 33ff 	mov.w	r3, #4294967295
 8006de8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	68b8      	ldr	r0, [r7, #8]
 8006dee:	f000 fa53 	bl	8007298 <prvAddCurrentTaskToDelayedList>
	}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20001310 	.word	0x20001310

08006e00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3318      	adds	r3, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fec9 	bl	8005bc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <xTaskRemoveFromEventList+0xb0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d11d      	bne.n	8006e7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fec0 	bl	8005bc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <xTaskRemoveFromEventList+0xb4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d903      	bls.n	8006e5c <xTaskRemoveFromEventList+0x5c>
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <xTaskRemoveFromEventList+0xb4>)
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <xTaskRemoveFromEventList+0xb8>)
 8006e6a:	441a      	add	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4619      	mov	r1, r3
 8006e72:	4610      	mov	r0, r2
 8006e74:	f7fe fe4d 	bl	8005b12 <vListInsertEnd>
 8006e78:	e005      	b.n	8006e86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	3318      	adds	r3, #24
 8006e7e:	4619      	mov	r1, r3
 8006e80:	480e      	ldr	r0, [pc, #56]	; (8006ebc <xTaskRemoveFromEventList+0xbc>)
 8006e82:	f7fe fe46 	bl	8005b12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <xTaskRemoveFromEventList+0xc0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d905      	bls.n	8006ea0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <xTaskRemoveFromEventList+0xc4>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e001      	b.n	8006ea4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006ea4:	697b      	ldr	r3, [r7, #20]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000180c 	.word	0x2000180c
 8006eb4:	200017ec 	.word	0x200017ec
 8006eb8:	20001314 	.word	0x20001314
 8006ebc:	200017a4 	.word	0x200017a4
 8006ec0:	20001310 	.word	0x20001310
 8006ec4:	200017f8 	.word	0x200017f8

08006ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <vTaskInternalSetTimeOutState+0x24>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <vTaskInternalSetTimeOutState+0x28>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	200017fc 	.word	0x200017fc
 8006ef0:	200017e8 	.word	0x200017e8

08006ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	613b      	str	r3, [r7, #16]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f36:	f000 fe09 	bl	8007b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <xTaskCheckForTimeOut+0xbc>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d102      	bne.n	8006f5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e023      	b.n	8006fa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <xTaskCheckForTimeOut+0xc0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d007      	beq.n	8006f76 <xTaskCheckForTimeOut+0x82>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e015      	b.n	8006fa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d20b      	bcs.n	8006f98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff ff9b 	bl	8006ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	e004      	b.n	8006fa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fa2:	f000 fe03 	bl	8007bac <vPortExitCritical>

	return xReturn;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	200017e8 	.word	0x200017e8
 8006fb4:	200017fc 	.word	0x200017fc

08006fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <vTaskMissedYield+0x14>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	200017f8 	.word	0x200017f8

08006fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fd8:	f000 f84c 	bl	8007074 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <prvIdleTask+0x20>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fec:	e7f4      	b.n	8006fd8 <prvIdleTask+0x8>
 8006fee:	bf00      	nop
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	e00c      	b.n	800701a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4a12      	ldr	r2, [pc, #72]	; (8007054 <prvInitialiseTaskLists+0x60>)
 800700c:	4413      	add	r3, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fd54 	bl	8005abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3301      	adds	r3, #1
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b37      	cmp	r3, #55	; 0x37
 800701e:	d9ef      	bls.n	8007000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007020:	480d      	ldr	r0, [pc, #52]	; (8007058 <prvInitialiseTaskLists+0x64>)
 8007022:	f7fe fd4b 	bl	8005abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007026:	480d      	ldr	r0, [pc, #52]	; (800705c <prvInitialiseTaskLists+0x68>)
 8007028:	f7fe fd48 	bl	8005abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800702c:	480c      	ldr	r0, [pc, #48]	; (8007060 <prvInitialiseTaskLists+0x6c>)
 800702e:	f7fe fd45 	bl	8005abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007032:	480c      	ldr	r0, [pc, #48]	; (8007064 <prvInitialiseTaskLists+0x70>)
 8007034:	f7fe fd42 	bl	8005abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007038:	480b      	ldr	r0, [pc, #44]	; (8007068 <prvInitialiseTaskLists+0x74>)
 800703a:	f7fe fd3f 	bl	8005abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800703e:	4b0b      	ldr	r3, [pc, #44]	; (800706c <prvInitialiseTaskLists+0x78>)
 8007040:	4a05      	ldr	r2, [pc, #20]	; (8007058 <prvInitialiseTaskLists+0x64>)
 8007042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <prvInitialiseTaskLists+0x7c>)
 8007046:	4a05      	ldr	r2, [pc, #20]	; (800705c <prvInitialiseTaskLists+0x68>)
 8007048:	601a      	str	r2, [r3, #0]
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20001314 	.word	0x20001314
 8007058:	20001774 	.word	0x20001774
 800705c:	20001788 	.word	0x20001788
 8007060:	200017a4 	.word	0x200017a4
 8007064:	200017b8 	.word	0x200017b8
 8007068:	200017d0 	.word	0x200017d0
 800706c:	2000179c 	.word	0x2000179c
 8007070:	200017a0 	.word	0x200017a0

08007074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800707a:	e019      	b.n	80070b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800707c:	f000 fd66 	bl	8007b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <prvCheckTasksWaitingTermination+0x50>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd9b 	bl	8005bc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <prvCheckTasksWaitingTermination+0x54>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3b01      	subs	r3, #1
 8007098:	4a0b      	ldr	r2, [pc, #44]	; (80070c8 <prvCheckTasksWaitingTermination+0x54>)
 800709a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <prvCheckTasksWaitingTermination+0x58>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <prvCheckTasksWaitingTermination+0x58>)
 80070a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070a6:	f000 fd81 	bl	8007bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f810 	bl	80070d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <prvCheckTasksWaitingTermination+0x58>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e1      	bne.n	800707c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200017b8 	.word	0x200017b8
 80070c8:	200017e4 	.word	0x200017e4
 80070cc:	200017cc 	.word	0x200017cc

080070d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3354      	adds	r3, #84	; 0x54
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 f9ed 	bl	80084bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 feef 	bl	8007ed4 <vPortFree>
				vPortFree( pxTCB );
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 feec 	bl	8007ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070fc:	e018      	b.n	8007130 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007104:	2b01      	cmp	r3, #1
 8007106:	d103      	bne.n	8007110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fee3 	bl	8007ed4 <vPortFree>
	}
 800710e:	e00f      	b.n	8007130 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007116:	2b02      	cmp	r3, #2
 8007118:	d00a      	beq.n	8007130 <prvDeleteTCB+0x60>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	60fb      	str	r3, [r7, #12]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <prvDeleteTCB+0x5e>
	}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800713e:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <prvResetNextTaskUnblockTime+0x40>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <prvResetNextTaskUnblockTime+0x14>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <prvResetNextTaskUnblockTime+0x16>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvResetNextTaskUnblockTime+0x44>)
 8007154:	f04f 32ff 	mov.w	r2, #4294967295
 8007158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800715a:	e008      	b.n	800716e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <prvResetNextTaskUnblockTime+0x40>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	4a04      	ldr	r2, [pc, #16]	; (800717c <prvResetNextTaskUnblockTime+0x44>)
 800716c:	6013      	str	r3, [r2, #0]
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	2000179c 	.word	0x2000179c
 800717c:	20001804 	.word	0x20001804

08007180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <xTaskGetSchedulerState+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800718e:	2301      	movs	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	e008      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <xTaskGetSchedulerState+0x38>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800719c:	2302      	movs	r3, #2
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e001      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071a6:	687b      	ldr	r3, [r7, #4]
	}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200017f0 	.word	0x200017f0
 80071b8:	2000180c 	.word	0x2000180c

080071bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d056      	beq.n	8007280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <xTaskPriorityDisinherit+0xd0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d00a      	beq.n	80071f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60fb      	str	r3, [r7, #12]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60bb      	str	r3, [r7, #8]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007214:	1e5a      	subs	r2, r3, #1
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	429a      	cmp	r2, r3
 8007224:	d02c      	beq.n	8007280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	d128      	bne.n	8007280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fcc8 	bl	8005bc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <xTaskPriorityDisinherit+0xd4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d903      	bls.n	8007260 <xTaskPriorityDisinherit+0xa4>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <xTaskPriorityDisinherit+0xd4>)
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <xTaskPriorityDisinherit+0xd8>)
 800726e:	441a      	add	r2, r3
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7fe fc4b 	bl	8005b12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007280:	697b      	ldr	r3, [r7, #20]
	}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20001310 	.word	0x20001310
 8007290:	200017ec 	.word	0x200017ec
 8007294:	20001314 	.word	0x20001314

08007298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072a2:	4b21      	ldr	r3, [pc, #132]	; (8007328 <prvAddCurrentTaskToDelayedList+0x90>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe fc8a 	bl	8005bc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d10a      	bne.n	80072d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c2:	4b1a      	ldr	r3, [pc, #104]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4819      	ldr	r0, [pc, #100]	; (8007330 <prvAddCurrentTaskToDelayedList+0x98>)
 80072cc:	f7fe fc21 	bl	8005b12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072d0:	e026      	b.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4413      	add	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d209      	bcs.n	80072fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fc2e 	bl	8005b58 <vListInsert>
}
 80072fc:	e010      	b.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fe:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b0a      	ldr	r3, [pc, #40]	; (800732c <prvAddCurrentTaskToDelayedList+0x94>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe fc24 	bl	8005b58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	d202      	bcs.n	8007320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800731a:	4a08      	ldr	r2, [pc, #32]	; (800733c <prvAddCurrentTaskToDelayedList+0xa4>)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6013      	str	r3, [r2, #0]
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200017e8 	.word	0x200017e8
 800732c:	20001310 	.word	0x20001310
 8007330:	200017d0 	.word	0x200017d0
 8007334:	200017a0 	.word	0x200017a0
 8007338:	2000179c 	.word	0x2000179c
 800733c:	20001804 	.word	0x20001804

08007340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800734a:	f000 facb 	bl	80078e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800734e:	4b1c      	ldr	r3, [pc, #112]	; (80073c0 <xTimerCreateTimerTask+0x80>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d021      	beq.n	800739a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800735e:	1d3a      	adds	r2, r7, #4
 8007360:	f107 0108 	add.w	r1, r7, #8
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fb8d 	bl	8005a88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	2302      	movs	r3, #2
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	460a      	mov	r2, r1
 8007380:	4910      	ldr	r1, [pc, #64]	; (80073c4 <xTimerCreateTimerTask+0x84>)
 8007382:	4811      	ldr	r0, [pc, #68]	; (80073c8 <xTimerCreateTimerTask+0x88>)
 8007384:	f7ff f8fc 	bl	8006580 <xTaskCreateStatic>
 8007388:	4603      	mov	r3, r0
 800738a:	4a10      	ldr	r2, [pc, #64]	; (80073cc <xTimerCreateTimerTask+0x8c>)
 800738c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <xTimerCreateTimerTask+0x8c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	613b      	str	r3, [r7, #16]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20001840 	.word	0x20001840
 80073c4:	0800a0d0 	.word	0x0800a0d0
 80073c8:	080074ed 	.word	0x080074ed
 80073cc:	20001844 	.word	0x20001844

080073d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073de:	2300      	movs	r3, #0
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	623b      	str	r3, [r7, #32]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073fe:	4b1a      	ldr	r3, [pc, #104]	; (8007468 <xTimerGenericCommand+0x98>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d02a      	beq.n	800745c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b05      	cmp	r3, #5
 8007416:	dc18      	bgt.n	800744a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007418:	f7ff feb2 	bl	8007180 <xTaskGetSchedulerState>
 800741c:	4603      	mov	r3, r0
 800741e:	2b02      	cmp	r3, #2
 8007420:	d109      	bne.n	8007436 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <xTimerGenericCommand+0x98>)
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	f107 0110 	add.w	r1, r7, #16
 800742a:	2300      	movs	r3, #0
 800742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742e:	f7fe fce9 	bl	8005e04 <xQueueGenericSend>
 8007432:	6278      	str	r0, [r7, #36]	; 0x24
 8007434:	e012      	b.n	800745c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xTimerGenericCommand+0x98>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f107 0110 	add.w	r1, r7, #16
 800743e:	2300      	movs	r3, #0
 8007440:	2200      	movs	r2, #0
 8007442:	f7fe fcdf 	bl	8005e04 <xQueueGenericSend>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24
 8007448:	e008      	b.n	800745c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <xTimerGenericCommand+0x98>)
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f107 0110 	add.w	r1, r7, #16
 8007452:	2300      	movs	r3, #0
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f7fe fdbb 	bl	8005fd0 <xQueueGenericSendFromISR>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20001840 	.word	0x20001840

0800746c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <prvProcessExpiredTimer+0x7c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fb9f 	bl	8005bc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d122      	bne.n	80074d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	18d1      	adds	r1, r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	6978      	ldr	r0, [r7, #20]
 80074a0:	f000 f8c8 	bl	8007634 <prvInsertTimerInActiveList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074aa:	2300      	movs	r3, #0
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	2300      	movs	r3, #0
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	2100      	movs	r1, #0
 80074b4:	6978      	ldr	r0, [r7, #20]
 80074b6:	f7ff ff8b 	bl	80073d0 <xTimerGenericCommand>
 80074ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	60fb      	str	r3, [r7, #12]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	6978      	ldr	r0, [r7, #20]
 80074de:	4798      	blx	r3
}
 80074e0:	bf00      	nop
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20001838 	.word	0x20001838

080074ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074f4:	f107 0308 	add.w	r3, r7, #8
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f857 	bl	80075ac <prvGetNextExpireTime>
 80074fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4619      	mov	r1, r3
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f803 	bl	8007510 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800750a:	f000 f8d5 	bl	80076b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800750e:	e7f1      	b.n	80074f4 <prvTimerTask+0x8>

08007510 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800751a:	f7ff fa75 	bl	8006a08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f866 	bl	80075f4 <prvSampleTimeNow>
 8007528:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d130      	bne.n	8007592 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <prvProcessTimerOrBlockTask+0x3c>
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d806      	bhi.n	800754c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800753e:	f7ff fa71 	bl	8006a24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ff91 	bl	800746c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800754a:	e024      	b.n	8007596 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <prvProcessTimerOrBlockTask+0x90>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007564:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <prvProcessTimerOrBlockTask+0x94>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	f7fe ffd1 	bl	8006518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007576:	f7ff fa55 	bl	8006a24 <xTaskResumeAll>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <prvProcessTimerOrBlockTask+0x98>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
}
 8007590:	e001      	b.n	8007596 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007592:	f7ff fa47 	bl	8006a24 <xTaskResumeAll>
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000183c 	.word	0x2000183c
 80075a4:	20001840 	.word	0x20001840
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <prvGetNextExpireTime+0x44>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d2:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <prvGetNextExpireTime+0x44>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	e001      	b.n	80075e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20001838 	.word	0x20001838

080075f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075fc:	f7ff faa2 	bl	8006b44 <xTaskGetTickCount>
 8007600:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007602:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <prvSampleTimeNow+0x3c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	d205      	bcs.n	8007618 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800760c:	f000 f908 	bl	8007820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e002      	b.n	800761e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800761e:	4a04      	ldr	r2, [pc, #16]	; (8007630 <prvSampleTimeNow+0x3c>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20001848 	.word	0x20001848

08007634 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d812      	bhi.n	8007680 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e01b      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <prvInsertTimerInActiveList+0x7c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fe fa6d 	bl	8005b58 <vListInsert>
 800767e:	e012      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d206      	bcs.n	8007696 <prvInsertTimerInActiveList+0x62>
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e007      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <prvInsertTimerInActiveList+0x80>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f7fe fa59 	bl	8005b58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	2000183c 	.word	0x2000183c
 80076b4:	20001838 	.word	0x20001838

080076b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08e      	sub	sp, #56	; 0x38
 80076bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076be:	e09d      	b.n	80077fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da18      	bge.n	80076f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	3304      	adds	r3, #4
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	61fb      	str	r3, [r7, #28]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ee:	6850      	ldr	r0, [r2, #4]
 80076f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f2:	6892      	ldr	r2, [r2, #8]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db7d      	blt.n	80077fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fa5a 	bl	8005bc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007714:	463b      	mov	r3, r7
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff ff6c 	bl	80075f4 <prvSampleTimeNow>
 800771c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b09      	cmp	r3, #9
 8007722:	d86b      	bhi.n	80077fc <prvProcessReceivedCommands+0x144>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <prvProcessReceivedCommands+0x74>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007755 	.word	0x08007755
 8007730:	08007755 	.word	0x08007755
 8007734:	08007755 	.word	0x08007755
 8007738:	080077fd 	.word	0x080077fd
 800773c:	080077b1 	.word	0x080077b1
 8007740:	080077e9 	.word	0x080077e9
 8007744:	08007755 	.word	0x08007755
 8007748:	08007755 	.word	0x08007755
 800774c:	080077fd 	.word	0x080077fd
 8007750:	080077b1 	.word	0x080077b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	18d1      	adds	r1, r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007762:	f7ff ff67 	bl	8007634 <prvInsertTimerInActiveList>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d047      	beq.n	80077fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007772:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d13f      	bne.n	80077fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	441a      	add	r2, r3
 8007784:	2300      	movs	r3, #0
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	2300      	movs	r3, #0
 800778a:	2100      	movs	r1, #0
 800778c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800778e:	f7ff fe1f 	bl	80073d0 <xTimerGenericCommand>
 8007792:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d130      	bne.n	80077fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	61bb      	str	r3, [r7, #24]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	617b      	str	r3, [r7, #20]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	18d1      	adds	r1, r2, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e2:	f7ff ff27 	bl	8007634 <prvInsertTimerInActiveList>
					break;
 80077e6:	e009      	b.n	80077fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80077f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f4:	f000 fb6e 	bl	8007ed4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077f8:	e000      	b.n	80077fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <prvProcessReceivedCommands+0x164>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	1d39      	adds	r1, r7, #4
 8007802:	2200      	movs	r2, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fc7b 	bl	8006100 <xQueueReceive>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	f47f af57 	bne.w	80076c0 <prvProcessReceivedCommands+0x8>
	}
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	3730      	adds	r7, #48	; 0x30
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20001840 	.word	0x20001840

08007820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007826:	e045      	b.n	80078b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007828:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <prvSwitchTimerLists+0xbc>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007832:	4b2a      	ldr	r3, [pc, #168]	; (80078dc <prvSwitchTimerLists+0xbc>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3304      	adds	r3, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe f9c1 	bl	8005bc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d12e      	bne.n	80078b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4413      	add	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	429a      	cmp	r2, r3
 8007866:	d90e      	bls.n	8007886 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <prvSwitchTimerLists+0xbc>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3304      	adds	r3, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f7fe f96a 	bl	8005b58 <vListInsert>
 8007884:	e016      	b.n	80078b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007886:	2300      	movs	r3, #0
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	2300      	movs	r3, #0
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	2100      	movs	r1, #0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fd9d 	bl	80073d0 <xTimerGenericCommand>
 8007896:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	603b      	str	r3, [r7, #0]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <prvSwitchTimerLists+0xbc>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1b4      	bne.n	8007828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <prvSwitchTimerLists+0xbc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078c4:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <prvSwitchTimerLists+0xc0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a04      	ldr	r2, [pc, #16]	; (80078dc <prvSwitchTimerLists+0xbc>)
 80078ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078cc:	4a04      	ldr	r2, [pc, #16]	; (80078e0 <prvSwitchTimerLists+0xc0>)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6013      	str	r3, [r2, #0]
}
 80078d2:	bf00      	nop
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20001838 	.word	0x20001838
 80078e0:	2000183c 	.word	0x2000183c

080078e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078ea:	f000 f92f 	bl	8007b4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d120      	bne.n	8007938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078f6:	4814      	ldr	r0, [pc, #80]	; (8007948 <prvCheckForValidListAndQueue+0x64>)
 80078f8:	f7fe f8e0 	bl	8005abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078fc:	4813      	ldr	r0, [pc, #76]	; (800794c <prvCheckForValidListAndQueue+0x68>)
 80078fe:	f7fe f8dd 	bl	8005abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <prvCheckForValidListAndQueue+0x6c>)
 8007904:	4a10      	ldr	r2, [pc, #64]	; (8007948 <prvCheckForValidListAndQueue+0x64>)
 8007906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007908:	4b12      	ldr	r3, [pc, #72]	; (8007954 <prvCheckForValidListAndQueue+0x70>)
 800790a:	4a10      	ldr	r2, [pc, #64]	; (800794c <prvCheckForValidListAndQueue+0x68>)
 800790c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4b11      	ldr	r3, [pc, #68]	; (8007958 <prvCheckForValidListAndQueue+0x74>)
 8007914:	4a11      	ldr	r2, [pc, #68]	; (800795c <prvCheckForValidListAndQueue+0x78>)
 8007916:	2110      	movs	r1, #16
 8007918:	200a      	movs	r0, #10
 800791a:	f7fe f9d9 	bl	8005cd0 <xQueueGenericCreateStatic>
 800791e:	4603      	mov	r3, r0
 8007920:	4a08      	ldr	r2, [pc, #32]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 8007922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007924:	4b07      	ldr	r3, [pc, #28]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	490b      	ldr	r1, [pc, #44]	; (8007960 <prvCheckForValidListAndQueue+0x7c>)
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fdc8 	bl	80064c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007938:	f000 f938 	bl	8007bac <vPortExitCritical>
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20001840 	.word	0x20001840
 8007948:	20001810 	.word	0x20001810
 800794c:	20001824 	.word	0x20001824
 8007950:	20001838 	.word	0x20001838
 8007954:	2000183c 	.word	0x2000183c
 8007958:	200018ec 	.word	0x200018ec
 800795c:	2000184c 	.word	0x2000184c
 8007960:	0800a0d8 	.word	0x0800a0d8

08007964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3b04      	subs	r3, #4
 8007974:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800797c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3b04      	subs	r3, #4
 8007982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b04      	subs	r3, #4
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007994:	4a08      	ldr	r2, [pc, #32]	; (80079b8 <pxPortInitialiseStack+0x54>)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b14      	subs	r3, #20
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b20      	subs	r3, #32
 80079aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr
 80079b8:	080079bd 	.word	0x080079bd

080079bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <prvTaskExitError+0x54>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d00a      	beq.n	80079e6 <prvTaskExitError+0x2a>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <prvTaskExitError+0x28>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60bb      	str	r3, [r7, #8]
}
 80079f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079fa:	bf00      	nop
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0fc      	beq.n	80079fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000054 	.word	0x20000054
	...

08007a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <pxCurrentTCBConst2>)
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	6808      	ldr	r0, [r1, #0]
 8007a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a2a:	f380 8809 	msr	PSP, r0
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007a3e:	4770      	bx	lr

08007a40 <pxCurrentTCBConst2>:
 8007a40:	20001310 	.word	0x20001310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007a48:	4806      	ldr	r0, [pc, #24]	; (8007a64 <prvPortStartFirstTask+0x1c>)
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	f380 8808 	msr	MSP, r0
 8007a52:	b662      	cpsie	i
 8007a54:	b661      	cpsie	f
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	df00      	svc	0
 8007a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a62:	bf00      	nop
 8007a64:	e000ed08 	.word	0xe000ed08

08007a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a6e:	4b32      	ldr	r3, [pc, #200]	; (8007b38 <xPortStartScheduler+0xd0>)
 8007a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <xPortStartScheduler+0xd4>)
 8007a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a96:	4b2a      	ldr	r3, [pc, #168]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007a98:	2207      	movs	r2, #7
 8007a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a9c:	e009      	b.n	8007ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a9e:	4b28      	ldr	r3, [pc, #160]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d0ef      	beq.n	8007a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007abe:	4b20      	ldr	r3, [pc, #128]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f1c3 0307 	rsb	r3, r3, #7
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d00a      	beq.n	8007ae0 <xPortStartScheduler+0x78>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60bb      	str	r3, [r7, #8]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ae0:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	4a16      	ldr	r2, [pc, #88]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007ae8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aea:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007af2:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <xPortStartScheduler+0xd8>)
 8007af4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <xPortStartScheduler+0xdc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <xPortStartScheduler+0xdc>)
 8007b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b0a:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <xPortStartScheduler+0xdc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a0d      	ldr	r2, [pc, #52]	; (8007b44 <xPortStartScheduler+0xdc>)
 8007b10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b16:	f000 f8b9 	bl	8007c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <xPortStartScheduler+0xe0>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b20:	f7ff ff92 	bl	8007a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b24:	f7ff f8b8 	bl	8006c98 <vTaskSwitchContext>
	prvTaskExitError();
 8007b28:	f7ff ff48 	bl	80079bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	e000e400 	.word	0xe000e400
 8007b3c:	2000193c 	.word	0x2000193c
 8007b40:	20001940 	.word	0x20001940
 8007b44:	e000ed20 	.word	0xe000ed20
 8007b48:	20000054 	.word	0x20000054

08007b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	607b      	str	r3, [r7, #4]
}
 8007b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b66:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <vPortEnterCritical+0x58>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ba4 <vPortEnterCritical+0x58>)
 8007b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b70:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <vPortEnterCritical+0x58>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d10f      	bne.n	8007b98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b78:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <vPortEnterCritical+0x5c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	603b      	str	r3, [r7, #0]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <vPortEnterCritical+0x4a>
	}
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000054 	.word	0x20000054
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <vPortExitCritical+0x4c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <vPortExitCritical+0x24>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <vPortExitCritical+0x4c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <vPortExitCritical+0x4c>)
 8007bd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <vPortExitCritical+0x4c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d105      	bne.n	8007bee <vPortExitCritical+0x42>
 8007be2:	2300      	movs	r3, #0
 8007be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f383 8811 	msr	BASEPRI, r3
}
 8007bec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr
 8007bf8:	20000054 	.word	0x20000054
 8007bfc:	00000000 	.word	0x00000000

08007c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c00:	f3ef 8009 	mrs	r0, PSP
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <pxCurrentTCBConst>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c10:	6010      	str	r0, [r2, #0]
 8007c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007c16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c1a:	f380 8811 	msr	BASEPRI, r0
 8007c1e:	f7ff f83b 	bl	8006c98 <vTaskSwitchContext>
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c36:	f380 8809 	msr	PSP, r0
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	4770      	bx	lr

08007c40 <pxCurrentTCBConst>:
 8007c40:	20001310 	.word	0x20001310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f7fe ff7d 	bl	8006b60 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <SysTick_Handler+0x40>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
}
 8007c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <vPortSetupTimerInterrupt+0x30>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c96:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <vPortSetupTimerInterrupt+0x38>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <vPortSetupTimerInterrupt+0x3c>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <vPortSetupTimerInterrupt+0x40>)
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	4b03      	ldr	r3, [pc, #12]	; (8007cbc <vPortSetupTimerInterrupt+0x30>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	e000e010 	.word	0xe000e010
 8007cc0:	e000e018 	.word	0xe000e018
 8007cc4:	20000020 	.word	0x20000020
 8007cc8:	10624dd3 	.word	0x10624dd3
 8007ccc:	e000e014 	.word	0xe000e014

08007cd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cd6:	f3ef 8305 	mrs	r3, IPSR
 8007cda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b0f      	cmp	r3, #15
 8007ce0:	d914      	bls.n	8007d0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ce2:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <vPortValidateInterruptPriority+0x6c>)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cec:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <vPortValidateInterruptPriority+0x70>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	7afa      	ldrb	r2, [r7, #11]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d20a      	bcs.n	8007d0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	607b      	str	r3, [r7, #4]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <vPortValidateInterruptPriority+0x74>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <vPortValidateInterruptPriority+0x78>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d90a      	bls.n	8007d32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	603b      	str	r3, [r7, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vPortValidateInterruptPriority+0x60>
	}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	e000e3f0 	.word	0xe000e3f0
 8007d40:	2000193c 	.word	0x2000193c
 8007d44:	e000ed0c 	.word	0xe000ed0c
 8007d48:	20001940 	.word	0x20001940

08007d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d58:	f7fe fe56 	bl	8006a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d5c:	4b58      	ldr	r3, [pc, #352]	; (8007ec0 <pvPortMalloc+0x174>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d64:	f000 f910 	bl	8007f88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d68:	4b56      	ldr	r3, [pc, #344]	; (8007ec4 <pvPortMalloc+0x178>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f040 808e 	bne.w	8007e92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01d      	beq.n	8007db8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4413      	add	r3, r2
 8007d82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d014      	beq.n	8007db8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	3308      	adds	r3, #8
 8007d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <pvPortMalloc+0x6c>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	617b      	str	r3, [r7, #20]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d069      	beq.n	8007e92 <pvPortMalloc+0x146>
 8007dbe:	4b42      	ldr	r3, [pc, #264]	; (8007ec8 <pvPortMalloc+0x17c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d864      	bhi.n	8007e92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dc8:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <pvPortMalloc+0x180>)
 8007dca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <pvPortMalloc+0x180>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dd2:	e004      	b.n	8007dde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d903      	bls.n	8007df0 <pvPortMalloc+0xa4>
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f1      	bne.n	8007dd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007df0:	4b33      	ldr	r3, [pc, #204]	; (8007ec0 <pvPortMalloc+0x174>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d04b      	beq.n	8007e92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	4413      	add	r3, r2
 8007e02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	2308      	movs	r3, #8
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d91f      	bls.n	8007e5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <pvPortMalloc+0xf8>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	613b      	str	r3, [r7, #16]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e56:	69b8      	ldr	r0, [r7, #24]
 8007e58:	f000 f8f8 	bl	800804c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <pvPortMalloc+0x17c>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <pvPortMalloc+0x17c>)
 8007e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e6a:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <pvPortMalloc+0x17c>)
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <pvPortMalloc+0x184>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d203      	bcs.n	8007e7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <pvPortMalloc+0x17c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <pvPortMalloc+0x184>)
 8007e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <pvPortMalloc+0x178>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	2200      	movs	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e92:	f7fe fdc7 	bl	8006a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <pvPortMalloc+0x16a>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	60fb      	str	r3, [r7, #12]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <pvPortMalloc+0x168>
	return pvReturn;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3728      	adds	r7, #40	; 0x28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	2000254c 	.word	0x2000254c
 8007ec4:	20002558 	.word	0x20002558
 8007ec8:	20002550 	.word	0x20002550
 8007ecc:	20002544 	.word	0x20002544
 8007ed0:	20002554 	.word	0x20002554

08007ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d048      	beq.n	8007f78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	425b      	negs	r3, r3
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4413      	add	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <vPortFree+0xac>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <vPortFree+0x44>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	60fb      	str	r3, [r7, #12]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <vPortFree+0x62>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <vPortFree+0xac>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d019      	beq.n	8007f78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d115      	bne.n	8007f78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortFree+0xac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	43db      	mvns	r3, r3
 8007f56:	401a      	ands	r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f5c:	f7fe fd54 	bl	8006a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <vPortFree+0xb0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4413      	add	r3, r2
 8007f6a:	4a06      	ldr	r2, [pc, #24]	; (8007f84 <vPortFree+0xb0>)
 8007f6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f6e:	6938      	ldr	r0, [r7, #16]
 8007f70:	f000 f86c 	bl	800804c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f74:	f7fe fd56 	bl	8006a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f78:	bf00      	nop
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20002558 	.word	0x20002558
 8007f84:	20002550 	.word	0x20002550

08007f88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <prvHeapInit+0xac>)
 8007f96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00c      	beq.n	8007fbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3307      	adds	r3, #7
 8007fa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0307 	bic.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <prvHeapInit+0xac>)
 8007fb8:	4413      	add	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	; (8008038 <prvHeapInit+0xb0>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <prvHeapInit+0xb0>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0307 	bic.w	r3, r3, #7
 8007fe2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <prvHeapInit+0xb4>)
 8007fe8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <prvHeapInit+0xb4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <prvHeapInit+0xb4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <prvHeapInit+0xb4>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <prvHeapInit+0xb8>)
 8008016:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a09      	ldr	r2, [pc, #36]	; (8008044 <prvHeapInit+0xbc>)
 800801e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008020:	4b09      	ldr	r3, [pc, #36]	; (8008048 <prvHeapInit+0xc0>)
 8008022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008026:	601a      	str	r2, [r3, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20001944 	.word	0x20001944
 8008038:	20002544 	.word	0x20002544
 800803c:	2000254c 	.word	0x2000254c
 8008040:	20002554 	.word	0x20002554
 8008044:	20002550 	.word	0x20002550
 8008048:	20002558 	.word	0x20002558

0800804c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008054:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <prvInsertBlockIntoFreeList+0xa8>)
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e002      	b.n	8008060 <prvInsertBlockIntoFreeList+0x14>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	429a      	cmp	r2, r3
 8008068:	d8f7      	bhi.n	800805a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	4413      	add	r3, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	d108      	bne.n	800808e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	441a      	add	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d118      	bne.n	80080d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b14      	ldr	r3, [pc, #80]	; (80080f8 <prvInsertBlockIntoFreeList+0xac>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d00d      	beq.n	80080ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	441a      	add	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e008      	b.n	80080dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <prvInsertBlockIntoFreeList+0xac>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e003      	b.n	80080dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d002      	beq.n	80080ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr
 80080f4:	20002544 	.word	0x20002544
 80080f8:	2000254c 	.word	0x2000254c

080080fc <atoi>:
 80080fc:	220a      	movs	r2, #10
 80080fe:	2100      	movs	r1, #0
 8008100:	f000 bbc2 	b.w	8008888 <strtol>

08008104 <__errno>:
 8008104:	4b01      	ldr	r3, [pc, #4]	; (800810c <__errno+0x8>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000058 	.word	0x20000058

08008110 <std>:
 8008110:	2300      	movs	r3, #0
 8008112:	b510      	push	{r4, lr}
 8008114:	4604      	mov	r4, r0
 8008116:	e9c0 3300 	strd	r3, r3, [r0]
 800811a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800811e:	6083      	str	r3, [r0, #8]
 8008120:	8181      	strh	r1, [r0, #12]
 8008122:	6643      	str	r3, [r0, #100]	; 0x64
 8008124:	81c2      	strh	r2, [r0, #14]
 8008126:	6183      	str	r3, [r0, #24]
 8008128:	4619      	mov	r1, r3
 800812a:	2208      	movs	r2, #8
 800812c:	305c      	adds	r0, #92	; 0x5c
 800812e:	f000 f91a 	bl	8008366 <memset>
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x38>)
 8008134:	6224      	str	r4, [r4, #32]
 8008136:	6263      	str	r3, [r4, #36]	; 0x24
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <std+0x3c>)
 800813a:	62a3      	str	r3, [r4, #40]	; 0x28
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <std+0x40>)
 800813e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <std+0x44>)
 8008142:	6323      	str	r3, [r4, #48]	; 0x30
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	08008629 	.word	0x08008629
 800814c:	0800864f 	.word	0x0800864f
 8008150:	08008687 	.word	0x08008687
 8008154:	080086ab 	.word	0x080086ab

08008158 <_cleanup_r>:
 8008158:	4901      	ldr	r1, [pc, #4]	; (8008160 <_cleanup_r+0x8>)
 800815a:	f000 b8af 	b.w	80082bc <_fwalk_reent>
 800815e:	bf00      	nop
 8008160:	08008a21 	.word	0x08008a21

08008164 <__sfmoreglue>:
 8008164:	2268      	movs	r2, #104	; 0x68
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	1e4d      	subs	r5, r1, #1
 800816a:	4355      	muls	r5, r2
 800816c:	460e      	mov	r6, r1
 800816e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008172:	f000 f921 	bl	80083b8 <_malloc_r>
 8008176:	4604      	mov	r4, r0
 8008178:	b140      	cbz	r0, 800818c <__sfmoreglue+0x28>
 800817a:	2100      	movs	r1, #0
 800817c:	e9c0 1600 	strd	r1, r6, [r0]
 8008180:	300c      	adds	r0, #12
 8008182:	60a0      	str	r0, [r4, #8]
 8008184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008188:	f000 f8ed 	bl	8008366 <memset>
 800818c:	4620      	mov	r0, r4
 800818e:	bd70      	pop	{r4, r5, r6, pc}

08008190 <__sfp_lock_acquire>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__sfp_lock_acquire+0x8>)
 8008192:	f000 b8d8 	b.w	8008346 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	2000255d 	.word	0x2000255d

0800819c <__sfp_lock_release>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__sfp_lock_release+0x8>)
 800819e:	f000 b8d3 	b.w	8008348 <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	2000255d 	.word	0x2000255d

080081a8 <__sinit_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	; (80081b0 <__sinit_lock_acquire+0x8>)
 80081aa:	f000 b8cc 	b.w	8008346 <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	2000255e 	.word	0x2000255e

080081b4 <__sinit_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__sinit_lock_release+0x8>)
 80081b6:	f000 b8c7 	b.w	8008348 <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	2000255e 	.word	0x2000255e

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sinit_lock_acquire>
 80081c8:	69a3      	ldr	r3, [r4, #24]
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sinit_lock_release>
 80081d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081d8:	6523      	str	r3, [r4, #80]	; 0x50
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <__sinit+0x68>)
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <__sinit+0x6c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	bf08      	it	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	4620      	mov	r0, r4
 80081ea:	bf08      	it	eq
 80081ec:	61a3      	streq	r3, [r4, #24]
 80081ee:	f000 f81f 	bl	8008230 <__sfp>
 80081f2:	6060      	str	r0, [r4, #4]
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 f81b 	bl	8008230 <__sfp>
 80081fa:	60a0      	str	r0, [r4, #8]
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 f817 	bl	8008230 <__sfp>
 8008202:	2200      	movs	r2, #0
 8008204:	2104      	movs	r1, #4
 8008206:	60e0      	str	r0, [r4, #12]
 8008208:	6860      	ldr	r0, [r4, #4]
 800820a:	f7ff ff81 	bl	8008110 <std>
 800820e:	2201      	movs	r2, #1
 8008210:	2109      	movs	r1, #9
 8008212:	68a0      	ldr	r0, [r4, #8]
 8008214:	f7ff ff7c 	bl	8008110 <std>
 8008218:	2202      	movs	r2, #2
 800821a:	2112      	movs	r1, #18
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	f7ff ff77 	bl	8008110 <std>
 8008222:	2301      	movs	r3, #1
 8008224:	61a3      	str	r3, [r4, #24]
 8008226:	e7d1      	b.n	80081cc <__sinit+0xc>
 8008228:	0800a1ac 	.word	0x0800a1ac
 800822c:	08008159 	.word	0x08008159

08008230 <__sfp>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	4607      	mov	r7, r0
 8008234:	f7ff ffac 	bl	8008190 <__sfp_lock_acquire>
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <__sfp+0x84>)
 800823a:	681e      	ldr	r6, [r3, #0]
 800823c:	69b3      	ldr	r3, [r6, #24]
 800823e:	b913      	cbnz	r3, 8008246 <__sfp+0x16>
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff ffbd 	bl	80081c0 <__sinit>
 8008246:	3648      	adds	r6, #72	; 0x48
 8008248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	d503      	bpl.n	8008258 <__sfp+0x28>
 8008250:	6833      	ldr	r3, [r6, #0]
 8008252:	b30b      	cbz	r3, 8008298 <__sfp+0x68>
 8008254:	6836      	ldr	r6, [r6, #0]
 8008256:	e7f7      	b.n	8008248 <__sfp+0x18>
 8008258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800825c:	b9d5      	cbnz	r5, 8008294 <__sfp+0x64>
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <__sfp+0x88>)
 8008260:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008264:	60e3      	str	r3, [r4, #12]
 8008266:	6665      	str	r5, [r4, #100]	; 0x64
 8008268:	f000 f86c 	bl	8008344 <__retarget_lock_init_recursive>
 800826c:	f7ff ff96 	bl	800819c <__sfp_lock_release>
 8008270:	2208      	movs	r2, #8
 8008272:	4629      	mov	r1, r5
 8008274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800827c:	6025      	str	r5, [r4, #0]
 800827e:	61a5      	str	r5, [r4, #24]
 8008280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008284:	f000 f86f 	bl	8008366 <memset>
 8008288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800828c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008290:	4620      	mov	r0, r4
 8008292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008294:	3468      	adds	r4, #104	; 0x68
 8008296:	e7d9      	b.n	800824c <__sfp+0x1c>
 8008298:	2104      	movs	r1, #4
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff ff62 	bl	8008164 <__sfmoreglue>
 80082a0:	4604      	mov	r4, r0
 80082a2:	6030      	str	r0, [r6, #0]
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1d5      	bne.n	8008254 <__sfp+0x24>
 80082a8:	f7ff ff78 	bl	800819c <__sfp_lock_release>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	e7ee      	b.n	8008290 <__sfp+0x60>
 80082b2:	bf00      	nop
 80082b4:	0800a1ac 	.word	0x0800a1ac
 80082b8:	ffff0001 	.word	0xffff0001

080082bc <_fwalk_reent>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4606      	mov	r6, r0
 80082c2:	4688      	mov	r8, r1
 80082c4:	2700      	movs	r7, #0
 80082c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ce:	f1b9 0901 	subs.w	r9, r9, #1
 80082d2:	d505      	bpl.n	80082e0 <_fwalk_reent+0x24>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d1f7      	bne.n	80082ca <_fwalk_reent+0xe>
 80082da:	4638      	mov	r0, r7
 80082dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e0:	89ab      	ldrh	r3, [r5, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d907      	bls.n	80082f6 <_fwalk_reent+0x3a>
 80082e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ea:	3301      	adds	r3, #1
 80082ec:	d003      	beq.n	80082f6 <_fwalk_reent+0x3a>
 80082ee:	4629      	mov	r1, r5
 80082f0:	4630      	mov	r0, r6
 80082f2:	47c0      	blx	r8
 80082f4:	4307      	orrs	r7, r0
 80082f6:	3568      	adds	r5, #104	; 0x68
 80082f8:	e7e9      	b.n	80082ce <_fwalk_reent+0x12>
	...

080082fc <__libc_init_array>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	2600      	movs	r6, #0
 8008300:	4d0c      	ldr	r5, [pc, #48]	; (8008334 <__libc_init_array+0x38>)
 8008302:	4c0d      	ldr	r4, [pc, #52]	; (8008338 <__libc_init_array+0x3c>)
 8008304:	1b64      	subs	r4, r4, r5
 8008306:	10a4      	asrs	r4, r4, #2
 8008308:	42a6      	cmp	r6, r4
 800830a:	d109      	bne.n	8008320 <__libc_init_array+0x24>
 800830c:	f001 fe9c 	bl	800a048 <_init>
 8008310:	2600      	movs	r6, #0
 8008312:	4d0a      	ldr	r5, [pc, #40]	; (800833c <__libc_init_array+0x40>)
 8008314:	4c0a      	ldr	r4, [pc, #40]	; (8008340 <__libc_init_array+0x44>)
 8008316:	1b64      	subs	r4, r4, r5
 8008318:	10a4      	asrs	r4, r4, #2
 800831a:	42a6      	cmp	r6, r4
 800831c:	d105      	bne.n	800832a <__libc_init_array+0x2e>
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	f855 3b04 	ldr.w	r3, [r5], #4
 8008324:	4798      	blx	r3
 8008326:	3601      	adds	r6, #1
 8008328:	e7ee      	b.n	8008308 <__libc_init_array+0xc>
 800832a:	f855 3b04 	ldr.w	r3, [r5], #4
 800832e:	4798      	blx	r3
 8008330:	3601      	adds	r6, #1
 8008332:	e7f2      	b.n	800831a <__libc_init_array+0x1e>
 8008334:	0800a3b0 	.word	0x0800a3b0
 8008338:	0800a3b0 	.word	0x0800a3b0
 800833c:	0800a3b0 	.word	0x0800a3b0
 8008340:	0800a3b4 	.word	0x0800a3b4

08008344 <__retarget_lock_init_recursive>:
 8008344:	4770      	bx	lr

08008346 <__retarget_lock_acquire_recursive>:
 8008346:	4770      	bx	lr

08008348 <__retarget_lock_release_recursive>:
 8008348:	4770      	bx	lr

0800834a <memcpy>:
 800834a:	440a      	add	r2, r1
 800834c:	4291      	cmp	r1, r2
 800834e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008352:	d100      	bne.n	8008356 <memcpy+0xc>
 8008354:	4770      	bx	lr
 8008356:	b510      	push	{r4, lr}
 8008358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800835c:	4291      	cmp	r1, r2
 800835e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008362:	d1f9      	bne.n	8008358 <memcpy+0xe>
 8008364:	bd10      	pop	{r4, pc}

08008366 <memset>:
 8008366:	4603      	mov	r3, r0
 8008368:	4402      	add	r2, r0
 800836a:	4293      	cmp	r3, r2
 800836c:	d100      	bne.n	8008370 <memset+0xa>
 800836e:	4770      	bx	lr
 8008370:	f803 1b01 	strb.w	r1, [r3], #1
 8008374:	e7f9      	b.n	800836a <memset+0x4>
	...

08008378 <sbrk_aligned>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0e      	ldr	r6, [pc, #56]	; (80083b4 <sbrk_aligned+0x3c>)
 800837c:	460c      	mov	r4, r1
 800837e:	6831      	ldr	r1, [r6, #0]
 8008380:	4605      	mov	r5, r0
 8008382:	b911      	cbnz	r1, 800838a <sbrk_aligned+0x12>
 8008384:	f000 f8f6 	bl	8008574 <_sbrk_r>
 8008388:	6030      	str	r0, [r6, #0]
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 f8f1 	bl	8008574 <_sbrk_r>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d00a      	beq.n	80083ac <sbrk_aligned+0x34>
 8008396:	1cc4      	adds	r4, r0, #3
 8008398:	f024 0403 	bic.w	r4, r4, #3
 800839c:	42a0      	cmp	r0, r4
 800839e:	d007      	beq.n	80083b0 <sbrk_aligned+0x38>
 80083a0:	1a21      	subs	r1, r4, r0
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f8e6 	bl	8008574 <_sbrk_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d101      	bne.n	80083b0 <sbrk_aligned+0x38>
 80083ac:	f04f 34ff 	mov.w	r4, #4294967295
 80083b0:	4620      	mov	r0, r4
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	20002564 	.word	0x20002564

080083b8 <_malloc_r>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4607      	mov	r7, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d905      	bls.n	80083e0 <_malloc_r+0x28>
 80083d4:	230c      	movs	r3, #12
 80083d6:	2600      	movs	r6, #0
 80083d8:	603b      	str	r3, [r7, #0]
 80083da:	4630      	mov	r0, r6
 80083dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e0:	4e2e      	ldr	r6, [pc, #184]	; (800849c <_malloc_r+0xe4>)
 80083e2:	f000 fb85 	bl	8008af0 <__malloc_lock>
 80083e6:	6833      	ldr	r3, [r6, #0]
 80083e8:	461c      	mov	r4, r3
 80083ea:	bb34      	cbnz	r4, 800843a <_malloc_r+0x82>
 80083ec:	4629      	mov	r1, r5
 80083ee:	4638      	mov	r0, r7
 80083f0:	f7ff ffc2 	bl	8008378 <sbrk_aligned>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	4604      	mov	r4, r0
 80083f8:	d14d      	bne.n	8008496 <_malloc_r+0xde>
 80083fa:	6834      	ldr	r4, [r6, #0]
 80083fc:	4626      	mov	r6, r4
 80083fe:	2e00      	cmp	r6, #0
 8008400:	d140      	bne.n	8008484 <_malloc_r+0xcc>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4631      	mov	r1, r6
 8008406:	4638      	mov	r0, r7
 8008408:	eb04 0803 	add.w	r8, r4, r3
 800840c:	f000 f8b2 	bl	8008574 <_sbrk_r>
 8008410:	4580      	cmp	r8, r0
 8008412:	d13a      	bne.n	800848a <_malloc_r+0xd2>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	3503      	adds	r5, #3
 8008418:	1a6d      	subs	r5, r5, r1
 800841a:	f025 0503 	bic.w	r5, r5, #3
 800841e:	3508      	adds	r5, #8
 8008420:	2d0c      	cmp	r5, #12
 8008422:	bf38      	it	cc
 8008424:	250c      	movcc	r5, #12
 8008426:	4638      	mov	r0, r7
 8008428:	4629      	mov	r1, r5
 800842a:	f7ff ffa5 	bl	8008378 <sbrk_aligned>
 800842e:	3001      	adds	r0, #1
 8008430:	d02b      	beq.n	800848a <_malloc_r+0xd2>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	442b      	add	r3, r5
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	e00e      	b.n	8008458 <_malloc_r+0xa0>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	1b52      	subs	r2, r2, r5
 800843e:	d41e      	bmi.n	800847e <_malloc_r+0xc6>
 8008440:	2a0b      	cmp	r2, #11
 8008442:	d916      	bls.n	8008472 <_malloc_r+0xba>
 8008444:	1961      	adds	r1, r4, r5
 8008446:	42a3      	cmp	r3, r4
 8008448:	6025      	str	r5, [r4, #0]
 800844a:	bf18      	it	ne
 800844c:	6059      	strne	r1, [r3, #4]
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	bf08      	it	eq
 8008452:	6031      	streq	r1, [r6, #0]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4638      	mov	r0, r7
 800845a:	f104 060b 	add.w	r6, r4, #11
 800845e:	f000 fb4d 	bl	8008afc <__malloc_unlock>
 8008462:	f026 0607 	bic.w	r6, r6, #7
 8008466:	1d23      	adds	r3, r4, #4
 8008468:	1af2      	subs	r2, r6, r3
 800846a:	d0b6      	beq.n	80083da <_malloc_r+0x22>
 800846c:	1b9b      	subs	r3, r3, r6
 800846e:	50a3      	str	r3, [r4, r2]
 8008470:	e7b3      	b.n	80083da <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	6032      	streq	r2, [r6, #0]
 800847a:	605a      	strne	r2, [r3, #4]
 800847c:	e7ec      	b.n	8008458 <_malloc_r+0xa0>
 800847e:	4623      	mov	r3, r4
 8008480:	6864      	ldr	r4, [r4, #4]
 8008482:	e7b2      	b.n	80083ea <_malloc_r+0x32>
 8008484:	4634      	mov	r4, r6
 8008486:	6876      	ldr	r6, [r6, #4]
 8008488:	e7b9      	b.n	80083fe <_malloc_r+0x46>
 800848a:	230c      	movs	r3, #12
 800848c:	4638      	mov	r0, r7
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f000 fb34 	bl	8008afc <__malloc_unlock>
 8008494:	e7a1      	b.n	80083da <_malloc_r+0x22>
 8008496:	6025      	str	r5, [r4, #0]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa0>
 800849a:	bf00      	nop
 800849c:	20002560 	.word	0x20002560

080084a0 <cleanup_glue>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	6809      	ldr	r1, [r1, #0]
 80084a6:	4605      	mov	r5, r0
 80084a8:	b109      	cbz	r1, 80084ae <cleanup_glue+0xe>
 80084aa:	f7ff fff9 	bl	80084a0 <cleanup_glue>
 80084ae:	4621      	mov	r1, r4
 80084b0:	4628      	mov	r0, r5
 80084b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b6:	f000 bb27 	b.w	8008b08 <_free_r>
	...

080084bc <_reclaim_reent>:
 80084bc:	4b2c      	ldr	r3, [pc, #176]	; (8008570 <_reclaim_reent+0xb4>)
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4604      	mov	r4, r0
 80084c4:	4283      	cmp	r3, r0
 80084c6:	d051      	beq.n	800856c <_reclaim_reent+0xb0>
 80084c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80084ca:	b143      	cbz	r3, 80084de <_reclaim_reent+0x22>
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d14a      	bne.n	8008568 <_reclaim_reent+0xac>
 80084d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d4:	6819      	ldr	r1, [r3, #0]
 80084d6:	b111      	cbz	r1, 80084de <_reclaim_reent+0x22>
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fb15 	bl	8008b08 <_free_r>
 80084de:	6961      	ldr	r1, [r4, #20]
 80084e0:	b111      	cbz	r1, 80084e8 <_reclaim_reent+0x2c>
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fb10 	bl	8008b08 <_free_r>
 80084e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084ea:	b111      	cbz	r1, 80084f2 <_reclaim_reent+0x36>
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fb0b 	bl	8008b08 <_free_r>
 80084f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084f4:	b111      	cbz	r1, 80084fc <_reclaim_reent+0x40>
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fb06 	bl	8008b08 <_free_r>
 80084fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084fe:	b111      	cbz	r1, 8008506 <_reclaim_reent+0x4a>
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fb01 	bl	8008b08 <_free_r>
 8008506:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008508:	b111      	cbz	r1, 8008510 <_reclaim_reent+0x54>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fafc 	bl	8008b08 <_free_r>
 8008510:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008512:	b111      	cbz	r1, 800851a <_reclaim_reent+0x5e>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 faf7 	bl	8008b08 <_free_r>
 800851a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800851c:	b111      	cbz	r1, 8008524 <_reclaim_reent+0x68>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 faf2 	bl	8008b08 <_free_r>
 8008524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008526:	b111      	cbz	r1, 800852e <_reclaim_reent+0x72>
 8008528:	4620      	mov	r0, r4
 800852a:	f000 faed 	bl	8008b08 <_free_r>
 800852e:	69a3      	ldr	r3, [r4, #24]
 8008530:	b1e3      	cbz	r3, 800856c <_reclaim_reent+0xb0>
 8008532:	4620      	mov	r0, r4
 8008534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008536:	4798      	blx	r3
 8008538:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800853a:	b1b9      	cbz	r1, 800856c <_reclaim_reent+0xb0>
 800853c:	4620      	mov	r0, r4
 800853e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008542:	f7ff bfad 	b.w	80084a0 <cleanup_glue>
 8008546:	5949      	ldr	r1, [r1, r5]
 8008548:	b941      	cbnz	r1, 800855c <_reclaim_reent+0xa0>
 800854a:	3504      	adds	r5, #4
 800854c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800854e:	2d80      	cmp	r5, #128	; 0x80
 8008550:	68d9      	ldr	r1, [r3, #12]
 8008552:	d1f8      	bne.n	8008546 <_reclaim_reent+0x8a>
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fad7 	bl	8008b08 <_free_r>
 800855a:	e7ba      	b.n	80084d2 <_reclaim_reent+0x16>
 800855c:	680e      	ldr	r6, [r1, #0]
 800855e:	4620      	mov	r0, r4
 8008560:	f000 fad2 	bl	8008b08 <_free_r>
 8008564:	4631      	mov	r1, r6
 8008566:	e7ef      	b.n	8008548 <_reclaim_reent+0x8c>
 8008568:	2500      	movs	r5, #0
 800856a:	e7ef      	b.n	800854c <_reclaim_reent+0x90>
 800856c:	bd70      	pop	{r4, r5, r6, pc}
 800856e:	bf00      	nop
 8008570:	20000058 	.word	0x20000058

08008574 <_sbrk_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	2300      	movs	r3, #0
 8008578:	4d05      	ldr	r5, [pc, #20]	; (8008590 <_sbrk_r+0x1c>)
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 f8ae 	bl	80016e0 <_sbrk>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_sbrk_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_sbrk_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	20002568 	.word	0x20002568

08008594 <siprintf>:
 8008594:	b40e      	push	{r1, r2, r3}
 8008596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800859a:	b500      	push	{lr}
 800859c:	b09c      	sub	sp, #112	; 0x70
 800859e:	ab1d      	add	r3, sp, #116	; 0x74
 80085a0:	9002      	str	r0, [sp, #8]
 80085a2:	9006      	str	r0, [sp, #24]
 80085a4:	9107      	str	r1, [sp, #28]
 80085a6:	9104      	str	r1, [sp, #16]
 80085a8:	4808      	ldr	r0, [pc, #32]	; (80085cc <siprintf+0x38>)
 80085aa:	4909      	ldr	r1, [pc, #36]	; (80085d0 <siprintf+0x3c>)
 80085ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b0:	9105      	str	r1, [sp, #20]
 80085b2:	6800      	ldr	r0, [r0, #0]
 80085b4:	a902      	add	r1, sp, #8
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	f000 fb4a 	bl	8008c50 <_svfiprintf_r>
 80085bc:	2200      	movs	r2, #0
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	b01c      	add	sp, #112	; 0x70
 80085c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c8:	b003      	add	sp, #12
 80085ca:	4770      	bx	lr
 80085cc:	20000058 	.word	0x20000058
 80085d0:	ffff0208 	.word	0xffff0208

080085d4 <siscanf>:
 80085d4:	b40e      	push	{r1, r2, r3}
 80085d6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	ac1f      	add	r4, sp, #124	; 0x7c
 80085e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80085e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80085e8:	9002      	str	r0, [sp, #8]
 80085ea:	9006      	str	r0, [sp, #24]
 80085ec:	f7f7 fdba 	bl	8000164 <strlen>
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <siscanf+0x4c>)
 80085f2:	9003      	str	r0, [sp, #12]
 80085f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f6:	2300      	movs	r3, #0
 80085f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80085fa:	9314      	str	r3, [sp, #80]	; 0x50
 80085fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008600:	9007      	str	r0, [sp, #28]
 8008602:	4808      	ldr	r0, [pc, #32]	; (8008624 <siscanf+0x50>)
 8008604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008608:	462a      	mov	r2, r5
 800860a:	4623      	mov	r3, r4
 800860c:	a902      	add	r1, sp, #8
 800860e:	6800      	ldr	r0, [r0, #0]
 8008610:	9401      	str	r4, [sp, #4]
 8008612:	f000 fc77 	bl	8008f04 <__ssvfiscanf_r>
 8008616:	b01c      	add	sp, #112	; 0x70
 8008618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861c:	b003      	add	sp, #12
 800861e:	4770      	bx	lr
 8008620:	0800864b 	.word	0x0800864b
 8008624:	20000058 	.word	0x20000058

08008628 <__sread>:
 8008628:	b510      	push	{r4, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	f001 fa22 	bl	8009a78 <_read_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	bfab      	itete	ge
 8008638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863a:	89a3      	ldrhlt	r3, [r4, #12]
 800863c:	181b      	addge	r3, r3, r0
 800863e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008642:	bfac      	ite	ge
 8008644:	6563      	strge	r3, [r4, #84]	; 0x54
 8008646:	81a3      	strhlt	r3, [r4, #12]
 8008648:	bd10      	pop	{r4, pc}

0800864a <__seofread>:
 800864a:	2000      	movs	r0, #0
 800864c:	4770      	bx	lr

0800864e <__swrite>:
 800864e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008652:	461f      	mov	r7, r3
 8008654:	898b      	ldrh	r3, [r1, #12]
 8008656:	4605      	mov	r5, r0
 8008658:	05db      	lsls	r3, r3, #23
 800865a:	460c      	mov	r4, r1
 800865c:	4616      	mov	r6, r2
 800865e:	d505      	bpl.n	800866c <__swrite+0x1e>
 8008660:	2302      	movs	r3, #2
 8008662:	2200      	movs	r2, #0
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	f000 fa28 	bl	8008abc <_lseek_r>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	4632      	mov	r2, r6
 8008670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	4628      	mov	r0, r5
 8008678:	463b      	mov	r3, r7
 800867a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	f000 b90b 	b.w	800889c <_write_r>

08008686 <__sseek>:
 8008686:	b510      	push	{r4, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868e:	f000 fa15 	bl	8008abc <_lseek_r>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	bf15      	itete	ne
 8008698:	6560      	strne	r0, [r4, #84]	; 0x54
 800869a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a2:	81a3      	strheq	r3, [r4, #12]
 80086a4:	bf18      	it	ne
 80086a6:	81a3      	strhne	r3, [r4, #12]
 80086a8:	bd10      	pop	{r4, pc}

080086aa <__sclose>:
 80086aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ae:	f000 b925 	b.w	80088fc <_close_r>

080086b2 <strcspn>:
 80086b2:	4603      	mov	r3, r0
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	461e      	mov	r6, r3
 80086b8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80086bc:	b144      	cbz	r4, 80086d0 <strcspn+0x1e>
 80086be:	1e4a      	subs	r2, r1, #1
 80086c0:	e001      	b.n	80086c6 <strcspn+0x14>
 80086c2:	42a5      	cmp	r5, r4
 80086c4:	d004      	beq.n	80086d0 <strcspn+0x1e>
 80086c6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	d1f9      	bne.n	80086c2 <strcspn+0x10>
 80086ce:	e7f2      	b.n	80086b6 <strcspn+0x4>
 80086d0:	1a30      	subs	r0, r6, r0
 80086d2:	bd70      	pop	{r4, r5, r6, pc}

080086d4 <strtok>:
 80086d4:	4b16      	ldr	r3, [pc, #88]	; (8008730 <strtok+0x5c>)
 80086d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086da:	681f      	ldr	r7, [r3, #0]
 80086dc:	4605      	mov	r5, r0
 80086de:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80086e0:	460e      	mov	r6, r1
 80086e2:	b9ec      	cbnz	r4, 8008720 <strtok+0x4c>
 80086e4:	2050      	movs	r0, #80	; 0x50
 80086e6:	f000 f9fb 	bl	8008ae0 <malloc>
 80086ea:	4602      	mov	r2, r0
 80086ec:	65b8      	str	r0, [r7, #88]	; 0x58
 80086ee:	b920      	cbnz	r0, 80086fa <strtok+0x26>
 80086f0:	2157      	movs	r1, #87	; 0x57
 80086f2:	4b10      	ldr	r3, [pc, #64]	; (8008734 <strtok+0x60>)
 80086f4:	4810      	ldr	r0, [pc, #64]	; (8008738 <strtok+0x64>)
 80086f6:	f000 f8e3 	bl	80088c0 <__assert_func>
 80086fa:	e9c0 4400 	strd	r4, r4, [r0]
 80086fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008702:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008706:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800870a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800870e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008712:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008716:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800871a:	6184      	str	r4, [r0, #24]
 800871c:	7704      	strb	r4, [r0, #28]
 800871e:	6244      	str	r4, [r0, #36]	; 0x24
 8008720:	4631      	mov	r1, r6
 8008722:	4628      	mov	r0, r5
 8008724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008726:	2301      	movs	r3, #1
 8008728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800872c:	f000 b806 	b.w	800873c <__strtok_r>
 8008730:	20000058 	.word	0x20000058
 8008734:	0800a1b0 	.word	0x0800a1b0
 8008738:	0800a1c7 	.word	0x0800a1c7

0800873c <__strtok_r>:
 800873c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800873e:	b908      	cbnz	r0, 8008744 <__strtok_r+0x8>
 8008740:	6810      	ldr	r0, [r2, #0]
 8008742:	b188      	cbz	r0, 8008768 <__strtok_r+0x2c>
 8008744:	4604      	mov	r4, r0
 8008746:	460f      	mov	r7, r1
 8008748:	4620      	mov	r0, r4
 800874a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800874e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008752:	b91e      	cbnz	r6, 800875c <__strtok_r+0x20>
 8008754:	b965      	cbnz	r5, 8008770 <__strtok_r+0x34>
 8008756:	4628      	mov	r0, r5
 8008758:	6015      	str	r5, [r2, #0]
 800875a:	e005      	b.n	8008768 <__strtok_r+0x2c>
 800875c:	42b5      	cmp	r5, r6
 800875e:	d1f6      	bne.n	800874e <__strtok_r+0x12>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f0      	bne.n	8008746 <__strtok_r+0xa>
 8008764:	6014      	str	r4, [r2, #0]
 8008766:	7003      	strb	r3, [r0, #0]
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	461c      	mov	r4, r3
 800876c:	e00c      	b.n	8008788 <__strtok_r+0x4c>
 800876e:	b915      	cbnz	r5, 8008776 <__strtok_r+0x3a>
 8008770:	460e      	mov	r6, r1
 8008772:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008776:	f816 5b01 	ldrb.w	r5, [r6], #1
 800877a:	42ab      	cmp	r3, r5
 800877c:	d1f7      	bne.n	800876e <__strtok_r+0x32>
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f3      	beq.n	800876a <__strtok_r+0x2e>
 8008782:	2300      	movs	r3, #0
 8008784:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008788:	6014      	str	r4, [r2, #0]
 800878a:	e7ed      	b.n	8008768 <__strtok_r+0x2c>

0800878c <_strtol_l.constprop.0>:
 800878c:	2b01      	cmp	r3, #1
 800878e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008792:	4680      	mov	r8, r0
 8008794:	d001      	beq.n	800879a <_strtol_l.constprop.0+0xe>
 8008796:	2b24      	cmp	r3, #36	; 0x24
 8008798:	d906      	bls.n	80087a8 <_strtol_l.constprop.0+0x1c>
 800879a:	f7ff fcb3 	bl	8008104 <__errno>
 800879e:	2316      	movs	r3, #22
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	2000      	movs	r0, #0
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	460d      	mov	r5, r1
 80087aa:	4f35      	ldr	r7, [pc, #212]	; (8008880 <_strtol_l.constprop.0+0xf4>)
 80087ac:	4628      	mov	r0, r5
 80087ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087b2:	5de6      	ldrb	r6, [r4, r7]
 80087b4:	f016 0608 	ands.w	r6, r6, #8
 80087b8:	d1f8      	bne.n	80087ac <_strtol_l.constprop.0+0x20>
 80087ba:	2c2d      	cmp	r4, #45	; 0x2d
 80087bc:	d12f      	bne.n	800881e <_strtol_l.constprop.0+0x92>
 80087be:	2601      	movs	r6, #1
 80087c0:	782c      	ldrb	r4, [r5, #0]
 80087c2:	1c85      	adds	r5, r0, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d057      	beq.n	8008878 <_strtol_l.constprop.0+0xec>
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d109      	bne.n	80087e0 <_strtol_l.constprop.0+0x54>
 80087cc:	2c30      	cmp	r4, #48	; 0x30
 80087ce:	d107      	bne.n	80087e0 <_strtol_l.constprop.0+0x54>
 80087d0:	7828      	ldrb	r0, [r5, #0]
 80087d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087d6:	2858      	cmp	r0, #88	; 0x58
 80087d8:	d149      	bne.n	800886e <_strtol_l.constprop.0+0xe2>
 80087da:	2310      	movs	r3, #16
 80087dc:	786c      	ldrb	r4, [r5, #1]
 80087de:	3502      	adds	r5, #2
 80087e0:	2700      	movs	r7, #0
 80087e2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80087e6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80087ea:	fbbe f9f3 	udiv	r9, lr, r3
 80087ee:	4638      	mov	r0, r7
 80087f0:	fb03 ea19 	mls	sl, r3, r9, lr
 80087f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80087f8:	f1bc 0f09 	cmp.w	ip, #9
 80087fc:	d814      	bhi.n	8008828 <_strtol_l.constprop.0+0x9c>
 80087fe:	4664      	mov	r4, ip
 8008800:	42a3      	cmp	r3, r4
 8008802:	dd22      	ble.n	800884a <_strtol_l.constprop.0+0xbe>
 8008804:	2f00      	cmp	r7, #0
 8008806:	db1d      	blt.n	8008844 <_strtol_l.constprop.0+0xb8>
 8008808:	4581      	cmp	r9, r0
 800880a:	d31b      	bcc.n	8008844 <_strtol_l.constprop.0+0xb8>
 800880c:	d101      	bne.n	8008812 <_strtol_l.constprop.0+0x86>
 800880e:	45a2      	cmp	sl, r4
 8008810:	db18      	blt.n	8008844 <_strtol_l.constprop.0+0xb8>
 8008812:	2701      	movs	r7, #1
 8008814:	fb00 4003 	mla	r0, r0, r3, r4
 8008818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800881c:	e7ea      	b.n	80087f4 <_strtol_l.constprop.0+0x68>
 800881e:	2c2b      	cmp	r4, #43	; 0x2b
 8008820:	bf04      	itt	eq
 8008822:	782c      	ldrbeq	r4, [r5, #0]
 8008824:	1c85      	addeq	r5, r0, #2
 8008826:	e7cd      	b.n	80087c4 <_strtol_l.constprop.0+0x38>
 8008828:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800882c:	f1bc 0f19 	cmp.w	ip, #25
 8008830:	d801      	bhi.n	8008836 <_strtol_l.constprop.0+0xaa>
 8008832:	3c37      	subs	r4, #55	; 0x37
 8008834:	e7e4      	b.n	8008800 <_strtol_l.constprop.0+0x74>
 8008836:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800883a:	f1bc 0f19 	cmp.w	ip, #25
 800883e:	d804      	bhi.n	800884a <_strtol_l.constprop.0+0xbe>
 8008840:	3c57      	subs	r4, #87	; 0x57
 8008842:	e7dd      	b.n	8008800 <_strtol_l.constprop.0+0x74>
 8008844:	f04f 37ff 	mov.w	r7, #4294967295
 8008848:	e7e6      	b.n	8008818 <_strtol_l.constprop.0+0x8c>
 800884a:	2f00      	cmp	r7, #0
 800884c:	da07      	bge.n	800885e <_strtol_l.constprop.0+0xd2>
 800884e:	2322      	movs	r3, #34	; 0x22
 8008850:	4670      	mov	r0, lr
 8008852:	f8c8 3000 	str.w	r3, [r8]
 8008856:	2a00      	cmp	r2, #0
 8008858:	d0a4      	beq.n	80087a4 <_strtol_l.constprop.0+0x18>
 800885a:	1e69      	subs	r1, r5, #1
 800885c:	e005      	b.n	800886a <_strtol_l.constprop.0+0xde>
 800885e:	b106      	cbz	r6, 8008862 <_strtol_l.constprop.0+0xd6>
 8008860:	4240      	negs	r0, r0
 8008862:	2a00      	cmp	r2, #0
 8008864:	d09e      	beq.n	80087a4 <_strtol_l.constprop.0+0x18>
 8008866:	2f00      	cmp	r7, #0
 8008868:	d1f7      	bne.n	800885a <_strtol_l.constprop.0+0xce>
 800886a:	6011      	str	r1, [r2, #0]
 800886c:	e79a      	b.n	80087a4 <_strtol_l.constprop.0+0x18>
 800886e:	2430      	movs	r4, #48	; 0x30
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1b5      	bne.n	80087e0 <_strtol_l.constprop.0+0x54>
 8008874:	2308      	movs	r3, #8
 8008876:	e7b3      	b.n	80087e0 <_strtol_l.constprop.0+0x54>
 8008878:	2c30      	cmp	r4, #48	; 0x30
 800887a:	d0a9      	beq.n	80087d0 <_strtol_l.constprop.0+0x44>
 800887c:	230a      	movs	r3, #10
 800887e:	e7af      	b.n	80087e0 <_strtol_l.constprop.0+0x54>
 8008880:	0800a261 	.word	0x0800a261

08008884 <_strtol_r>:
 8008884:	f7ff bf82 	b.w	800878c <_strtol_l.constprop.0>

08008888 <strtol>:
 8008888:	4613      	mov	r3, r2
 800888a:	460a      	mov	r2, r1
 800888c:	4601      	mov	r1, r0
 800888e:	4802      	ldr	r0, [pc, #8]	; (8008898 <strtol+0x10>)
 8008890:	6800      	ldr	r0, [r0, #0]
 8008892:	f7ff bf7b 	b.w	800878c <_strtol_l.constprop.0>
 8008896:	bf00      	nop
 8008898:	20000058 	.word	0x20000058

0800889c <_write_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	4d05      	ldr	r5, [pc, #20]	; (80088bc <_write_r+0x20>)
 80088a8:	602a      	str	r2, [r5, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f7f8 fecc 	bl	8001648 <_write>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_write_r+0x1e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_write_r+0x1e>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20002568 	.word	0x20002568

080088c0 <__assert_func>:
 80088c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c2:	4614      	mov	r4, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <__assert_func+0x2c>)
 80088c8:	4605      	mov	r5, r0
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68d8      	ldr	r0, [r3, #12]
 80088ce:	b14c      	cbz	r4, 80088e4 <__assert_func+0x24>
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <__assert_func+0x30>)
 80088d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088d6:	9100      	str	r1, [sp, #0]
 80088d8:	462b      	mov	r3, r5
 80088da:	4906      	ldr	r1, [pc, #24]	; (80088f4 <__assert_func+0x34>)
 80088dc:	f000 f8dc 	bl	8008a98 <fiprintf>
 80088e0:	f001 fa80 	bl	8009de4 <abort>
 80088e4:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <__assert_func+0x38>)
 80088e6:	461c      	mov	r4, r3
 80088e8:	e7f3      	b.n	80088d2 <__assert_func+0x12>
 80088ea:	bf00      	nop
 80088ec:	20000058 	.word	0x20000058
 80088f0:	0800a224 	.word	0x0800a224
 80088f4:	0800a231 	.word	0x0800a231
 80088f8:	0800a25f 	.word	0x0800a25f

080088fc <_close_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	2300      	movs	r3, #0
 8008900:	4d05      	ldr	r5, [pc, #20]	; (8008918 <_close_r+0x1c>)
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7f8 feba 	bl	8001680 <_close>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_close_r+0x1a>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_close_r+0x1a>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20002568 	.word	0x20002568

0800891c <__sflush_r>:
 800891c:	898a      	ldrh	r2, [r1, #12]
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008920:	4605      	mov	r5, r0
 8008922:	0710      	lsls	r0, r2, #28
 8008924:	460c      	mov	r4, r1
 8008926:	d457      	bmi.n	80089d8 <__sflush_r+0xbc>
 8008928:	684b      	ldr	r3, [r1, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	dc04      	bgt.n	8008938 <__sflush_r+0x1c>
 800892e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc01      	bgt.n	8008938 <__sflush_r+0x1c>
 8008934:	2000      	movs	r0, #0
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800893a:	2e00      	cmp	r6, #0
 800893c:	d0fa      	beq.n	8008934 <__sflush_r+0x18>
 800893e:	2300      	movs	r3, #0
 8008940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008944:	682f      	ldr	r7, [r5, #0]
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	d032      	beq.n	80089b0 <__sflush_r+0x94>
 800894a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	075a      	lsls	r2, r3, #29
 8008950:	d505      	bpl.n	800895e <__sflush_r+0x42>
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	1ac0      	subs	r0, r0, r3
 8008956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008958:	b10b      	cbz	r3, 800895e <__sflush_r+0x42>
 800895a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800895c:	1ac0      	subs	r0, r0, r3
 800895e:	2300      	movs	r3, #0
 8008960:	4602      	mov	r2, r0
 8008962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008964:	4628      	mov	r0, r5
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	47b0      	blx	r6
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	d106      	bne.n	800897e <__sflush_r+0x62>
 8008970:	6829      	ldr	r1, [r5, #0]
 8008972:	291d      	cmp	r1, #29
 8008974:	d82c      	bhi.n	80089d0 <__sflush_r+0xb4>
 8008976:	4a29      	ldr	r2, [pc, #164]	; (8008a1c <__sflush_r+0x100>)
 8008978:	40ca      	lsrs	r2, r1
 800897a:	07d6      	lsls	r6, r2, #31
 800897c:	d528      	bpl.n	80089d0 <__sflush_r+0xb4>
 800897e:	2200      	movs	r2, #0
 8008980:	6062      	str	r2, [r4, #4]
 8008982:	6922      	ldr	r2, [r4, #16]
 8008984:	04d9      	lsls	r1, r3, #19
 8008986:	6022      	str	r2, [r4, #0]
 8008988:	d504      	bpl.n	8008994 <__sflush_r+0x78>
 800898a:	1c42      	adds	r2, r0, #1
 800898c:	d101      	bne.n	8008992 <__sflush_r+0x76>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b903      	cbnz	r3, 8008994 <__sflush_r+0x78>
 8008992:	6560      	str	r0, [r4, #84]	; 0x54
 8008994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008996:	602f      	str	r7, [r5, #0]
 8008998:	2900      	cmp	r1, #0
 800899a:	d0cb      	beq.n	8008934 <__sflush_r+0x18>
 800899c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <__sflush_r+0x8e>
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 f8af 	bl	8008b08 <_free_r>
 80089aa:	2000      	movs	r0, #0
 80089ac:	6360      	str	r0, [r4, #52]	; 0x34
 80089ae:	e7c2      	b.n	8008936 <__sflush_r+0x1a>
 80089b0:	6a21      	ldr	r1, [r4, #32]
 80089b2:	2301      	movs	r3, #1
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b0      	blx	r6
 80089b8:	1c41      	adds	r1, r0, #1
 80089ba:	d1c7      	bne.n	800894c <__sflush_r+0x30>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0c4      	beq.n	800894c <__sflush_r+0x30>
 80089c2:	2b1d      	cmp	r3, #29
 80089c4:	d001      	beq.n	80089ca <__sflush_r+0xae>
 80089c6:	2b16      	cmp	r3, #22
 80089c8:	d101      	bne.n	80089ce <__sflush_r+0xb2>
 80089ca:	602f      	str	r7, [r5, #0]
 80089cc:	e7b2      	b.n	8008934 <__sflush_r+0x18>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	e7ae      	b.n	8008936 <__sflush_r+0x1a>
 80089d8:	690f      	ldr	r7, [r1, #16]
 80089da:	2f00      	cmp	r7, #0
 80089dc:	d0aa      	beq.n	8008934 <__sflush_r+0x18>
 80089de:	0793      	lsls	r3, r2, #30
 80089e0:	bf18      	it	ne
 80089e2:	2300      	movne	r3, #0
 80089e4:	680e      	ldr	r6, [r1, #0]
 80089e6:	bf08      	it	eq
 80089e8:	694b      	ldreq	r3, [r1, #20]
 80089ea:	1bf6      	subs	r6, r6, r7
 80089ec:	600f      	str	r7, [r1, #0]
 80089ee:	608b      	str	r3, [r1, #8]
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	dd9f      	ble.n	8008934 <__sflush_r+0x18>
 80089f4:	4633      	mov	r3, r6
 80089f6:	463a      	mov	r2, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	6a21      	ldr	r1, [r4, #32]
 80089fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a00:	47e0      	blx	ip
 8008a02:	2800      	cmp	r0, #0
 8008a04:	dc06      	bgt.n	8008a14 <__sflush_r+0xf8>
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	e790      	b.n	8008936 <__sflush_r+0x1a>
 8008a14:	4407      	add	r7, r0
 8008a16:	1a36      	subs	r6, r6, r0
 8008a18:	e7ea      	b.n	80089f0 <__sflush_r+0xd4>
 8008a1a:	bf00      	nop
 8008a1c:	20400001 	.word	0x20400001

08008a20 <_fflush_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	690b      	ldr	r3, [r1, #16]
 8008a24:	4605      	mov	r5, r0
 8008a26:	460c      	mov	r4, r1
 8008a28:	b913      	cbnz	r3, 8008a30 <_fflush_r+0x10>
 8008a2a:	2500      	movs	r5, #0
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	b118      	cbz	r0, 8008a3a <_fflush_r+0x1a>
 8008a32:	6983      	ldr	r3, [r0, #24]
 8008a34:	b90b      	cbnz	r3, 8008a3a <_fflush_r+0x1a>
 8008a36:	f7ff fbc3 	bl	80081c0 <__sinit>
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <_fflush_r+0x6c>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d11b      	bne.n	8008a78 <_fflush_r+0x58>
 8008a40:	686c      	ldr	r4, [r5, #4]
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0ef      	beq.n	8008a2a <_fflush_r+0xa>
 8008a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a4c:	07d0      	lsls	r0, r2, #31
 8008a4e:	d404      	bmi.n	8008a5a <_fflush_r+0x3a>
 8008a50:	0599      	lsls	r1, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_fflush_r+0x3a>
 8008a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a56:	f7ff fc76 	bl	8008346 <__retarget_lock_acquire_recursive>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f7ff ff5d 	bl	800891c <__sflush_r>
 8008a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a64:	4605      	mov	r5, r0
 8008a66:	07da      	lsls	r2, r3, #31
 8008a68:	d4e0      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	059b      	lsls	r3, r3, #22
 8008a6e:	d4dd      	bmi.n	8008a2c <_fflush_r+0xc>
 8008a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a72:	f7ff fc69 	bl	8008348 <__retarget_lock_release_recursive>
 8008a76:	e7d9      	b.n	8008a2c <_fflush_r+0xc>
 8008a78:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <_fflush_r+0x70>)
 8008a7a:	429c      	cmp	r4, r3
 8008a7c:	d101      	bne.n	8008a82 <_fflush_r+0x62>
 8008a7e:	68ac      	ldr	r4, [r5, #8]
 8008a80:	e7df      	b.n	8008a42 <_fflush_r+0x22>
 8008a82:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <_fflush_r+0x74>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	bf08      	it	eq
 8008a88:	68ec      	ldreq	r4, [r5, #12]
 8008a8a:	e7da      	b.n	8008a42 <_fflush_r+0x22>
 8008a8c:	0800a16c 	.word	0x0800a16c
 8008a90:	0800a18c 	.word	0x0800a18c
 8008a94:	0800a14c 	.word	0x0800a14c

08008a98 <fiprintf>:
 8008a98:	b40e      	push	{r1, r2, r3}
 8008a9a:	b503      	push	{r0, r1, lr}
 8008a9c:	4601      	mov	r1, r0
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <fiprintf+0x20>)
 8008aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa6:	6800      	ldr	r0, [r0, #0]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	f000 fbcd 	bl	8009248 <_vfiprintf_r>
 8008aae:	b002      	add	sp, #8
 8008ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab4:	b003      	add	sp, #12
 8008ab6:	4770      	bx	lr
 8008ab8:	20000058 	.word	0x20000058

08008abc <_lseek_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4d05      	ldr	r5, [pc, #20]	; (8008adc <_lseek_r+0x20>)
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f8 fdfc 	bl	80016c8 <_lseek>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_lseek_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_lseek_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20002568 	.word	0x20002568

08008ae0 <malloc>:
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <malloc+0xc>)
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	f7ff bc67 	b.w	80083b8 <_malloc_r>
 8008aea:	bf00      	nop
 8008aec:	20000058 	.word	0x20000058

08008af0 <__malloc_lock>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__malloc_lock+0x8>)
 8008af2:	f7ff bc28 	b.w	8008346 <__retarget_lock_acquire_recursive>
 8008af6:	bf00      	nop
 8008af8:	2000255c 	.word	0x2000255c

08008afc <__malloc_unlock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_unlock+0x8>)
 8008afe:	f7ff bc23 	b.w	8008348 <__retarget_lock_release_recursive>
 8008b02:	bf00      	nop
 8008b04:	2000255c 	.word	0x2000255c

08008b08 <_free_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d040      	beq.n	8008b92 <_free_r+0x8a>
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f0c      	subs	r4, r1, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	18e4      	addlt	r4, r4, r3
 8008b1c:	f7ff ffe8 	bl	8008af0 <__malloc_lock>
 8008b20:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <_free_r+0x8c>)
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	b933      	cbnz	r3, 8008b34 <_free_r+0x2c>
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	6014      	str	r4, [r2, #0]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b30:	f7ff bfe4 	b.w	8008afc <__malloc_unlock>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d908      	bls.n	8008b4a <_free_r+0x42>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	1821      	adds	r1, r4, r0
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	bf01      	itttt	eq
 8008b40:	6819      	ldreq	r1, [r3, #0]
 8008b42:	685b      	ldreq	r3, [r3, #4]
 8008b44:	1809      	addeq	r1, r1, r0
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	e7ed      	b.n	8008b26 <_free_r+0x1e>
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b10b      	cbz	r3, 8008b54 <_free_r+0x4c>
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d9fa      	bls.n	8008b4a <_free_r+0x42>
 8008b54:	6811      	ldr	r1, [r2, #0]
 8008b56:	1850      	adds	r0, r2, r1
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d10b      	bne.n	8008b74 <_free_r+0x6c>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	4401      	add	r1, r0
 8008b60:	1850      	adds	r0, r2, r1
 8008b62:	4283      	cmp	r3, r0
 8008b64:	6011      	str	r1, [r2, #0]
 8008b66:	d1e0      	bne.n	8008b2a <_free_r+0x22>
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4401      	add	r1, r0
 8008b6e:	6011      	str	r1, [r2, #0]
 8008b70:	6053      	str	r3, [r2, #4]
 8008b72:	e7da      	b.n	8008b2a <_free_r+0x22>
 8008b74:	d902      	bls.n	8008b7c <_free_r+0x74>
 8008b76:	230c      	movs	r3, #12
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	e7d6      	b.n	8008b2a <_free_r+0x22>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	1821      	adds	r1, r4, r0
 8008b80:	428b      	cmp	r3, r1
 8008b82:	bf01      	itttt	eq
 8008b84:	6819      	ldreq	r1, [r3, #0]
 8008b86:	685b      	ldreq	r3, [r3, #4]
 8008b88:	1809      	addeq	r1, r1, r0
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	6063      	str	r3, [r4, #4]
 8008b8e:	6054      	str	r4, [r2, #4]
 8008b90:	e7cb      	b.n	8008b2a <_free_r+0x22>
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20002560 	.word	0x20002560

08008b98 <__ssputs_r>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	688e      	ldr	r6, [r1, #8]
 8008b9e:	4682      	mov	sl, r0
 8008ba0:	429e      	cmp	r6, r3
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4690      	mov	r8, r2
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	d838      	bhi.n	8008c1c <__ssputs_r+0x84>
 8008baa:	898a      	ldrh	r2, [r1, #12]
 8008bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bb0:	d032      	beq.n	8008c18 <__ssputs_r+0x80>
 8008bb2:	6825      	ldr	r5, [r4, #0]
 8008bb4:	6909      	ldr	r1, [r1, #16]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	eba5 0901 	sub.w	r9, r5, r1
 8008bbc:	6965      	ldr	r5, [r4, #20]
 8008bbe:	444b      	add	r3, r9
 8008bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bc8:	106d      	asrs	r5, r5, #1
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	bf38      	it	cc
 8008bce:	461d      	movcc	r5, r3
 8008bd0:	0553      	lsls	r3, r2, #21
 8008bd2:	d531      	bpl.n	8008c38 <__ssputs_r+0xa0>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7ff fbef 	bl	80083b8 <_malloc_r>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	b950      	cbnz	r0, 8008bf4 <__ssputs_r+0x5c>
 8008bde:	230c      	movs	r3, #12
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	f8ca 3000 	str.w	r3, [sl]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	6921      	ldr	r1, [r4, #16]
 8008bf8:	f7ff fba7 	bl	800834a <memcpy>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	6126      	str	r6, [r4, #16]
 8008c0a:	444e      	add	r6, r9
 8008c0c:	6026      	str	r6, [r4, #0]
 8008c0e:	463e      	mov	r6, r7
 8008c10:	6165      	str	r5, [r4, #20]
 8008c12:	eba5 0509 	sub.w	r5, r5, r9
 8008c16:	60a5      	str	r5, [r4, #8]
 8008c18:	42be      	cmp	r6, r7
 8008c1a:	d900      	bls.n	8008c1e <__ssputs_r+0x86>
 8008c1c:	463e      	mov	r6, r7
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4641      	mov	r1, r8
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	f001 f958 	bl	8009ed8 <memmove>
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	1b9b      	subs	r3, r3, r6
 8008c2e:	60a3      	str	r3, [r4, #8]
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	4433      	add	r3, r6
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	e7db      	b.n	8008bf0 <__ssputs_r+0x58>
 8008c38:	462a      	mov	r2, r5
 8008c3a:	f001 f967 	bl	8009f0c <_realloc_r>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1e1      	bne.n	8008c08 <__ssputs_r+0x70>
 8008c44:	4650      	mov	r0, sl
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	f7ff ff5e 	bl	8008b08 <_free_r>
 8008c4c:	e7c7      	b.n	8008bde <__ssputs_r+0x46>
	...

08008c50 <_svfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	4698      	mov	r8, r3
 8008c56:	898b      	ldrh	r3, [r1, #12]
 8008c58:	4607      	mov	r7, r0
 8008c5a:	061b      	lsls	r3, r3, #24
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	4614      	mov	r4, r2
 8008c60:	b09d      	sub	sp, #116	; 0x74
 8008c62:	d50e      	bpl.n	8008c82 <_svfiprintf_r+0x32>
 8008c64:	690b      	ldr	r3, [r1, #16]
 8008c66:	b963      	cbnz	r3, 8008c82 <_svfiprintf_r+0x32>
 8008c68:	2140      	movs	r1, #64	; 0x40
 8008c6a:	f7ff fba5 	bl	80083b8 <_malloc_r>
 8008c6e:	6028      	str	r0, [r5, #0]
 8008c70:	6128      	str	r0, [r5, #16]
 8008c72:	b920      	cbnz	r0, 8008c7e <_svfiprintf_r+0x2e>
 8008c74:	230c      	movs	r3, #12
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	e0d1      	b.n	8008e22 <_svfiprintf_r+0x1d2>
 8008c7e:	2340      	movs	r3, #64	; 0x40
 8008c80:	616b      	str	r3, [r5, #20]
 8008c82:	2300      	movs	r3, #0
 8008c84:	9309      	str	r3, [sp, #36]	; 0x24
 8008c86:	2320      	movs	r3, #32
 8008c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c8c:	2330      	movs	r3, #48	; 0x30
 8008c8e:	f04f 0901 	mov.w	r9, #1
 8008c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e3c <_svfiprintf_r+0x1ec>
 8008c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	469a      	mov	sl, r3
 8008ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca6:	b10a      	cbz	r2, 8008cac <_svfiprintf_r+0x5c>
 8008ca8:	2a25      	cmp	r2, #37	; 0x25
 8008caa:	d1f9      	bne.n	8008ca0 <_svfiprintf_r+0x50>
 8008cac:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb0:	d00b      	beq.n	8008cca <_svfiprintf_r+0x7a>
 8008cb2:	465b      	mov	r3, fp
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff ff6d 	bl	8008b98 <__ssputs_r>
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	f000 80aa 	beq.w	8008e18 <_svfiprintf_r+0x1c8>
 8008cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc6:	445a      	add	r2, fp
 8008cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cca:	f89a 3000 	ldrb.w	r3, [sl]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80a2 	beq.w	8008e18 <_svfiprintf_r+0x1c8>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cde:	f10a 0a01 	add.w	sl, sl, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9307      	str	r3, [sp, #28]
 8008ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cea:	931a      	str	r3, [sp, #104]	; 0x68
 8008cec:	4654      	mov	r4, sl
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf4:	4851      	ldr	r0, [pc, #324]	; (8008e3c <_svfiprintf_r+0x1ec>)
 8008cf6:	f001 f8e1 	bl	8009ebc <memchr>
 8008cfa:	9a04      	ldr	r2, [sp, #16]
 8008cfc:	b9d8      	cbnz	r0, 8008d36 <_svfiprintf_r+0xe6>
 8008cfe:	06d0      	lsls	r0, r2, #27
 8008d00:	bf44      	itt	mi
 8008d02:	2320      	movmi	r3, #32
 8008d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d08:	0711      	lsls	r1, r2, #28
 8008d0a:	bf44      	itt	mi
 8008d0c:	232b      	movmi	r3, #43	; 0x2b
 8008d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d12:	f89a 3000 	ldrb.w	r3, [sl]
 8008d16:	2b2a      	cmp	r3, #42	; 0x2a
 8008d18:	d015      	beq.n	8008d46 <_svfiprintf_r+0xf6>
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f04f 0c0a 	mov.w	ip, #10
 8008d22:	9a07      	ldr	r2, [sp, #28]
 8008d24:	4621      	mov	r1, r4
 8008d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d2a:	3b30      	subs	r3, #48	; 0x30
 8008d2c:	2b09      	cmp	r3, #9
 8008d2e:	d94e      	bls.n	8008dce <_svfiprintf_r+0x17e>
 8008d30:	b1b0      	cbz	r0, 8008d60 <_svfiprintf_r+0x110>
 8008d32:	9207      	str	r2, [sp, #28]
 8008d34:	e014      	b.n	8008d60 <_svfiprintf_r+0x110>
 8008d36:	eba0 0308 	sub.w	r3, r0, r8
 8008d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	46a2      	mov	sl, r4
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	e7d2      	b.n	8008cec <_svfiprintf_r+0x9c>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	1d19      	adds	r1, r3, #4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bfbb      	ittet	lt
 8008d52:	425b      	neglt	r3, r3
 8008d54:	f042 0202 	orrlt.w	r2, r2, #2
 8008d58:	9307      	strge	r3, [sp, #28]
 8008d5a:	9307      	strlt	r3, [sp, #28]
 8008d5c:	bfb8      	it	lt
 8008d5e:	9204      	strlt	r2, [sp, #16]
 8008d60:	7823      	ldrb	r3, [r4, #0]
 8008d62:	2b2e      	cmp	r3, #46	; 0x2e
 8008d64:	d10c      	bne.n	8008d80 <_svfiprintf_r+0x130>
 8008d66:	7863      	ldrb	r3, [r4, #1]
 8008d68:	2b2a      	cmp	r3, #42	; 0x2a
 8008d6a:	d135      	bne.n	8008dd8 <_svfiprintf_r+0x188>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	3402      	adds	r4, #2
 8008d70:	1d1a      	adds	r2, r3, #4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	9203      	str	r2, [sp, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bfb8      	it	lt
 8008d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d7e:	9305      	str	r3, [sp, #20]
 8008d80:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e40 <_svfiprintf_r+0x1f0>
 8008d84:	2203      	movs	r2, #3
 8008d86:	4650      	mov	r0, sl
 8008d88:	7821      	ldrb	r1, [r4, #0]
 8008d8a:	f001 f897 	bl	8009ebc <memchr>
 8008d8e:	b140      	cbz	r0, 8008da2 <_svfiprintf_r+0x152>
 8008d90:	2340      	movs	r3, #64	; 0x40
 8008d92:	eba0 000a 	sub.w	r0, r0, sl
 8008d96:	fa03 f000 	lsl.w	r0, r3, r0
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	3401      	adds	r4, #1
 8008d9e:	4303      	orrs	r3, r0
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da6:	2206      	movs	r2, #6
 8008da8:	4826      	ldr	r0, [pc, #152]	; (8008e44 <_svfiprintf_r+0x1f4>)
 8008daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dae:	f001 f885 	bl	8009ebc <memchr>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d038      	beq.n	8008e28 <_svfiprintf_r+0x1d8>
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <_svfiprintf_r+0x1f8>)
 8008db8:	bb1b      	cbnz	r3, 8008e02 <_svfiprintf_r+0x1b2>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	3307      	adds	r3, #7
 8008dbe:	f023 0307 	bic.w	r3, r3, #7
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	4433      	add	r3, r6
 8008dca:	9309      	str	r3, [sp, #36]	; 0x24
 8008dcc:	e767      	b.n	8008c9e <_svfiprintf_r+0x4e>
 8008dce:	460c      	mov	r4, r1
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd6:	e7a5      	b.n	8008d24 <_svfiprintf_r+0xd4>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4619      	mov	r1, r3
 8008de0:	3401      	adds	r4, #1
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	4620      	mov	r0, r4
 8008de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dea:	3a30      	subs	r2, #48	; 0x30
 8008dec:	2a09      	cmp	r2, #9
 8008dee:	d903      	bls.n	8008df8 <_svfiprintf_r+0x1a8>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0c5      	beq.n	8008d80 <_svfiprintf_r+0x130>
 8008df4:	9105      	str	r1, [sp, #20]
 8008df6:	e7c3      	b.n	8008d80 <_svfiprintf_r+0x130>
 8008df8:	4604      	mov	r4, r0
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e00:	e7f0      	b.n	8008de4 <_svfiprintf_r+0x194>
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	462a      	mov	r2, r5
 8008e08:	4638      	mov	r0, r7
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <_svfiprintf_r+0x1fc>)
 8008e0c:	a904      	add	r1, sp, #16
 8008e0e:	f3af 8000 	nop.w
 8008e12:	1c42      	adds	r2, r0, #1
 8008e14:	4606      	mov	r6, r0
 8008e16:	d1d6      	bne.n	8008dc6 <_svfiprintf_r+0x176>
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	065b      	lsls	r3, r3, #25
 8008e1c:	f53f af2c 	bmi.w	8008c78 <_svfiprintf_r+0x28>
 8008e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e22:	b01d      	add	sp, #116	; 0x74
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	ab03      	add	r3, sp, #12
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4638      	mov	r0, r7
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <_svfiprintf_r+0x1fc>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	f000 fba8 	bl	8009588 <_printf_i>
 8008e38:	e7eb      	b.n	8008e12 <_svfiprintf_r+0x1c2>
 8008e3a:	bf00      	nop
 8008e3c:	0800a361 	.word	0x0800a361
 8008e40:	0800a367 	.word	0x0800a367
 8008e44:	0800a36b 	.word	0x0800a36b
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	08008b99 	.word	0x08008b99

08008e50 <_sungetc_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	1c4b      	adds	r3, r1, #1
 8008e54:	4614      	mov	r4, r2
 8008e56:	d103      	bne.n	8008e60 <_sungetc_r+0x10>
 8008e58:	f04f 35ff 	mov.w	r5, #4294967295
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	8993      	ldrh	r3, [r2, #12]
 8008e62:	b2cd      	uxtb	r5, r1
 8008e64:	f023 0320 	bic.w	r3, r3, #32
 8008e68:	8193      	strh	r3, [r2, #12]
 8008e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e6c:	6852      	ldr	r2, [r2, #4]
 8008e6e:	b18b      	cbz	r3, 8008e94 <_sungetc_r+0x44>
 8008e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e72:	4293      	cmp	r3, r2
 8008e74:	dd08      	ble.n	8008e88 <_sungetc_r+0x38>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	6022      	str	r2, [r4, #0]
 8008e7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008e80:	6863      	ldr	r3, [r4, #4]
 8008e82:	3301      	adds	r3, #1
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	e7e9      	b.n	8008e5c <_sungetc_r+0xc>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	f000 feb3 	bl	8009bf4 <__submore>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d0f1      	beq.n	8008e76 <_sungetc_r+0x26>
 8008e92:	e7e1      	b.n	8008e58 <_sungetc_r+0x8>
 8008e94:	6921      	ldr	r1, [r4, #16]
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	b151      	cbz	r1, 8008eb0 <_sungetc_r+0x60>
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	d208      	bcs.n	8008eb0 <_sungetc_r+0x60>
 8008e9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008ea2:	42a9      	cmp	r1, r5
 8008ea4:	d104      	bne.n	8008eb0 <_sungetc_r+0x60>
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	3201      	adds	r2, #1
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	6062      	str	r2, [r4, #4]
 8008eae:	e7d5      	b.n	8008e5c <_sungetc_r+0xc>
 8008eb0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8008eba:	2303      	movs	r3, #3
 8008ebc:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e7dc      	b.n	8008e84 <_sungetc_r+0x34>

08008eca <__ssrefill_r>:
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008ed0:	b169      	cbz	r1, 8008eee <__ssrefill_r+0x24>
 8008ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d001      	beq.n	8008ede <__ssrefill_r+0x14>
 8008eda:	f7ff fe15 	bl	8008b08 <_free_r>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ee4:	6063      	str	r3, [r4, #4]
 8008ee6:	b113      	cbz	r3, 8008eee <__ssrefill_r+0x24>
 8008ee8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f043 0320 	orr.w	r3, r3, #32
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	e7f3      	b.n	8008eec <__ssrefill_r+0x22>

08008f04 <__ssvfiscanf_r>:
 8008f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	460c      	mov	r4, r1
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008f12:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008f16:	49a7      	ldr	r1, [pc, #668]	; (80091b4 <__ssvfiscanf_r+0x2b0>)
 8008f18:	f10d 0804 	add.w	r8, sp, #4
 8008f1c:	91a0      	str	r1, [sp, #640]	; 0x280
 8008f1e:	49a6      	ldr	r1, [pc, #664]	; (80091b8 <__ssvfiscanf_r+0x2b4>)
 8008f20:	4fa6      	ldr	r7, [pc, #664]	; (80091bc <__ssvfiscanf_r+0x2b8>)
 8008f22:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80091c0 <__ssvfiscanf_r+0x2bc>
 8008f26:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008f2a:	91a1      	str	r1, [sp, #644]	; 0x284
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	7813      	ldrb	r3, [r2, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 815c 	beq.w	80091ee <__ssvfiscanf_r+0x2ea>
 8008f36:	5dd9      	ldrb	r1, [r3, r7]
 8008f38:	1c55      	adds	r5, r2, #1
 8008f3a:	f011 0108 	ands.w	r1, r1, #8
 8008f3e:	d019      	beq.n	8008f74 <__ssvfiscanf_r+0x70>
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dd0f      	ble.n	8008f66 <__ssvfiscanf_r+0x62>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	5cba      	ldrb	r2, [r7, r2]
 8008f4c:	0712      	lsls	r2, r2, #28
 8008f4e:	d401      	bmi.n	8008f54 <__ssvfiscanf_r+0x50>
 8008f50:	462a      	mov	r2, r5
 8008f52:	e7ec      	b.n	8008f2e <__ssvfiscanf_r+0x2a>
 8008f54:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f56:	3301      	adds	r3, #1
 8008f58:	3201      	adds	r2, #1
 8008f5a:	9245      	str	r2, [sp, #276]	; 0x114
 8008f5c:	6862      	ldr	r2, [r4, #4]
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	3a01      	subs	r2, #1
 8008f62:	6062      	str	r2, [r4, #4]
 8008f64:	e7ec      	b.n	8008f40 <__ssvfiscanf_r+0x3c>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4630      	mov	r0, r6
 8008f6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f6c:	4798      	blx	r3
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0e9      	beq.n	8008f46 <__ssvfiscanf_r+0x42>
 8008f72:	e7ed      	b.n	8008f50 <__ssvfiscanf_r+0x4c>
 8008f74:	2b25      	cmp	r3, #37	; 0x25
 8008f76:	d012      	beq.n	8008f9e <__ssvfiscanf_r+0x9a>
 8008f78:	469a      	mov	sl, r3
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f340 8094 	ble.w	80090aa <__ssvfiscanf_r+0x1a6>
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	7813      	ldrb	r3, [r2, #0]
 8008f86:	4553      	cmp	r3, sl
 8008f88:	f040 8131 	bne.w	80091ee <__ssvfiscanf_r+0x2ea>
 8008f8c:	6863      	ldr	r3, [r4, #4]
 8008f8e:	3201      	adds	r2, #1
 8008f90:	3b01      	subs	r3, #1
 8008f92:	6063      	str	r3, [r4, #4]
 8008f94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	9345      	str	r3, [sp, #276]	; 0x114
 8008f9c:	e7d8      	b.n	8008f50 <__ssvfiscanf_r+0x4c>
 8008f9e:	9141      	str	r1, [sp, #260]	; 0x104
 8008fa0:	9143      	str	r1, [sp, #268]	; 0x10c
 8008fa2:	7853      	ldrb	r3, [r2, #1]
 8008fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa6:	bf04      	itt	eq
 8008fa8:	2310      	moveq	r3, #16
 8008faa:	1c95      	addeq	r5, r2, #2
 8008fac:	f04f 020a 	mov.w	r2, #10
 8008fb0:	bf08      	it	eq
 8008fb2:	9341      	streq	r3, [sp, #260]	; 0x104
 8008fb4:	46aa      	mov	sl, r5
 8008fb6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008fba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008fbe:	2b09      	cmp	r3, #9
 8008fc0:	d91d      	bls.n	8008ffe <__ssvfiscanf_r+0xfa>
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	487e      	ldr	r0, [pc, #504]	; (80091c0 <__ssvfiscanf_r+0x2bc>)
 8008fc6:	f000 ff79 	bl	8009ebc <memchr>
 8008fca:	b140      	cbz	r0, 8008fde <__ssvfiscanf_r+0xda>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	4655      	mov	r5, sl
 8008fd0:	eba0 0009 	sub.w	r0, r0, r9
 8008fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008fda:	4318      	orrs	r0, r3
 8008fdc:	9041      	str	r0, [sp, #260]	; 0x104
 8008fde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fe2:	2b78      	cmp	r3, #120	; 0x78
 8008fe4:	d806      	bhi.n	8008ff4 <__ssvfiscanf_r+0xf0>
 8008fe6:	2b57      	cmp	r3, #87	; 0x57
 8008fe8:	d810      	bhi.n	800900c <__ssvfiscanf_r+0x108>
 8008fea:	2b25      	cmp	r3, #37	; 0x25
 8008fec:	d0c4      	beq.n	8008f78 <__ssvfiscanf_r+0x74>
 8008fee:	d857      	bhi.n	80090a0 <__ssvfiscanf_r+0x19c>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d065      	beq.n	80090c0 <__ssvfiscanf_r+0x1bc>
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ff8:	230a      	movs	r3, #10
 8008ffa:	9342      	str	r3, [sp, #264]	; 0x108
 8008ffc:	e072      	b.n	80090e4 <__ssvfiscanf_r+0x1e0>
 8008ffe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009000:	4655      	mov	r5, sl
 8009002:	fb02 1103 	mla	r1, r2, r3, r1
 8009006:	3930      	subs	r1, #48	; 0x30
 8009008:	9143      	str	r1, [sp, #268]	; 0x10c
 800900a:	e7d3      	b.n	8008fb4 <__ssvfiscanf_r+0xb0>
 800900c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009010:	2a20      	cmp	r2, #32
 8009012:	d8ef      	bhi.n	8008ff4 <__ssvfiscanf_r+0xf0>
 8009014:	a101      	add	r1, pc, #4	; (adr r1, 800901c <__ssvfiscanf_r+0x118>)
 8009016:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800901a:	bf00      	nop
 800901c:	080090cf 	.word	0x080090cf
 8009020:	08008ff5 	.word	0x08008ff5
 8009024:	08008ff5 	.word	0x08008ff5
 8009028:	0800912d 	.word	0x0800912d
 800902c:	08008ff5 	.word	0x08008ff5
 8009030:	08008ff5 	.word	0x08008ff5
 8009034:	08008ff5 	.word	0x08008ff5
 8009038:	08008ff5 	.word	0x08008ff5
 800903c:	08008ff5 	.word	0x08008ff5
 8009040:	08008ff5 	.word	0x08008ff5
 8009044:	08008ff5 	.word	0x08008ff5
 8009048:	08009143 	.word	0x08009143
 800904c:	08009119 	.word	0x08009119
 8009050:	080090a7 	.word	0x080090a7
 8009054:	080090a7 	.word	0x080090a7
 8009058:	080090a7 	.word	0x080090a7
 800905c:	08008ff5 	.word	0x08008ff5
 8009060:	0800911d 	.word	0x0800911d
 8009064:	08008ff5 	.word	0x08008ff5
 8009068:	08008ff5 	.word	0x08008ff5
 800906c:	08008ff5 	.word	0x08008ff5
 8009070:	08008ff5 	.word	0x08008ff5
 8009074:	08009153 	.word	0x08009153
 8009078:	08009125 	.word	0x08009125
 800907c:	080090c7 	.word	0x080090c7
 8009080:	08008ff5 	.word	0x08008ff5
 8009084:	08008ff5 	.word	0x08008ff5
 8009088:	0800914f 	.word	0x0800914f
 800908c:	08008ff5 	.word	0x08008ff5
 8009090:	08009119 	.word	0x08009119
 8009094:	08008ff5 	.word	0x08008ff5
 8009098:	08008ff5 	.word	0x08008ff5
 800909c:	080090cf 	.word	0x080090cf
 80090a0:	3b45      	subs	r3, #69	; 0x45
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d8a6      	bhi.n	8008ff4 <__ssvfiscanf_r+0xf0>
 80090a6:	2305      	movs	r3, #5
 80090a8:	e01b      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 80090aa:	4621      	mov	r1, r4
 80090ac:	4630      	mov	r0, r6
 80090ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80090b0:	4798      	blx	r3
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f43f af65 	beq.w	8008f82 <__ssvfiscanf_r+0x7e>
 80090b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f040 808d 	bne.w	80091da <__ssvfiscanf_r+0x2d6>
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e08f      	b.n	80091e6 <__ssvfiscanf_r+0x2e2>
 80090c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80090c8:	f042 0220 	orr.w	r2, r2, #32
 80090cc:	9241      	str	r2, [sp, #260]	; 0x104
 80090ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80090d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d4:	9241      	str	r2, [sp, #260]	; 0x104
 80090d6:	2210      	movs	r2, #16
 80090d8:	2b6f      	cmp	r3, #111	; 0x6f
 80090da:	bf34      	ite	cc
 80090dc:	2303      	movcc	r3, #3
 80090de:	2304      	movcs	r3, #4
 80090e0:	9242      	str	r2, [sp, #264]	; 0x108
 80090e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd42      	ble.n	8009170 <__ssvfiscanf_r+0x26c>
 80090ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090ec:	0659      	lsls	r1, r3, #25
 80090ee:	d404      	bmi.n	80090fa <__ssvfiscanf_r+0x1f6>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	5cba      	ldrb	r2, [r7, r2]
 80090f6:	0712      	lsls	r2, r2, #28
 80090f8:	d441      	bmi.n	800917e <__ssvfiscanf_r+0x27a>
 80090fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	dc50      	bgt.n	80091a2 <__ssvfiscanf_r+0x29e>
 8009100:	466b      	mov	r3, sp
 8009102:	4622      	mov	r2, r4
 8009104:	4630      	mov	r0, r6
 8009106:	a941      	add	r1, sp, #260	; 0x104
 8009108:	f000 fb64 	bl	80097d4 <_scanf_chars>
 800910c:	2801      	cmp	r0, #1
 800910e:	d06e      	beq.n	80091ee <__ssvfiscanf_r+0x2ea>
 8009110:	2802      	cmp	r0, #2
 8009112:	f47f af1d 	bne.w	8008f50 <__ssvfiscanf_r+0x4c>
 8009116:	e7cf      	b.n	80090b8 <__ssvfiscanf_r+0x1b4>
 8009118:	220a      	movs	r2, #10
 800911a:	e7dd      	b.n	80090d8 <__ssvfiscanf_r+0x1d4>
 800911c:	2300      	movs	r3, #0
 800911e:	9342      	str	r3, [sp, #264]	; 0x108
 8009120:	2303      	movs	r3, #3
 8009122:	e7de      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 8009124:	2308      	movs	r3, #8
 8009126:	9342      	str	r3, [sp, #264]	; 0x108
 8009128:	2304      	movs	r3, #4
 800912a:	e7da      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 800912c:	4629      	mov	r1, r5
 800912e:	4640      	mov	r0, r8
 8009130:	f000 fcb4 	bl	8009a9c <__sccl>
 8009134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009136:	4605      	mov	r5, r0
 8009138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913c:	9341      	str	r3, [sp, #260]	; 0x104
 800913e:	2301      	movs	r3, #1
 8009140:	e7cf      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 8009142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009148:	9341      	str	r3, [sp, #260]	; 0x104
 800914a:	2300      	movs	r3, #0
 800914c:	e7c9      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 800914e:	2302      	movs	r3, #2
 8009150:	e7c7      	b.n	80090e2 <__ssvfiscanf_r+0x1de>
 8009152:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009154:	06c3      	lsls	r3, r0, #27
 8009156:	f53f aefb 	bmi.w	8008f50 <__ssvfiscanf_r+0x4c>
 800915a:	9b00      	ldr	r3, [sp, #0]
 800915c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800915e:	1d19      	adds	r1, r3, #4
 8009160:	9100      	str	r1, [sp, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f010 0f01 	tst.w	r0, #1
 8009168:	bf14      	ite	ne
 800916a:	801a      	strhne	r2, [r3, #0]
 800916c:	601a      	streq	r2, [r3, #0]
 800916e:	e6ef      	b.n	8008f50 <__ssvfiscanf_r+0x4c>
 8009170:	4621      	mov	r1, r4
 8009172:	4630      	mov	r0, r6
 8009174:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009176:	4798      	blx	r3
 8009178:	2800      	cmp	r0, #0
 800917a:	d0b6      	beq.n	80090ea <__ssvfiscanf_r+0x1e6>
 800917c:	e79c      	b.n	80090b8 <__ssvfiscanf_r+0x1b4>
 800917e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009180:	3201      	adds	r2, #1
 8009182:	9245      	str	r2, [sp, #276]	; 0x114
 8009184:	6862      	ldr	r2, [r4, #4]
 8009186:	3a01      	subs	r2, #1
 8009188:	2a00      	cmp	r2, #0
 800918a:	6062      	str	r2, [r4, #4]
 800918c:	dd02      	ble.n	8009194 <__ssvfiscanf_r+0x290>
 800918e:	3301      	adds	r3, #1
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	e7ad      	b.n	80090f0 <__ssvfiscanf_r+0x1ec>
 8009194:	4621      	mov	r1, r4
 8009196:	4630      	mov	r0, r6
 8009198:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800919a:	4798      	blx	r3
 800919c:	2800      	cmp	r0, #0
 800919e:	d0a7      	beq.n	80090f0 <__ssvfiscanf_r+0x1ec>
 80091a0:	e78a      	b.n	80090b8 <__ssvfiscanf_r+0x1b4>
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	dc0e      	bgt.n	80091c4 <__ssvfiscanf_r+0x2c0>
 80091a6:	466b      	mov	r3, sp
 80091a8:	4622      	mov	r2, r4
 80091aa:	4630      	mov	r0, r6
 80091ac:	a941      	add	r1, sp, #260	; 0x104
 80091ae:	f000 fb6b 	bl	8009888 <_scanf_i>
 80091b2:	e7ab      	b.n	800910c <__ssvfiscanf_r+0x208>
 80091b4:	08008e51 	.word	0x08008e51
 80091b8:	08008ecb 	.word	0x08008ecb
 80091bc:	0800a261 	.word	0x0800a261
 80091c0:	0800a367 	.word	0x0800a367
 80091c4:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <__ssvfiscanf_r+0x2f0>)
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f43f aec2 	beq.w	8008f50 <__ssvfiscanf_r+0x4c>
 80091cc:	466b      	mov	r3, sp
 80091ce:	4622      	mov	r2, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	a941      	add	r1, sp, #260	; 0x104
 80091d4:	f3af 8000 	nop.w
 80091d8:	e798      	b.n	800910c <__ssvfiscanf_r+0x208>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80091e0:	bf18      	it	ne
 80091e2:	f04f 30ff 	movne.w	r0, #4294967295
 80091e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80091f0:	e7f9      	b.n	80091e6 <__ssvfiscanf_r+0x2e2>
 80091f2:	bf00      	nop
 80091f4:	00000000 	.word	0x00000000

080091f8 <__sfputc_r>:
 80091f8:	6893      	ldr	r3, [r2, #8]
 80091fa:	b410      	push	{r4}
 80091fc:	3b01      	subs	r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	da07      	bge.n	8009214 <__sfputc_r+0x1c>
 8009204:	6994      	ldr	r4, [r2, #24]
 8009206:	42a3      	cmp	r3, r4
 8009208:	db01      	blt.n	800920e <__sfputc_r+0x16>
 800920a:	290a      	cmp	r1, #10
 800920c:	d102      	bne.n	8009214 <__sfputc_r+0x1c>
 800920e:	bc10      	pop	{r4}
 8009210:	f000 bd28 	b.w	8009c64 <__swbuf_r>
 8009214:	6813      	ldr	r3, [r2, #0]
 8009216:	1c58      	adds	r0, r3, #1
 8009218:	6010      	str	r0, [r2, #0]
 800921a:	7019      	strb	r1, [r3, #0]
 800921c:	4608      	mov	r0, r1
 800921e:	bc10      	pop	{r4}
 8009220:	4770      	bx	lr

08009222 <__sfputs_r>:
 8009222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	4614      	mov	r4, r2
 800922a:	18d5      	adds	r5, r2, r3
 800922c:	42ac      	cmp	r4, r5
 800922e:	d101      	bne.n	8009234 <__sfputs_r+0x12>
 8009230:	2000      	movs	r0, #0
 8009232:	e007      	b.n	8009244 <__sfputs_r+0x22>
 8009234:	463a      	mov	r2, r7
 8009236:	4630      	mov	r0, r6
 8009238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923c:	f7ff ffdc 	bl	80091f8 <__sfputc_r>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d1f3      	bne.n	800922c <__sfputs_r+0xa>
 8009244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009248 <_vfiprintf_r>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	460d      	mov	r5, r1
 800924e:	4614      	mov	r4, r2
 8009250:	4698      	mov	r8, r3
 8009252:	4606      	mov	r6, r0
 8009254:	b09d      	sub	sp, #116	; 0x74
 8009256:	b118      	cbz	r0, 8009260 <_vfiprintf_r+0x18>
 8009258:	6983      	ldr	r3, [r0, #24]
 800925a:	b90b      	cbnz	r3, 8009260 <_vfiprintf_r+0x18>
 800925c:	f7fe ffb0 	bl	80081c0 <__sinit>
 8009260:	4b89      	ldr	r3, [pc, #548]	; (8009488 <_vfiprintf_r+0x240>)
 8009262:	429d      	cmp	r5, r3
 8009264:	d11b      	bne.n	800929e <_vfiprintf_r+0x56>
 8009266:	6875      	ldr	r5, [r6, #4]
 8009268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926a:	07d9      	lsls	r1, r3, #31
 800926c:	d405      	bmi.n	800927a <_vfiprintf_r+0x32>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	059a      	lsls	r2, r3, #22
 8009272:	d402      	bmi.n	800927a <_vfiprintf_r+0x32>
 8009274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009276:	f7ff f866 	bl	8008346 <__retarget_lock_acquire_recursive>
 800927a:	89ab      	ldrh	r3, [r5, #12]
 800927c:	071b      	lsls	r3, r3, #28
 800927e:	d501      	bpl.n	8009284 <_vfiprintf_r+0x3c>
 8009280:	692b      	ldr	r3, [r5, #16]
 8009282:	b9eb      	cbnz	r3, 80092c0 <_vfiprintf_r+0x78>
 8009284:	4629      	mov	r1, r5
 8009286:	4630      	mov	r0, r6
 8009288:	f000 fd3e 	bl	8009d08 <__swsetup_r>
 800928c:	b1c0      	cbz	r0, 80092c0 <_vfiprintf_r+0x78>
 800928e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009290:	07dc      	lsls	r4, r3, #31
 8009292:	d50e      	bpl.n	80092b2 <_vfiprintf_r+0x6a>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b01d      	add	sp, #116	; 0x74
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	4b7b      	ldr	r3, [pc, #492]	; (800948c <_vfiprintf_r+0x244>)
 80092a0:	429d      	cmp	r5, r3
 80092a2:	d101      	bne.n	80092a8 <_vfiprintf_r+0x60>
 80092a4:	68b5      	ldr	r5, [r6, #8]
 80092a6:	e7df      	b.n	8009268 <_vfiprintf_r+0x20>
 80092a8:	4b79      	ldr	r3, [pc, #484]	; (8009490 <_vfiprintf_r+0x248>)
 80092aa:	429d      	cmp	r5, r3
 80092ac:	bf08      	it	eq
 80092ae:	68f5      	ldreq	r5, [r6, #12]
 80092b0:	e7da      	b.n	8009268 <_vfiprintf_r+0x20>
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	0598      	lsls	r0, r3, #22
 80092b6:	d4ed      	bmi.n	8009294 <_vfiprintf_r+0x4c>
 80092b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ba:	f7ff f845 	bl	8008348 <__retarget_lock_release_recursive>
 80092be:	e7e9      	b.n	8009294 <_vfiprintf_r+0x4c>
 80092c0:	2300      	movs	r3, #0
 80092c2:	9309      	str	r3, [sp, #36]	; 0x24
 80092c4:	2320      	movs	r3, #32
 80092c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ca:	2330      	movs	r3, #48	; 0x30
 80092cc:	f04f 0901 	mov.w	r9, #1
 80092d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009494 <_vfiprintf_r+0x24c>
 80092d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092dc:	4623      	mov	r3, r4
 80092de:	469a      	mov	sl, r3
 80092e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e4:	b10a      	cbz	r2, 80092ea <_vfiprintf_r+0xa2>
 80092e6:	2a25      	cmp	r2, #37	; 0x25
 80092e8:	d1f9      	bne.n	80092de <_vfiprintf_r+0x96>
 80092ea:	ebba 0b04 	subs.w	fp, sl, r4
 80092ee:	d00b      	beq.n	8009308 <_vfiprintf_r+0xc0>
 80092f0:	465b      	mov	r3, fp
 80092f2:	4622      	mov	r2, r4
 80092f4:	4629      	mov	r1, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff ff93 	bl	8009222 <__sfputs_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	f000 80aa 	beq.w	8009456 <_vfiprintf_r+0x20e>
 8009302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009304:	445a      	add	r2, fp
 8009306:	9209      	str	r2, [sp, #36]	; 0x24
 8009308:	f89a 3000 	ldrb.w	r3, [sl]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 80a2 	beq.w	8009456 <_vfiprintf_r+0x20e>
 8009312:	2300      	movs	r3, #0
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931c:	f10a 0a01 	add.w	sl, sl, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009328:	931a      	str	r3, [sp, #104]	; 0x68
 800932a:	4654      	mov	r4, sl
 800932c:	2205      	movs	r2, #5
 800932e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009332:	4858      	ldr	r0, [pc, #352]	; (8009494 <_vfiprintf_r+0x24c>)
 8009334:	f000 fdc2 	bl	8009ebc <memchr>
 8009338:	9a04      	ldr	r2, [sp, #16]
 800933a:	b9d8      	cbnz	r0, 8009374 <_vfiprintf_r+0x12c>
 800933c:	06d1      	lsls	r1, r2, #27
 800933e:	bf44      	itt	mi
 8009340:	2320      	movmi	r3, #32
 8009342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009346:	0713      	lsls	r3, r2, #28
 8009348:	bf44      	itt	mi
 800934a:	232b      	movmi	r3, #43	; 0x2b
 800934c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009350:	f89a 3000 	ldrb.w	r3, [sl]
 8009354:	2b2a      	cmp	r3, #42	; 0x2a
 8009356:	d015      	beq.n	8009384 <_vfiprintf_r+0x13c>
 8009358:	4654      	mov	r4, sl
 800935a:	2000      	movs	r0, #0
 800935c:	f04f 0c0a 	mov.w	ip, #10
 8009360:	9a07      	ldr	r2, [sp, #28]
 8009362:	4621      	mov	r1, r4
 8009364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009368:	3b30      	subs	r3, #48	; 0x30
 800936a:	2b09      	cmp	r3, #9
 800936c:	d94e      	bls.n	800940c <_vfiprintf_r+0x1c4>
 800936e:	b1b0      	cbz	r0, 800939e <_vfiprintf_r+0x156>
 8009370:	9207      	str	r2, [sp, #28]
 8009372:	e014      	b.n	800939e <_vfiprintf_r+0x156>
 8009374:	eba0 0308 	sub.w	r3, r0, r8
 8009378:	fa09 f303 	lsl.w	r3, r9, r3
 800937c:	4313      	orrs	r3, r2
 800937e:	46a2      	mov	sl, r4
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	e7d2      	b.n	800932a <_vfiprintf_r+0xe2>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	1d19      	adds	r1, r3, #4
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	9103      	str	r1, [sp, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfbb      	ittet	lt
 8009390:	425b      	neglt	r3, r3
 8009392:	f042 0202 	orrlt.w	r2, r2, #2
 8009396:	9307      	strge	r3, [sp, #28]
 8009398:	9307      	strlt	r3, [sp, #28]
 800939a:	bfb8      	it	lt
 800939c:	9204      	strlt	r2, [sp, #16]
 800939e:	7823      	ldrb	r3, [r4, #0]
 80093a0:	2b2e      	cmp	r3, #46	; 0x2e
 80093a2:	d10c      	bne.n	80093be <_vfiprintf_r+0x176>
 80093a4:	7863      	ldrb	r3, [r4, #1]
 80093a6:	2b2a      	cmp	r3, #42	; 0x2a
 80093a8:	d135      	bne.n	8009416 <_vfiprintf_r+0x1ce>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	3402      	adds	r4, #2
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9203      	str	r2, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfb8      	it	lt
 80093b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009498 <_vfiprintf_r+0x250>
 80093c2:	2203      	movs	r2, #3
 80093c4:	4650      	mov	r0, sl
 80093c6:	7821      	ldrb	r1, [r4, #0]
 80093c8:	f000 fd78 	bl	8009ebc <memchr>
 80093cc:	b140      	cbz	r0, 80093e0 <_vfiprintf_r+0x198>
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	eba0 000a 	sub.w	r0, r0, sl
 80093d4:	fa03 f000 	lsl.w	r0, r3, r0
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	3401      	adds	r4, #1
 80093dc:	4303      	orrs	r3, r0
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	2206      	movs	r2, #6
 80093e6:	482d      	ldr	r0, [pc, #180]	; (800949c <_vfiprintf_r+0x254>)
 80093e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ec:	f000 fd66 	bl	8009ebc <memchr>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d03f      	beq.n	8009474 <_vfiprintf_r+0x22c>
 80093f4:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <_vfiprintf_r+0x258>)
 80093f6:	bb1b      	cbnz	r3, 8009440 <_vfiprintf_r+0x1f8>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	3307      	adds	r3, #7
 80093fc:	f023 0307 	bic.w	r3, r3, #7
 8009400:	3308      	adds	r3, #8
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009406:	443b      	add	r3, r7
 8009408:	9309      	str	r3, [sp, #36]	; 0x24
 800940a:	e767      	b.n	80092dc <_vfiprintf_r+0x94>
 800940c:	460c      	mov	r4, r1
 800940e:	2001      	movs	r0, #1
 8009410:	fb0c 3202 	mla	r2, ip, r2, r3
 8009414:	e7a5      	b.n	8009362 <_vfiprintf_r+0x11a>
 8009416:	2300      	movs	r3, #0
 8009418:	f04f 0c0a 	mov.w	ip, #10
 800941c:	4619      	mov	r1, r3
 800941e:	3401      	adds	r4, #1
 8009420:	9305      	str	r3, [sp, #20]
 8009422:	4620      	mov	r0, r4
 8009424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009428:	3a30      	subs	r2, #48	; 0x30
 800942a:	2a09      	cmp	r2, #9
 800942c:	d903      	bls.n	8009436 <_vfiprintf_r+0x1ee>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0c5      	beq.n	80093be <_vfiprintf_r+0x176>
 8009432:	9105      	str	r1, [sp, #20]
 8009434:	e7c3      	b.n	80093be <_vfiprintf_r+0x176>
 8009436:	4604      	mov	r4, r0
 8009438:	2301      	movs	r3, #1
 800943a:	fb0c 2101 	mla	r1, ip, r1, r2
 800943e:	e7f0      	b.n	8009422 <_vfiprintf_r+0x1da>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4630      	mov	r0, r6
 8009448:	4b16      	ldr	r3, [pc, #88]	; (80094a4 <_vfiprintf_r+0x25c>)
 800944a:	a904      	add	r1, sp, #16
 800944c:	f3af 8000 	nop.w
 8009450:	4607      	mov	r7, r0
 8009452:	1c78      	adds	r0, r7, #1
 8009454:	d1d6      	bne.n	8009404 <_vfiprintf_r+0x1bc>
 8009456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009458:	07d9      	lsls	r1, r3, #31
 800945a:	d405      	bmi.n	8009468 <_vfiprintf_r+0x220>
 800945c:	89ab      	ldrh	r3, [r5, #12]
 800945e:	059a      	lsls	r2, r3, #22
 8009460:	d402      	bmi.n	8009468 <_vfiprintf_r+0x220>
 8009462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009464:	f7fe ff70 	bl	8008348 <__retarget_lock_release_recursive>
 8009468:	89ab      	ldrh	r3, [r5, #12]
 800946a:	065b      	lsls	r3, r3, #25
 800946c:	f53f af12 	bmi.w	8009294 <_vfiprintf_r+0x4c>
 8009470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009472:	e711      	b.n	8009298 <_vfiprintf_r+0x50>
 8009474:	ab03      	add	r3, sp, #12
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	462a      	mov	r2, r5
 800947a:	4630      	mov	r0, r6
 800947c:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <_vfiprintf_r+0x25c>)
 800947e:	a904      	add	r1, sp, #16
 8009480:	f000 f882 	bl	8009588 <_printf_i>
 8009484:	e7e4      	b.n	8009450 <_vfiprintf_r+0x208>
 8009486:	bf00      	nop
 8009488:	0800a16c 	.word	0x0800a16c
 800948c:	0800a18c 	.word	0x0800a18c
 8009490:	0800a14c 	.word	0x0800a14c
 8009494:	0800a361 	.word	0x0800a361
 8009498:	0800a367 	.word	0x0800a367
 800949c:	0800a36b 	.word	0x0800a36b
 80094a0:	00000000 	.word	0x00000000
 80094a4:	08009223 	.word	0x08009223

080094a8 <_printf_common>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	4616      	mov	r6, r2
 80094ae:	4699      	mov	r9, r3
 80094b0:	688a      	ldr	r2, [r1, #8]
 80094b2:	690b      	ldr	r3, [r1, #16]
 80094b4:	4607      	mov	r7, r0
 80094b6:	4293      	cmp	r3, r2
 80094b8:	bfb8      	it	lt
 80094ba:	4613      	movlt	r3, r2
 80094bc:	6033      	str	r3, [r6, #0]
 80094be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c2:	460c      	mov	r4, r1
 80094c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c8:	b10a      	cbz	r2, 80094ce <_printf_common+0x26>
 80094ca:	3301      	adds	r3, #1
 80094cc:	6033      	str	r3, [r6, #0]
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	0699      	lsls	r1, r3, #26
 80094d2:	bf42      	ittt	mi
 80094d4:	6833      	ldrmi	r3, [r6, #0]
 80094d6:	3302      	addmi	r3, #2
 80094d8:	6033      	strmi	r3, [r6, #0]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	f015 0506 	ands.w	r5, r5, #6
 80094e0:	d106      	bne.n	80094f0 <_printf_common+0x48>
 80094e2:	f104 0a19 	add.w	sl, r4, #25
 80094e6:	68e3      	ldr	r3, [r4, #12]
 80094e8:	6832      	ldr	r2, [r6, #0]
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	dc28      	bgt.n	8009542 <_printf_common+0x9a>
 80094f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f4:	1e13      	subs	r3, r2, #0
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	bf18      	it	ne
 80094fa:	2301      	movne	r3, #1
 80094fc:	0692      	lsls	r2, r2, #26
 80094fe:	d42d      	bmi.n	800955c <_printf_common+0xb4>
 8009500:	4649      	mov	r1, r9
 8009502:	4638      	mov	r0, r7
 8009504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009508:	47c0      	blx	r8
 800950a:	3001      	adds	r0, #1
 800950c:	d020      	beq.n	8009550 <_printf_common+0xa8>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	68e5      	ldr	r5, [r4, #12]
 8009512:	f003 0306 	and.w	r3, r3, #6
 8009516:	2b04      	cmp	r3, #4
 8009518:	bf18      	it	ne
 800951a:	2500      	movne	r5, #0
 800951c:	6832      	ldr	r2, [r6, #0]
 800951e:	f04f 0600 	mov.w	r6, #0
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	bf08      	it	eq
 8009526:	1aad      	subeq	r5, r5, r2
 8009528:	6922      	ldr	r2, [r4, #16]
 800952a:	bf08      	it	eq
 800952c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009530:	4293      	cmp	r3, r2
 8009532:	bfc4      	itt	gt
 8009534:	1a9b      	subgt	r3, r3, r2
 8009536:	18ed      	addgt	r5, r5, r3
 8009538:	341a      	adds	r4, #26
 800953a:	42b5      	cmp	r5, r6
 800953c:	d11a      	bne.n	8009574 <_printf_common+0xcc>
 800953e:	2000      	movs	r0, #0
 8009540:	e008      	b.n	8009554 <_printf_common+0xac>
 8009542:	2301      	movs	r3, #1
 8009544:	4652      	mov	r2, sl
 8009546:	4649      	mov	r1, r9
 8009548:	4638      	mov	r0, r7
 800954a:	47c0      	blx	r8
 800954c:	3001      	adds	r0, #1
 800954e:	d103      	bne.n	8009558 <_printf_common+0xb0>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009558:	3501      	adds	r5, #1
 800955a:	e7c4      	b.n	80094e6 <_printf_common+0x3e>
 800955c:	2030      	movs	r0, #48	; 0x30
 800955e:	18e1      	adds	r1, r4, r3
 8009560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800956a:	4422      	add	r2, r4
 800956c:	3302      	adds	r3, #2
 800956e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009572:	e7c5      	b.n	8009500 <_printf_common+0x58>
 8009574:	2301      	movs	r3, #1
 8009576:	4622      	mov	r2, r4
 8009578:	4649      	mov	r1, r9
 800957a:	4638      	mov	r0, r7
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d0e6      	beq.n	8009550 <_printf_common+0xa8>
 8009582:	3601      	adds	r6, #1
 8009584:	e7d9      	b.n	800953a <_printf_common+0x92>
	...

08009588 <_printf_i>:
 8009588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800958c:	7e0f      	ldrb	r7, [r1, #24]
 800958e:	4691      	mov	r9, r2
 8009590:	2f78      	cmp	r7, #120	; 0x78
 8009592:	4680      	mov	r8, r0
 8009594:	460c      	mov	r4, r1
 8009596:	469a      	mov	sl, r3
 8009598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800959a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800959e:	d807      	bhi.n	80095b0 <_printf_i+0x28>
 80095a0:	2f62      	cmp	r7, #98	; 0x62
 80095a2:	d80a      	bhi.n	80095ba <_printf_i+0x32>
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	f000 80d9 	beq.w	800975c <_printf_i+0x1d4>
 80095aa:	2f58      	cmp	r7, #88	; 0x58
 80095ac:	f000 80a4 	beq.w	80096f8 <_printf_i+0x170>
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b8:	e03a      	b.n	8009630 <_printf_i+0xa8>
 80095ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095be:	2b15      	cmp	r3, #21
 80095c0:	d8f6      	bhi.n	80095b0 <_printf_i+0x28>
 80095c2:	a101      	add	r1, pc, #4	; (adr r1, 80095c8 <_printf_i+0x40>)
 80095c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c8:	08009621 	.word	0x08009621
 80095cc:	08009635 	.word	0x08009635
 80095d0:	080095b1 	.word	0x080095b1
 80095d4:	080095b1 	.word	0x080095b1
 80095d8:	080095b1 	.word	0x080095b1
 80095dc:	080095b1 	.word	0x080095b1
 80095e0:	08009635 	.word	0x08009635
 80095e4:	080095b1 	.word	0x080095b1
 80095e8:	080095b1 	.word	0x080095b1
 80095ec:	080095b1 	.word	0x080095b1
 80095f0:	080095b1 	.word	0x080095b1
 80095f4:	08009743 	.word	0x08009743
 80095f8:	08009665 	.word	0x08009665
 80095fc:	08009725 	.word	0x08009725
 8009600:	080095b1 	.word	0x080095b1
 8009604:	080095b1 	.word	0x080095b1
 8009608:	08009765 	.word	0x08009765
 800960c:	080095b1 	.word	0x080095b1
 8009610:	08009665 	.word	0x08009665
 8009614:	080095b1 	.word	0x080095b1
 8009618:	080095b1 	.word	0x080095b1
 800961c:	0800972d 	.word	0x0800972d
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	1d1a      	adds	r2, r3, #4
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	602a      	str	r2, [r5, #0]
 8009628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800962c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009630:	2301      	movs	r3, #1
 8009632:	e0a4      	b.n	800977e <_printf_i+0x1f6>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	6829      	ldr	r1, [r5, #0]
 8009638:	0606      	lsls	r6, r0, #24
 800963a:	f101 0304 	add.w	r3, r1, #4
 800963e:	d50a      	bpl.n	8009656 <_printf_i+0xce>
 8009640:	680e      	ldr	r6, [r1, #0]
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	2e00      	cmp	r6, #0
 8009646:	da03      	bge.n	8009650 <_printf_i+0xc8>
 8009648:	232d      	movs	r3, #45	; 0x2d
 800964a:	4276      	negs	r6, r6
 800964c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009650:	230a      	movs	r3, #10
 8009652:	485e      	ldr	r0, [pc, #376]	; (80097cc <_printf_i+0x244>)
 8009654:	e019      	b.n	800968a <_printf_i+0x102>
 8009656:	680e      	ldr	r6, [r1, #0]
 8009658:	f010 0f40 	tst.w	r0, #64	; 0x40
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	bf18      	it	ne
 8009660:	b236      	sxthne	r6, r6
 8009662:	e7ef      	b.n	8009644 <_printf_i+0xbc>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	6029      	str	r1, [r5, #0]
 800966c:	0601      	lsls	r1, r0, #24
 800966e:	d501      	bpl.n	8009674 <_printf_i+0xec>
 8009670:	681e      	ldr	r6, [r3, #0]
 8009672:	e002      	b.n	800967a <_printf_i+0xf2>
 8009674:	0646      	lsls	r6, r0, #25
 8009676:	d5fb      	bpl.n	8009670 <_printf_i+0xe8>
 8009678:	881e      	ldrh	r6, [r3, #0]
 800967a:	2f6f      	cmp	r7, #111	; 0x6f
 800967c:	bf0c      	ite	eq
 800967e:	2308      	moveq	r3, #8
 8009680:	230a      	movne	r3, #10
 8009682:	4852      	ldr	r0, [pc, #328]	; (80097cc <_printf_i+0x244>)
 8009684:	2100      	movs	r1, #0
 8009686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968a:	6865      	ldr	r5, [r4, #4]
 800968c:	2d00      	cmp	r5, #0
 800968e:	bfa8      	it	ge
 8009690:	6821      	ldrge	r1, [r4, #0]
 8009692:	60a5      	str	r5, [r4, #8]
 8009694:	bfa4      	itt	ge
 8009696:	f021 0104 	bicge.w	r1, r1, #4
 800969a:	6021      	strge	r1, [r4, #0]
 800969c:	b90e      	cbnz	r6, 80096a2 <_printf_i+0x11a>
 800969e:	2d00      	cmp	r5, #0
 80096a0:	d04d      	beq.n	800973e <_printf_i+0x1b6>
 80096a2:	4615      	mov	r5, r2
 80096a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a8:	fb03 6711 	mls	r7, r3, r1, r6
 80096ac:	5dc7      	ldrb	r7, [r0, r7]
 80096ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b2:	4637      	mov	r7, r6
 80096b4:	42bb      	cmp	r3, r7
 80096b6:	460e      	mov	r6, r1
 80096b8:	d9f4      	bls.n	80096a4 <_printf_i+0x11c>
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d10b      	bne.n	80096d6 <_printf_i+0x14e>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	07de      	lsls	r6, r3, #31
 80096c2:	d508      	bpl.n	80096d6 <_printf_i+0x14e>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	6861      	ldr	r1, [r4, #4]
 80096c8:	4299      	cmp	r1, r3
 80096ca:	bfde      	ittt	le
 80096cc:	2330      	movle	r3, #48	; 0x30
 80096ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096d6:	1b52      	subs	r2, r2, r5
 80096d8:	6122      	str	r2, [r4, #16]
 80096da:	464b      	mov	r3, r9
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f8cd a000 	str.w	sl, [sp]
 80096e4:	aa03      	add	r2, sp, #12
 80096e6:	f7ff fedf 	bl	80094a8 <_printf_common>
 80096ea:	3001      	adds	r0, #1
 80096ec:	d14c      	bne.n	8009788 <_printf_i+0x200>
 80096ee:	f04f 30ff 	mov.w	r0, #4294967295
 80096f2:	b004      	add	sp, #16
 80096f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f8:	4834      	ldr	r0, [pc, #208]	; (80097cc <_printf_i+0x244>)
 80096fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096fe:	6829      	ldr	r1, [r5, #0]
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	f851 6b04 	ldr.w	r6, [r1], #4
 8009706:	6029      	str	r1, [r5, #0]
 8009708:	061d      	lsls	r5, r3, #24
 800970a:	d514      	bpl.n	8009736 <_printf_i+0x1ae>
 800970c:	07df      	lsls	r7, r3, #31
 800970e:	bf44      	itt	mi
 8009710:	f043 0320 	orrmi.w	r3, r3, #32
 8009714:	6023      	strmi	r3, [r4, #0]
 8009716:	b91e      	cbnz	r6, 8009720 <_printf_i+0x198>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f023 0320 	bic.w	r3, r3, #32
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	2310      	movs	r3, #16
 8009722:	e7af      	b.n	8009684 <_printf_i+0xfc>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	f043 0320 	orr.w	r3, r3, #32
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	2378      	movs	r3, #120	; 0x78
 800972e:	4828      	ldr	r0, [pc, #160]	; (80097d0 <_printf_i+0x248>)
 8009730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009734:	e7e3      	b.n	80096fe <_printf_i+0x176>
 8009736:	0659      	lsls	r1, r3, #25
 8009738:	bf48      	it	mi
 800973a:	b2b6      	uxthmi	r6, r6
 800973c:	e7e6      	b.n	800970c <_printf_i+0x184>
 800973e:	4615      	mov	r5, r2
 8009740:	e7bb      	b.n	80096ba <_printf_i+0x132>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	6826      	ldr	r6, [r4, #0]
 8009746:	1d18      	adds	r0, r3, #4
 8009748:	6961      	ldr	r1, [r4, #20]
 800974a:	6028      	str	r0, [r5, #0]
 800974c:	0635      	lsls	r5, r6, #24
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	d501      	bpl.n	8009756 <_printf_i+0x1ce>
 8009752:	6019      	str	r1, [r3, #0]
 8009754:	e002      	b.n	800975c <_printf_i+0x1d4>
 8009756:	0670      	lsls	r0, r6, #25
 8009758:	d5fb      	bpl.n	8009752 <_printf_i+0x1ca>
 800975a:	8019      	strh	r1, [r3, #0]
 800975c:	2300      	movs	r3, #0
 800975e:	4615      	mov	r5, r2
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	e7ba      	b.n	80096da <_printf_i+0x152>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	2100      	movs	r1, #0
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	602a      	str	r2, [r5, #0]
 800976c:	681d      	ldr	r5, [r3, #0]
 800976e:	6862      	ldr	r2, [r4, #4]
 8009770:	4628      	mov	r0, r5
 8009772:	f000 fba3 	bl	8009ebc <memchr>
 8009776:	b108      	cbz	r0, 800977c <_printf_i+0x1f4>
 8009778:	1b40      	subs	r0, r0, r5
 800977a:	6060      	str	r0, [r4, #4]
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	6123      	str	r3, [r4, #16]
 8009780:	2300      	movs	r3, #0
 8009782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009786:	e7a8      	b.n	80096da <_printf_i+0x152>
 8009788:	462a      	mov	r2, r5
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	47d0      	blx	sl
 8009792:	3001      	adds	r0, #1
 8009794:	d0ab      	beq.n	80096ee <_printf_i+0x166>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	079b      	lsls	r3, r3, #30
 800979a:	d413      	bmi.n	80097c4 <_printf_i+0x23c>
 800979c:	68e0      	ldr	r0, [r4, #12]
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	4298      	cmp	r0, r3
 80097a2:	bfb8      	it	lt
 80097a4:	4618      	movlt	r0, r3
 80097a6:	e7a4      	b.n	80096f2 <_printf_i+0x16a>
 80097a8:	2301      	movs	r3, #1
 80097aa:	4632      	mov	r2, r6
 80097ac:	4649      	mov	r1, r9
 80097ae:	4640      	mov	r0, r8
 80097b0:	47d0      	blx	sl
 80097b2:	3001      	adds	r0, #1
 80097b4:	d09b      	beq.n	80096ee <_printf_i+0x166>
 80097b6:	3501      	adds	r5, #1
 80097b8:	68e3      	ldr	r3, [r4, #12]
 80097ba:	9903      	ldr	r1, [sp, #12]
 80097bc:	1a5b      	subs	r3, r3, r1
 80097be:	42ab      	cmp	r3, r5
 80097c0:	dcf2      	bgt.n	80097a8 <_printf_i+0x220>
 80097c2:	e7eb      	b.n	800979c <_printf_i+0x214>
 80097c4:	2500      	movs	r5, #0
 80097c6:	f104 0619 	add.w	r6, r4, #25
 80097ca:	e7f5      	b.n	80097b8 <_printf_i+0x230>
 80097cc:	0800a372 	.word	0x0800a372
 80097d0:	0800a383 	.word	0x0800a383

080097d4 <_scanf_chars>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	4615      	mov	r5, r2
 80097da:	688a      	ldr	r2, [r1, #8]
 80097dc:	4680      	mov	r8, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	b932      	cbnz	r2, 80097f0 <_scanf_chars+0x1c>
 80097e2:	698a      	ldr	r2, [r1, #24]
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	bf0c      	ite	eq
 80097e8:	2201      	moveq	r2, #1
 80097ea:	f04f 32ff 	movne.w	r2, #4294967295
 80097ee:	608a      	str	r2, [r1, #8]
 80097f0:	2700      	movs	r7, #0
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009884 <_scanf_chars+0xb0>
 80097f8:	06d1      	lsls	r1, r2, #27
 80097fa:	bf5f      	itttt	pl
 80097fc:	681a      	ldrpl	r2, [r3, #0]
 80097fe:	1d11      	addpl	r1, r2, #4
 8009800:	6019      	strpl	r1, [r3, #0]
 8009802:	6816      	ldrpl	r6, [r2, #0]
 8009804:	69a0      	ldr	r0, [r4, #24]
 8009806:	b188      	cbz	r0, 800982c <_scanf_chars+0x58>
 8009808:	2801      	cmp	r0, #1
 800980a:	d107      	bne.n	800981c <_scanf_chars+0x48>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	6963      	ldr	r3, [r4, #20]
 8009812:	5c9b      	ldrb	r3, [r3, r2]
 8009814:	b953      	cbnz	r3, 800982c <_scanf_chars+0x58>
 8009816:	2f00      	cmp	r7, #0
 8009818:	d031      	beq.n	800987e <_scanf_chars+0xaa>
 800981a:	e022      	b.n	8009862 <_scanf_chars+0x8e>
 800981c:	2802      	cmp	r0, #2
 800981e:	d120      	bne.n	8009862 <_scanf_chars+0x8e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009828:	071b      	lsls	r3, r3, #28
 800982a:	d41a      	bmi.n	8009862 <_scanf_chars+0x8e>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	3701      	adds	r7, #1
 8009830:	06da      	lsls	r2, r3, #27
 8009832:	bf5e      	ittt	pl
 8009834:	682b      	ldrpl	r3, [r5, #0]
 8009836:	781b      	ldrbpl	r3, [r3, #0]
 8009838:	f806 3b01 	strbpl.w	r3, [r6], #1
 800983c:	682a      	ldr	r2, [r5, #0]
 800983e:	686b      	ldr	r3, [r5, #4]
 8009840:	3201      	adds	r2, #1
 8009842:	602a      	str	r2, [r5, #0]
 8009844:	68a2      	ldr	r2, [r4, #8]
 8009846:	3b01      	subs	r3, #1
 8009848:	3a01      	subs	r2, #1
 800984a:	606b      	str	r3, [r5, #4]
 800984c:	60a2      	str	r2, [r4, #8]
 800984e:	b142      	cbz	r2, 8009862 <_scanf_chars+0x8e>
 8009850:	2b00      	cmp	r3, #0
 8009852:	dcd7      	bgt.n	8009804 <_scanf_chars+0x30>
 8009854:	4629      	mov	r1, r5
 8009856:	4640      	mov	r0, r8
 8009858:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800985c:	4798      	blx	r3
 800985e:	2800      	cmp	r0, #0
 8009860:	d0d0      	beq.n	8009804 <_scanf_chars+0x30>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	f013 0310 	ands.w	r3, r3, #16
 8009868:	d105      	bne.n	8009876 <_scanf_chars+0xa2>
 800986a:	68e2      	ldr	r2, [r4, #12]
 800986c:	3201      	adds	r2, #1
 800986e:	60e2      	str	r2, [r4, #12]
 8009870:	69a2      	ldr	r2, [r4, #24]
 8009872:	b102      	cbz	r2, 8009876 <_scanf_chars+0xa2>
 8009874:	7033      	strb	r3, [r6, #0]
 8009876:	2000      	movs	r0, #0
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	443b      	add	r3, r7
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009882:	bf00      	nop
 8009884:	0800a261 	.word	0x0800a261

08009888 <_scanf_i>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	460c      	mov	r4, r1
 800988e:	4698      	mov	r8, r3
 8009890:	4b75      	ldr	r3, [pc, #468]	; (8009a68 <_scanf_i+0x1e0>)
 8009892:	b087      	sub	sp, #28
 8009894:	4682      	mov	sl, r0
 8009896:	4616      	mov	r6, r2
 8009898:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800989c:	ab03      	add	r3, sp, #12
 800989e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80098a2:	4b72      	ldr	r3, [pc, #456]	; (8009a6c <_scanf_i+0x1e4>)
 80098a4:	69a1      	ldr	r1, [r4, #24]
 80098a6:	4a72      	ldr	r2, [pc, #456]	; (8009a70 <_scanf_i+0x1e8>)
 80098a8:	4627      	mov	r7, r4
 80098aa:	2903      	cmp	r1, #3
 80098ac:	bf18      	it	ne
 80098ae:	461a      	movne	r2, r3
 80098b0:	68a3      	ldr	r3, [r4, #8]
 80098b2:	9201      	str	r2, [sp, #4]
 80098b4:	1e5a      	subs	r2, r3, #1
 80098b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098ba:	bf81      	itttt	hi
 80098bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098c0:	eb03 0905 	addhi.w	r9, r3, r5
 80098c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098c8:	60a3      	strhi	r3, [r4, #8]
 80098ca:	f857 3b1c 	ldr.w	r3, [r7], #28
 80098ce:	bf98      	it	ls
 80098d0:	f04f 0900 	movls.w	r9, #0
 80098d4:	463d      	mov	r5, r7
 80098d6:	f04f 0b00 	mov.w	fp, #0
 80098da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	6831      	ldr	r1, [r6, #0]
 80098e2:	ab03      	add	r3, sp, #12
 80098e4:	2202      	movs	r2, #2
 80098e6:	7809      	ldrb	r1, [r1, #0]
 80098e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80098ec:	f000 fae6 	bl	8009ebc <memchr>
 80098f0:	b328      	cbz	r0, 800993e <_scanf_i+0xb6>
 80098f2:	f1bb 0f01 	cmp.w	fp, #1
 80098f6:	d159      	bne.n	80099ac <_scanf_i+0x124>
 80098f8:	6862      	ldr	r2, [r4, #4]
 80098fa:	b92a      	cbnz	r2, 8009908 <_scanf_i+0x80>
 80098fc:	2308      	movs	r3, #8
 80098fe:	6822      	ldr	r2, [r4, #0]
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009906:	6022      	str	r2, [r4, #0]
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	68a2      	ldr	r2, [r4, #8]
 8009912:	1e51      	subs	r1, r2, #1
 8009914:	60a1      	str	r1, [r4, #8]
 8009916:	b192      	cbz	r2, 800993e <_scanf_i+0xb6>
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1c51      	adds	r1, r2, #1
 800991c:	6031      	str	r1, [r6, #0]
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	f805 2b01 	strb.w	r2, [r5], #1
 8009924:	6872      	ldr	r2, [r6, #4]
 8009926:	3a01      	subs	r2, #1
 8009928:	2a00      	cmp	r2, #0
 800992a:	6072      	str	r2, [r6, #4]
 800992c:	dc07      	bgt.n	800993e <_scanf_i+0xb6>
 800992e:	4631      	mov	r1, r6
 8009930:	4650      	mov	r0, sl
 8009932:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009936:	4790      	blx	r2
 8009938:	2800      	cmp	r0, #0
 800993a:	f040 8085 	bne.w	8009a48 <_scanf_i+0x1c0>
 800993e:	f10b 0b01 	add.w	fp, fp, #1
 8009942:	f1bb 0f03 	cmp.w	fp, #3
 8009946:	d1cb      	bne.n	80098e0 <_scanf_i+0x58>
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	b90b      	cbnz	r3, 8009950 <_scanf_i+0xc8>
 800994c:	230a      	movs	r3, #10
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	4948      	ldr	r1, [pc, #288]	; (8009a74 <_scanf_i+0x1ec>)
 8009954:	6960      	ldr	r0, [r4, #20]
 8009956:	1ac9      	subs	r1, r1, r3
 8009958:	f000 f8a0 	bl	8009a9c <__sccl>
 800995c:	f04f 0b00 	mov.w	fp, #0
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	6822      	ldr	r2, [r4, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d03d      	beq.n	80099e4 <_scanf_i+0x15c>
 8009968:	6831      	ldr	r1, [r6, #0]
 800996a:	6960      	ldr	r0, [r4, #20]
 800996c:	f891 c000 	ldrb.w	ip, [r1]
 8009970:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009974:	2800      	cmp	r0, #0
 8009976:	d035      	beq.n	80099e4 <_scanf_i+0x15c>
 8009978:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800997c:	d124      	bne.n	80099c8 <_scanf_i+0x140>
 800997e:	0510      	lsls	r0, r2, #20
 8009980:	d522      	bpl.n	80099c8 <_scanf_i+0x140>
 8009982:	f10b 0b01 	add.w	fp, fp, #1
 8009986:	f1b9 0f00 	cmp.w	r9, #0
 800998a:	d003      	beq.n	8009994 <_scanf_i+0x10c>
 800998c:	3301      	adds	r3, #1
 800998e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009992:	60a3      	str	r3, [r4, #8]
 8009994:	6873      	ldr	r3, [r6, #4]
 8009996:	3b01      	subs	r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	6073      	str	r3, [r6, #4]
 800999c:	dd1b      	ble.n	80099d6 <_scanf_i+0x14e>
 800999e:	6833      	ldr	r3, [r6, #0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	6033      	str	r3, [r6, #0]
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	e7d9      	b.n	8009960 <_scanf_i+0xd8>
 80099ac:	f1bb 0f02 	cmp.w	fp, #2
 80099b0:	d1ae      	bne.n	8009910 <_scanf_i+0x88>
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80099b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80099bc:	d1bf      	bne.n	800993e <_scanf_i+0xb6>
 80099be:	2310      	movs	r3, #16
 80099c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	e7a2      	b.n	800990e <_scanf_i+0x86>
 80099c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80099cc:	6022      	str	r2, [r4, #0]
 80099ce:	780b      	ldrb	r3, [r1, #0]
 80099d0:	f805 3b01 	strb.w	r3, [r5], #1
 80099d4:	e7de      	b.n	8009994 <_scanf_i+0x10c>
 80099d6:	4631      	mov	r1, r6
 80099d8:	4650      	mov	r0, sl
 80099da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099de:	4798      	blx	r3
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d0df      	beq.n	80099a4 <_scanf_i+0x11c>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	05db      	lsls	r3, r3, #23
 80099e8:	d50d      	bpl.n	8009a06 <_scanf_i+0x17e>
 80099ea:	42bd      	cmp	r5, r7
 80099ec:	d909      	bls.n	8009a02 <_scanf_i+0x17a>
 80099ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80099f2:	4632      	mov	r2, r6
 80099f4:	4650      	mov	r0, sl
 80099f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80099fe:	4798      	blx	r3
 8009a00:	464d      	mov	r5, r9
 8009a02:	42bd      	cmp	r5, r7
 8009a04:	d02d      	beq.n	8009a62 <_scanf_i+0x1da>
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	f012 0210 	ands.w	r2, r2, #16
 8009a0c:	d113      	bne.n	8009a36 <_scanf_i+0x1ae>
 8009a0e:	702a      	strb	r2, [r5, #0]
 8009a10:	4639      	mov	r1, r7
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	4650      	mov	r0, sl
 8009a16:	9e01      	ldr	r6, [sp, #4]
 8009a18:	47b0      	blx	r6
 8009a1a:	6821      	ldr	r1, [r4, #0]
 8009a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a20:	f011 0f20 	tst.w	r1, #32
 8009a24:	d013      	beq.n	8009a4e <_scanf_i+0x1c6>
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	f8c8 2000 	str.w	r2, [r8]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6018      	str	r0, [r3, #0]
 8009a30:	68e3      	ldr	r3, [r4, #12]
 8009a32:	3301      	adds	r3, #1
 8009a34:	60e3      	str	r3, [r4, #12]
 8009a36:	2000      	movs	r0, #0
 8009a38:	1bed      	subs	r5, r5, r7
 8009a3a:	44ab      	add	fp, r5
 8009a3c:	6925      	ldr	r5, [r4, #16]
 8009a3e:	445d      	add	r5, fp
 8009a40:	6125      	str	r5, [r4, #16]
 8009a42:	b007      	add	sp, #28
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	f04f 0b00 	mov.w	fp, #0
 8009a4c:	e7ca      	b.n	80099e4 <_scanf_i+0x15c>
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	f8c8 2000 	str.w	r2, [r8]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f011 0f01 	tst.w	r1, #1
 8009a5a:	bf14      	ite	ne
 8009a5c:	8018      	strhne	r0, [r3, #0]
 8009a5e:	6018      	streq	r0, [r3, #0]
 8009a60:	e7e6      	b.n	8009a30 <_scanf_i+0x1a8>
 8009a62:	2001      	movs	r0, #1
 8009a64:	e7ed      	b.n	8009a42 <_scanf_i+0x1ba>
 8009a66:	bf00      	nop
 8009a68:	0800a0e0 	.word	0x0800a0e0
 8009a6c:	08009bf1 	.word	0x08009bf1
 8009a70:	08008885 	.word	0x08008885
 8009a74:	0800a3ad 	.word	0x0800a3ad

08009a78 <_read_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	2200      	movs	r2, #0
 8009a82:	4d05      	ldr	r5, [pc, #20]	; (8009a98 <_read_r+0x20>)
 8009a84:	602a      	str	r2, [r5, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f7 fdc1 	bl	800160e <_read>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_read_r+0x1e>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_read_r+0x1e>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20002568 	.word	0x20002568

08009a9c <__sccl>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	780b      	ldrb	r3, [r1, #0]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	2b5e      	cmp	r3, #94	; 0x5e
 8009aa4:	bf13      	iteet	ne
 8009aa6:	2200      	movne	r2, #0
 8009aa8:	2201      	moveq	r2, #1
 8009aaa:	784b      	ldrbeq	r3, [r1, #1]
 8009aac:	1c48      	addne	r0, r1, #1
 8009aae:	bf08      	it	eq
 8009ab0:	1c88      	addeq	r0, r1, #2
 8009ab2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009ab6:	1e61      	subs	r1, r4, #1
 8009ab8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009abc:	42a9      	cmp	r1, r5
 8009abe:	d1fb      	bne.n	8009ab8 <__sccl+0x1c>
 8009ac0:	b90b      	cbnz	r3, 8009ac6 <__sccl+0x2a>
 8009ac2:	3801      	subs	r0, #1
 8009ac4:	bd70      	pop	{r4, r5, r6, pc}
 8009ac6:	f082 0201 	eor.w	r2, r2, #1
 8009aca:	4605      	mov	r5, r0
 8009acc:	54e2      	strb	r2, [r4, r3]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009ad4:	292d      	cmp	r1, #45	; 0x2d
 8009ad6:	d006      	beq.n	8009ae6 <__sccl+0x4a>
 8009ad8:	295d      	cmp	r1, #93	; 0x5d
 8009ada:	d0f3      	beq.n	8009ac4 <__sccl+0x28>
 8009adc:	b909      	cbnz	r1, 8009ae2 <__sccl+0x46>
 8009ade:	4628      	mov	r0, r5
 8009ae0:	e7f0      	b.n	8009ac4 <__sccl+0x28>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	e7f1      	b.n	8009aca <__sccl+0x2e>
 8009ae6:	786e      	ldrb	r6, [r5, #1]
 8009ae8:	2e5d      	cmp	r6, #93	; 0x5d
 8009aea:	d0fa      	beq.n	8009ae2 <__sccl+0x46>
 8009aec:	42b3      	cmp	r3, r6
 8009aee:	dcf8      	bgt.n	8009ae2 <__sccl+0x46>
 8009af0:	4619      	mov	r1, r3
 8009af2:	3502      	adds	r5, #2
 8009af4:	3101      	adds	r1, #1
 8009af6:	428e      	cmp	r6, r1
 8009af8:	5462      	strb	r2, [r4, r1]
 8009afa:	dcfb      	bgt.n	8009af4 <__sccl+0x58>
 8009afc:	1af1      	subs	r1, r6, r3
 8009afe:	3901      	subs	r1, #1
 8009b00:	42b3      	cmp	r3, r6
 8009b02:	bfa8      	it	ge
 8009b04:	2100      	movge	r1, #0
 8009b06:	1c58      	adds	r0, r3, #1
 8009b08:	1843      	adds	r3, r0, r1
 8009b0a:	e7e0      	b.n	8009ace <__sccl+0x32>

08009b0c <_strtoul_l.constprop.0>:
 8009b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b10:	4686      	mov	lr, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	4f35      	ldr	r7, [pc, #212]	; (8009bec <_strtoul_l.constprop.0+0xe0>)
 8009b16:	4628      	mov	r0, r5
 8009b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b1c:	5de6      	ldrb	r6, [r4, r7]
 8009b1e:	f016 0608 	ands.w	r6, r6, #8
 8009b22:	d1f8      	bne.n	8009b16 <_strtoul_l.constprop.0+0xa>
 8009b24:	2c2d      	cmp	r4, #45	; 0x2d
 8009b26:	d12f      	bne.n	8009b88 <_strtoul_l.constprop.0+0x7c>
 8009b28:	2601      	movs	r6, #1
 8009b2a:	782c      	ldrb	r4, [r5, #0]
 8009b2c:	1c85      	adds	r5, r0, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d057      	beq.n	8009be2 <_strtoul_l.constprop.0+0xd6>
 8009b32:	2b10      	cmp	r3, #16
 8009b34:	d109      	bne.n	8009b4a <_strtoul_l.constprop.0+0x3e>
 8009b36:	2c30      	cmp	r4, #48	; 0x30
 8009b38:	d107      	bne.n	8009b4a <_strtoul_l.constprop.0+0x3e>
 8009b3a:	7828      	ldrb	r0, [r5, #0]
 8009b3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009b40:	2858      	cmp	r0, #88	; 0x58
 8009b42:	d149      	bne.n	8009bd8 <_strtoul_l.constprop.0+0xcc>
 8009b44:	2310      	movs	r3, #16
 8009b46:	786c      	ldrb	r4, [r5, #1]
 8009b48:	3502      	adds	r5, #2
 8009b4a:	f04f 38ff 	mov.w	r8, #4294967295
 8009b4e:	fbb8 f8f3 	udiv	r8, r8, r3
 8009b52:	2700      	movs	r7, #0
 8009b54:	fb03 f908 	mul.w	r9, r3, r8
 8009b58:	4638      	mov	r0, r7
 8009b5a:	ea6f 0909 	mvn.w	r9, r9
 8009b5e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009b62:	f1bc 0f09 	cmp.w	ip, #9
 8009b66:	d814      	bhi.n	8009b92 <_strtoul_l.constprop.0+0x86>
 8009b68:	4664      	mov	r4, ip
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	dd22      	ble.n	8009bb4 <_strtoul_l.constprop.0+0xa8>
 8009b6e:	2f00      	cmp	r7, #0
 8009b70:	db1d      	blt.n	8009bae <_strtoul_l.constprop.0+0xa2>
 8009b72:	4580      	cmp	r8, r0
 8009b74:	d31b      	bcc.n	8009bae <_strtoul_l.constprop.0+0xa2>
 8009b76:	d101      	bne.n	8009b7c <_strtoul_l.constprop.0+0x70>
 8009b78:	45a1      	cmp	r9, r4
 8009b7a:	db18      	blt.n	8009bae <_strtoul_l.constprop.0+0xa2>
 8009b7c:	2701      	movs	r7, #1
 8009b7e:	fb00 4003 	mla	r0, r0, r3, r4
 8009b82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b86:	e7ea      	b.n	8009b5e <_strtoul_l.constprop.0+0x52>
 8009b88:	2c2b      	cmp	r4, #43	; 0x2b
 8009b8a:	bf04      	itt	eq
 8009b8c:	782c      	ldrbeq	r4, [r5, #0]
 8009b8e:	1c85      	addeq	r5, r0, #2
 8009b90:	e7cd      	b.n	8009b2e <_strtoul_l.constprop.0+0x22>
 8009b92:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b96:	f1bc 0f19 	cmp.w	ip, #25
 8009b9a:	d801      	bhi.n	8009ba0 <_strtoul_l.constprop.0+0x94>
 8009b9c:	3c37      	subs	r4, #55	; 0x37
 8009b9e:	e7e4      	b.n	8009b6a <_strtoul_l.constprop.0+0x5e>
 8009ba0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ba4:	f1bc 0f19 	cmp.w	ip, #25
 8009ba8:	d804      	bhi.n	8009bb4 <_strtoul_l.constprop.0+0xa8>
 8009baa:	3c57      	subs	r4, #87	; 0x57
 8009bac:	e7dd      	b.n	8009b6a <_strtoul_l.constprop.0+0x5e>
 8009bae:	f04f 37ff 	mov.w	r7, #4294967295
 8009bb2:	e7e6      	b.n	8009b82 <_strtoul_l.constprop.0+0x76>
 8009bb4:	2f00      	cmp	r7, #0
 8009bb6:	da07      	bge.n	8009bc8 <_strtoul_l.constprop.0+0xbc>
 8009bb8:	2322      	movs	r3, #34	; 0x22
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	f8ce 3000 	str.w	r3, [lr]
 8009bc2:	b932      	cbnz	r2, 8009bd2 <_strtoul_l.constprop.0+0xc6>
 8009bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	b106      	cbz	r6, 8009bcc <_strtoul_l.constprop.0+0xc0>
 8009bca:	4240      	negs	r0, r0
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	d0f9      	beq.n	8009bc4 <_strtoul_l.constprop.0+0xb8>
 8009bd0:	b107      	cbz	r7, 8009bd4 <_strtoul_l.constprop.0+0xc8>
 8009bd2:	1e69      	subs	r1, r5, #1
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	e7f5      	b.n	8009bc4 <_strtoul_l.constprop.0+0xb8>
 8009bd8:	2430      	movs	r4, #48	; 0x30
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1b5      	bne.n	8009b4a <_strtoul_l.constprop.0+0x3e>
 8009bde:	2308      	movs	r3, #8
 8009be0:	e7b3      	b.n	8009b4a <_strtoul_l.constprop.0+0x3e>
 8009be2:	2c30      	cmp	r4, #48	; 0x30
 8009be4:	d0a9      	beq.n	8009b3a <_strtoul_l.constprop.0+0x2e>
 8009be6:	230a      	movs	r3, #10
 8009be8:	e7af      	b.n	8009b4a <_strtoul_l.constprop.0+0x3e>
 8009bea:	bf00      	nop
 8009bec:	0800a261 	.word	0x0800a261

08009bf0 <_strtoul_r>:
 8009bf0:	f7ff bf8c 	b.w	8009b0c <_strtoul_l.constprop.0>

08009bf4 <__submore>:
 8009bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c00:	4299      	cmp	r1, r3
 8009c02:	d11b      	bne.n	8009c3c <__submore+0x48>
 8009c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c08:	f7fe fbd6 	bl	80083b8 <_malloc_r>
 8009c0c:	b918      	cbnz	r0, 8009c16 <__submore+0x22>
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009c20:	6360      	str	r0, [r4, #52]	; 0x34
 8009c22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009c26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009c2a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009c2e:	7043      	strb	r3, [r0, #1]
 8009c30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c34:	7003      	strb	r3, [r0, #0]
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	2000      	movs	r0, #0
 8009c3a:	e7ea      	b.n	8009c12 <__submore+0x1e>
 8009c3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009c3e:	0077      	lsls	r7, r6, #1
 8009c40:	463a      	mov	r2, r7
 8009c42:	f000 f963 	bl	8009f0c <_realloc_r>
 8009c46:	4605      	mov	r5, r0
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d0e0      	beq.n	8009c0e <__submore+0x1a>
 8009c4c:	eb00 0806 	add.w	r8, r0, r6
 8009c50:	4601      	mov	r1, r0
 8009c52:	4632      	mov	r2, r6
 8009c54:	4640      	mov	r0, r8
 8009c56:	f7fe fb78 	bl	800834a <memcpy>
 8009c5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009c5e:	f8c4 8000 	str.w	r8, [r4]
 8009c62:	e7e9      	b.n	8009c38 <__submore+0x44>

08009c64 <__swbuf_r>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	460e      	mov	r6, r1
 8009c68:	4614      	mov	r4, r2
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	b118      	cbz	r0, 8009c76 <__swbuf_r+0x12>
 8009c6e:	6983      	ldr	r3, [r0, #24]
 8009c70:	b90b      	cbnz	r3, 8009c76 <__swbuf_r+0x12>
 8009c72:	f7fe faa5 	bl	80081c0 <__sinit>
 8009c76:	4b21      	ldr	r3, [pc, #132]	; (8009cfc <__swbuf_r+0x98>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d12b      	bne.n	8009cd4 <__swbuf_r+0x70>
 8009c7c:	686c      	ldr	r4, [r5, #4]
 8009c7e:	69a3      	ldr	r3, [r4, #24]
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	071a      	lsls	r2, r3, #28
 8009c86:	d52f      	bpl.n	8009ce8 <__swbuf_r+0x84>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b36b      	cbz	r3, 8009ce8 <__swbuf_r+0x84>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	b2f6      	uxtb	r6, r6
 8009c92:	1ac0      	subs	r0, r0, r3
 8009c94:	6963      	ldr	r3, [r4, #20]
 8009c96:	4637      	mov	r7, r6
 8009c98:	4283      	cmp	r3, r0
 8009c9a:	dc04      	bgt.n	8009ca6 <__swbuf_r+0x42>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7fe febe 	bl	8008a20 <_fflush_r>
 8009ca4:	bb30      	cbnz	r0, 8009cf4 <__swbuf_r+0x90>
 8009ca6:	68a3      	ldr	r3, [r4, #8]
 8009ca8:	3001      	adds	r0, #1
 8009caa:	3b01      	subs	r3, #1
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	701e      	strb	r6, [r3, #0]
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	4283      	cmp	r3, r0
 8009cba:	d004      	beq.n	8009cc6 <__swbuf_r+0x62>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	07db      	lsls	r3, r3, #31
 8009cc0:	d506      	bpl.n	8009cd0 <__swbuf_r+0x6c>
 8009cc2:	2e0a      	cmp	r6, #10
 8009cc4:	d104      	bne.n	8009cd0 <__swbuf_r+0x6c>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f7fe fea9 	bl	8008a20 <_fflush_r>
 8009cce:	b988      	cbnz	r0, 8009cf4 <__swbuf_r+0x90>
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <__swbuf_r+0x9c>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d101      	bne.n	8009cde <__swbuf_r+0x7a>
 8009cda:	68ac      	ldr	r4, [r5, #8]
 8009cdc:	e7cf      	b.n	8009c7e <__swbuf_r+0x1a>
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <__swbuf_r+0xa0>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	bf08      	it	eq
 8009ce4:	68ec      	ldreq	r4, [r5, #12]
 8009ce6:	e7ca      	b.n	8009c7e <__swbuf_r+0x1a>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f80c 	bl	8009d08 <__swsetup_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0cb      	beq.n	8009c8c <__swbuf_r+0x28>
 8009cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf8:	e7ea      	b.n	8009cd0 <__swbuf_r+0x6c>
 8009cfa:	bf00      	nop
 8009cfc:	0800a16c 	.word	0x0800a16c
 8009d00:	0800a18c 	.word	0x0800a18c
 8009d04:	0800a14c 	.word	0x0800a14c

08009d08 <__swsetup_r>:
 8009d08:	4b32      	ldr	r3, [pc, #200]	; (8009dd4 <__swsetup_r+0xcc>)
 8009d0a:	b570      	push	{r4, r5, r6, lr}
 8009d0c:	681d      	ldr	r5, [r3, #0]
 8009d0e:	4606      	mov	r6, r0
 8009d10:	460c      	mov	r4, r1
 8009d12:	b125      	cbz	r5, 8009d1e <__swsetup_r+0x16>
 8009d14:	69ab      	ldr	r3, [r5, #24]
 8009d16:	b913      	cbnz	r3, 8009d1e <__swsetup_r+0x16>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f7fe fa51 	bl	80081c0 <__sinit>
 8009d1e:	4b2e      	ldr	r3, [pc, #184]	; (8009dd8 <__swsetup_r+0xd0>)
 8009d20:	429c      	cmp	r4, r3
 8009d22:	d10f      	bne.n	8009d44 <__swsetup_r+0x3c>
 8009d24:	686c      	ldr	r4, [r5, #4]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d2c:	0719      	lsls	r1, r3, #28
 8009d2e:	d42c      	bmi.n	8009d8a <__swsetup_r+0x82>
 8009d30:	06dd      	lsls	r5, r3, #27
 8009d32:	d411      	bmi.n	8009d58 <__swsetup_r+0x50>
 8009d34:	2309      	movs	r3, #9
 8009d36:	6033      	str	r3, [r6, #0]
 8009d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	e03e      	b.n	8009dc2 <__swsetup_r+0xba>
 8009d44:	4b25      	ldr	r3, [pc, #148]	; (8009ddc <__swsetup_r+0xd4>)
 8009d46:	429c      	cmp	r4, r3
 8009d48:	d101      	bne.n	8009d4e <__swsetup_r+0x46>
 8009d4a:	68ac      	ldr	r4, [r5, #8]
 8009d4c:	e7eb      	b.n	8009d26 <__swsetup_r+0x1e>
 8009d4e:	4b24      	ldr	r3, [pc, #144]	; (8009de0 <__swsetup_r+0xd8>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	bf08      	it	eq
 8009d54:	68ec      	ldreq	r4, [r5, #12]
 8009d56:	e7e6      	b.n	8009d26 <__swsetup_r+0x1e>
 8009d58:	0758      	lsls	r0, r3, #29
 8009d5a:	d512      	bpl.n	8009d82 <__swsetup_r+0x7a>
 8009d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5e:	b141      	cbz	r1, 8009d72 <__swsetup_r+0x6a>
 8009d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d002      	beq.n	8009d6e <__swsetup_r+0x66>
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7fe fecd 	bl	8008b08 <_free_r>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6363      	str	r3, [r4, #52]	; 0x34
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6063      	str	r3, [r4, #4]
 8009d7e:	6923      	ldr	r3, [r4, #16]
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f043 0308 	orr.w	r3, r3, #8
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	b94b      	cbnz	r3, 8009da2 <__swsetup_r+0x9a>
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d98:	d003      	beq.n	8009da2 <__swsetup_r+0x9a>
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f84d 	bl	8009e3c <__smakebuf_r>
 8009da2:	89a0      	ldrh	r0, [r4, #12]
 8009da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da8:	f010 0301 	ands.w	r3, r0, #1
 8009dac:	d00a      	beq.n	8009dc4 <__swsetup_r+0xbc>
 8009dae:	2300      	movs	r3, #0
 8009db0:	60a3      	str	r3, [r4, #8]
 8009db2:	6963      	ldr	r3, [r4, #20]
 8009db4:	425b      	negs	r3, r3
 8009db6:	61a3      	str	r3, [r4, #24]
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	b943      	cbnz	r3, 8009dce <__swsetup_r+0xc6>
 8009dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dc0:	d1ba      	bne.n	8009d38 <__swsetup_r+0x30>
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	0781      	lsls	r1, r0, #30
 8009dc6:	bf58      	it	pl
 8009dc8:	6963      	ldrpl	r3, [r4, #20]
 8009dca:	60a3      	str	r3, [r4, #8]
 8009dcc:	e7f4      	b.n	8009db8 <__swsetup_r+0xb0>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e7f7      	b.n	8009dc2 <__swsetup_r+0xba>
 8009dd2:	bf00      	nop
 8009dd4:	20000058 	.word	0x20000058
 8009dd8:	0800a16c 	.word	0x0800a16c
 8009ddc:	0800a18c 	.word	0x0800a18c
 8009de0:	0800a14c 	.word	0x0800a14c

08009de4 <abort>:
 8009de4:	2006      	movs	r0, #6
 8009de6:	b508      	push	{r3, lr}
 8009de8:	f000 f8e8 	bl	8009fbc <raise>
 8009dec:	2001      	movs	r0, #1
 8009dee:	f7f7 fc04 	bl	80015fa <_exit>

08009df2 <__swhatbuf_r>:
 8009df2:	b570      	push	{r4, r5, r6, lr}
 8009df4:	460e      	mov	r6, r1
 8009df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfa:	4614      	mov	r4, r2
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	461d      	mov	r5, r3
 8009e00:	b096      	sub	sp, #88	; 0x58
 8009e02:	da08      	bge.n	8009e16 <__swhatbuf_r+0x24>
 8009e04:	2200      	movs	r2, #0
 8009e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e0a:	602a      	str	r2, [r5, #0]
 8009e0c:	061a      	lsls	r2, r3, #24
 8009e0e:	d410      	bmi.n	8009e32 <__swhatbuf_r+0x40>
 8009e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e14:	e00e      	b.n	8009e34 <__swhatbuf_r+0x42>
 8009e16:	466a      	mov	r2, sp
 8009e18:	f000 f8ec 	bl	8009ff4 <_fstat_r>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	dbf1      	blt.n	8009e04 <__swhatbuf_r+0x12>
 8009e20:	9a01      	ldr	r2, [sp, #4]
 8009e22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e2a:	425a      	negs	r2, r3
 8009e2c:	415a      	adcs	r2, r3
 8009e2e:	602a      	str	r2, [r5, #0]
 8009e30:	e7ee      	b.n	8009e10 <__swhatbuf_r+0x1e>
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	2000      	movs	r0, #0
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	b016      	add	sp, #88	; 0x58
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}

08009e3c <__smakebuf_r>:
 8009e3c:	898b      	ldrh	r3, [r1, #12]
 8009e3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e40:	079d      	lsls	r5, r3, #30
 8009e42:	4606      	mov	r6, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	d507      	bpl.n	8009e58 <__smakebuf_r+0x1c>
 8009e48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	2301      	movs	r3, #1
 8009e52:	6163      	str	r3, [r4, #20]
 8009e54:	b002      	add	sp, #8
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	466a      	mov	r2, sp
 8009e5a:	ab01      	add	r3, sp, #4
 8009e5c:	f7ff ffc9 	bl	8009df2 <__swhatbuf_r>
 8009e60:	9900      	ldr	r1, [sp, #0]
 8009e62:	4605      	mov	r5, r0
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7fe faa7 	bl	80083b8 <_malloc_r>
 8009e6a:	b948      	cbnz	r0, 8009e80 <__smakebuf_r+0x44>
 8009e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d4ef      	bmi.n	8009e54 <__smakebuf_r+0x18>
 8009e74:	f023 0303 	bic.w	r3, r3, #3
 8009e78:	f043 0302 	orr.w	r3, r3, #2
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	e7e3      	b.n	8009e48 <__smakebuf_r+0xc>
 8009e80:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <__smakebuf_r+0x7c>)
 8009e82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	6020      	str	r0, [r4, #0]
 8009e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8c:	81a3      	strh	r3, [r4, #12]
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	6120      	str	r0, [r4, #16]
 8009e92:	6163      	str	r3, [r4, #20]
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	b15b      	cbz	r3, 8009eb0 <__smakebuf_r+0x74>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9e:	f000 f8bb 	bl	800a018 <_isatty_r>
 8009ea2:	b128      	cbz	r0, 8009eb0 <__smakebuf_r+0x74>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f023 0303 	bic.w	r3, r3, #3
 8009eaa:	f043 0301 	orr.w	r3, r3, #1
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	89a0      	ldrh	r0, [r4, #12]
 8009eb2:	4305      	orrs	r5, r0
 8009eb4:	81a5      	strh	r5, [r4, #12]
 8009eb6:	e7cd      	b.n	8009e54 <__smakebuf_r+0x18>
 8009eb8:	08008159 	.word	0x08008159

08009ebc <memchr>:
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	b2c9      	uxtb	r1, r1
 8009ec2:	4402      	add	r2, r0
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	d101      	bne.n	8009ece <memchr+0x12>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e003      	b.n	8009ed6 <memchr+0x1a>
 8009ece:	7804      	ldrb	r4, [r0, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	428c      	cmp	r4, r1
 8009ed4:	d1f6      	bne.n	8009ec4 <memchr+0x8>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <memmove>:
 8009ed8:	4288      	cmp	r0, r1
 8009eda:	b510      	push	{r4, lr}
 8009edc:	eb01 0402 	add.w	r4, r1, r2
 8009ee0:	d902      	bls.n	8009ee8 <memmove+0x10>
 8009ee2:	4284      	cmp	r4, r0
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	d807      	bhi.n	8009ef8 <memmove+0x20>
 8009ee8:	1e43      	subs	r3, r0, #1
 8009eea:	42a1      	cmp	r1, r4
 8009eec:	d008      	beq.n	8009f00 <memmove+0x28>
 8009eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef6:	e7f8      	b.n	8009eea <memmove+0x12>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4402      	add	r2, r0
 8009efc:	428a      	cmp	r2, r1
 8009efe:	d100      	bne.n	8009f02 <memmove+0x2a>
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0a:	e7f7      	b.n	8009efc <memmove+0x24>

08009f0c <_realloc_r>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	4680      	mov	r8, r0
 8009f12:	4614      	mov	r4, r2
 8009f14:	460e      	mov	r6, r1
 8009f16:	b921      	cbnz	r1, 8009f22 <_realloc_r+0x16>
 8009f18:	4611      	mov	r1, r2
 8009f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	f7fe ba4b 	b.w	80083b8 <_malloc_r>
 8009f22:	b92a      	cbnz	r2, 8009f30 <_realloc_r+0x24>
 8009f24:	f7fe fdf0 	bl	8008b08 <_free_r>
 8009f28:	4625      	mov	r5, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	f000 f882 	bl	800a038 <_malloc_usable_size_r>
 8009f34:	4284      	cmp	r4, r0
 8009f36:	4607      	mov	r7, r0
 8009f38:	d802      	bhi.n	8009f40 <_realloc_r+0x34>
 8009f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f3e:	d812      	bhi.n	8009f66 <_realloc_r+0x5a>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7fe fa38 	bl	80083b8 <_malloc_r>
 8009f48:	4605      	mov	r5, r0
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0ed      	beq.n	8009f2a <_realloc_r+0x1e>
 8009f4e:	42bc      	cmp	r4, r7
 8009f50:	4622      	mov	r2, r4
 8009f52:	4631      	mov	r1, r6
 8009f54:	bf28      	it	cs
 8009f56:	463a      	movcs	r2, r7
 8009f58:	f7fe f9f7 	bl	800834a <memcpy>
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7fe fdd2 	bl	8008b08 <_free_r>
 8009f64:	e7e1      	b.n	8009f2a <_realloc_r+0x1e>
 8009f66:	4635      	mov	r5, r6
 8009f68:	e7df      	b.n	8009f2a <_realloc_r+0x1e>

08009f6a <_raise_r>:
 8009f6a:	291f      	cmp	r1, #31
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4604      	mov	r4, r0
 8009f70:	460d      	mov	r5, r1
 8009f72:	d904      	bls.n	8009f7e <_raise_r+0x14>
 8009f74:	2316      	movs	r3, #22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f80:	b112      	cbz	r2, 8009f88 <_raise_r+0x1e>
 8009f82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f86:	b94b      	cbnz	r3, 8009f9c <_raise_r+0x32>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 f831 	bl	8009ff0 <_getpid_r>
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4601      	mov	r1, r0
 8009f92:	4620      	mov	r0, r4
 8009f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f98:	f000 b818 	b.w	8009fcc <_kill_r>
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d00a      	beq.n	8009fb6 <_raise_r+0x4c>
 8009fa0:	1c59      	adds	r1, r3, #1
 8009fa2:	d103      	bne.n	8009fac <_raise_r+0x42>
 8009fa4:	2316      	movs	r3, #22
 8009fa6:	6003      	str	r3, [r0, #0]
 8009fa8:	2001      	movs	r0, #1
 8009faa:	e7e7      	b.n	8009f7c <_raise_r+0x12>
 8009fac:	2400      	movs	r4, #0
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fb4:	4798      	blx	r3
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7e0      	b.n	8009f7c <_raise_r+0x12>
	...

08009fbc <raise>:
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <raise+0xc>)
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	6818      	ldr	r0, [r3, #0]
 8009fc2:	f7ff bfd2 	b.w	8009f6a <_raise_r>
 8009fc6:	bf00      	nop
 8009fc8:	20000058 	.word	0x20000058

08009fcc <_kill_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4d06      	ldr	r5, [pc, #24]	; (8009fec <_kill_r+0x20>)
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	f7f7 fafe 	bl	80015da <_kill>
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	d102      	bne.n	8009fe8 <_kill_r+0x1c>
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	b103      	cbz	r3, 8009fe8 <_kill_r+0x1c>
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	bd38      	pop	{r3, r4, r5, pc}
 8009fea:	bf00      	nop
 8009fec:	20002568 	.word	0x20002568

08009ff0 <_getpid_r>:
 8009ff0:	f7f7 baec 	b.w	80015cc <_getpid>

08009ff4 <_fstat_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4d06      	ldr	r5, [pc, #24]	; (800a014 <_fstat_r+0x20>)
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	f7f7 fb48 	bl	8001696 <_fstat>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d102      	bne.n	800a010 <_fstat_r+0x1c>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	b103      	cbz	r3, 800a010 <_fstat_r+0x1c>
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	bd38      	pop	{r3, r4, r5, pc}
 800a012:	bf00      	nop
 800a014:	20002568 	.word	0x20002568

0800a018 <_isatty_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	2300      	movs	r3, #0
 800a01c:	4d05      	ldr	r5, [pc, #20]	; (800a034 <_isatty_r+0x1c>)
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f7 fb46 	bl	80016b4 <_isatty>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_isatty_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_isatty_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20002568 	.word	0x20002568

0800a038 <_malloc_usable_size_r>:
 800a038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a03c:	1f18      	subs	r0, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfbc      	itt	lt
 800a042:	580b      	ldrlt	r3, [r1, r0]
 800a044:	18c0      	addlt	r0, r0, r3
 800a046:	4770      	bx	lr

0800a048 <_init>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

0800a054 <_fini>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr
